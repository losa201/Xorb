version: '3.8'

services:
  # Red/Blue Agent Framework Services
  
  # Agent Scheduler - Central orchestration service
  agent-scheduler:
    build:
      context: .
      dockerfile: src/services/red_blue_agents/docker/Dockerfile.framework
      target: production
    container_name: xorb-agent-scheduler
    environment:
      - XORB_ENV=${XORB_ENV:-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - TEMPORAL_HOST=temporal:7233
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - MAX_SANDBOXES_GLOBAL=${MAX_SANDBOXES_GLOBAL:-100}
      - PROMETHEUS_ENABLED=true
      - AUDIT_LOG_ENABLED=true
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
      - ./models:/app/models
    networks:
      - xorb-agents
      - xorb-infrastructure
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.agent-scheduler.rule=Host(`agents.xorb.local`)"
      - "traefik.http.services.agent-scheduler.loadbalancer.server.port=8000"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Sandbox Orchestrator - Container management service
  sandbox-orchestrator:
    build:
      context: .
      dockerfile: src/services/red_blue_agents/docker/Dockerfile.framework
      target: sandbox-orchestrator
    container_name: xorb-sandbox-orchestrator
    environment:
      - XORB_ENV=${XORB_ENV:-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=${REDIS_URL}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - MAX_SANDBOXES_GLOBAL=${MAX_SANDBOXES_GLOBAL:-100}
      - DEFAULT_SANDBOX_TTL=${DEFAULT_SANDBOX_TTL:-3600}
      - KATA_RUNTIME_ENABLED=${KATA_ENABLED:-false}
      - PROMETHEUS_ENABLED=true
    ports:
      - "8001:8001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
    networks:
      - xorb-agents
      - sandbox-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    privileged: true  # Required for container management
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Telemetry Collector - Data collection and analytics
  telemetry-collector:
    build:
      context: .
      dockerfile: src/services/red_blue_agents/docker/Dockerfile.framework
      target: telemetry-collector
    container_name: xorb-telemetry-collector
    environment:
      - XORB_ENV=${XORB_ENV:-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ML_ENABLED=${ML_ENABLED:-true}
      - ANALYTICS_ENABLED=${ANALYTICS_ENABLED:-true}
      - PROMETHEUS_ENABLED=true
    ports:
      - "8002:8002"
    volumes:
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    networks:
      - xorb-agents
      - xorb-infrastructure
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Red Team Agent Containers (Pre-built images for faster deployment)
  
  # Red Team Reconnaissance Agent
  red-recon-agent:
    build:
      context: .
      dockerfile: src/services/red_blue_agents/docker/Dockerfile.framework
      target: red-recon
    image: xorb/red-recon:latest
    deploy:
      replicas: 0  # Scaled dynamically by orchestrator
    networks:
      - sandbox-network
    environment:
      - AGENT_TYPE=red_recon
      - AGENT_SCHEDULER_URL=http://agent-scheduler:8000
      - TELEMETRY_COLLECTOR_URL=http://telemetry-collector:8002
    labels:
      - "xorb.agent.type=red_recon"
      - "xorb.agent.category=reconnaissance"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_RAW  # Required for network scanning

  # Red Team Exploitation Agent
  red-exploit-agent:
    build:
      context: .
      dockerfile: src/services/red_blue_agents/docker/Dockerfile.framework
      target: red-exploit
    image: xorb/red-exploit:latest
    deploy:
      replicas: 0  # Scaled dynamically by orchestrator
    networks:
      - sandbox-network
    environment:
      - AGENT_TYPE=red_exploit
      - AGENT_SCHEDULER_URL=http://agent-scheduler:8000
      - TELEMETRY_COLLECTOR_URL=http://telemetry-collector:8002
    labels:
      - "xorb.agent.type=red_exploit"
      - "xorb.agent.category=initial_access"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Blue Team Detection Agent
  blue-detect-agent:
    build:
      context: .
      dockerfile: src/services/red_blue_agents/docker/Dockerfile.framework
      target: blue-detect
    image: xorb/blue-detect:latest
    deploy:
      replicas: 0  # Scaled dynamically by orchestrator
    networks:
      - sandbox-network
      - monitoring-network
    environment:
      - AGENT_TYPE=blue_detect
      - AGENT_SCHEDULER_URL=http://agent-scheduler:8000
      - TELEMETRY_COLLECTOR_URL=http://telemetry-collector:8002
    labels:
      - "xorb.agent.type=blue_detect"
      - "xorb.agent.category=detection"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Blue Team Hunting Agent
  blue-hunt-agent:
    build:
      context: .
      dockerfile: src/services/red_blue_agents/docker/Dockerfile.framework
      target: blue-hunt
    image: xorb/blue-hunt:latest
    deploy:
      replicas: 0  # Scaled dynamically by orchestrator
    networks:
      - sandbox-network
      - monitoring-network
    environment:
      - AGENT_TYPE=blue_hunt
      - AGENT_SCHEDULER_URL=http://agent-scheduler:8000
      - TELEMETRY_COLLECTOR_URL=http://telemetry-collector:8002
    labels:
      - "xorb.agent.type=blue_hunt"
      - "xorb.agent.category=threat_hunting"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Infrastructure Services (Shared with main XORB platform)
  
  # PostgreSQL with pgvector extension
  postgres:
    image: ankane/pgvector:v0.5.1
    container_name: xorb-postgres-agents
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-xorb_agents}
      POSTGRES_USER: ${DATABASE_USER:-xorb}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_agents_data:/var/lib/postgresql/data
      - ./configs/postgres:/docker-entrypoint-initdb.d:ro
    command: >
      postgres 
      -c shared_preload_libraries=vector
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    networks:
      - xorb-infrastructure
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-xorb} -d ${DATABASE_NAME:-xorb_agents}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: xorb-redis-agents
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1 300 10 60 10000
      --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_agents_data:/data
    networks:
      - xorb-infrastructure
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Temporal workflow engine
  temporal:
    image: temporalio/auto-setup:1.22.4
    container_name: xorb-temporal-agents
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${DATABASE_USER:-xorb}
      - POSTGRES_PWD=${DATABASE_PASSWORD}
      - POSTGRES_SEEDS=postgres
      - POSTGRES_DB=temporal_agents
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    ports:
      - "7233:7233"
      - "8233:8233"
    volumes:
      - ./configs/temporal:/etc/temporal/config/dynamicconfig:ro
    networks:
      - xorb-infrastructure
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Monitoring and Observability
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: xorb-prometheus-agents
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus-agents.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/prometheus/rules-agents.yml:/etc/prometheus/rules.yml:ro
      - prometheus_agents_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - monitoring-network
      - xorb-infrastructure
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: xorb-grafana-agents
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3000:3000"
    volumes:
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_agents_data:/var/lib/grafana
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger for distributed tracing (Optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: xorb-jaeger-agents
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    networks:
      - monitoring-network
    restart: unless-stopped

  # Log aggregation with Loki (Optional)
  loki:
    image: grafana/loki:latest
    container_name: xorb-loki-agents
    ports:
      - "3100:3100"
    volumes:
      - ./configs/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_agents_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring-network
    restart: unless-stopped

  # Promtail for log collection (Optional)
  promtail:
    image: grafana/promtail:latest
    container_name: xorb-promtail-agents
    volumes:
      - ./configs/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/xorb:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring-network
    depends_on:
      - loki
    restart: unless-stopped

  # Security and Compliance
  
  # Vault for secret management (Optional)
  vault:
    image: vault:latest
    container_name: xorb-vault-agents
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN:-root}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_agents_data:/vault/data
      - ./configs/vault:/vault/config:ro
    cap_add:
      - IPC_LOCK
    networks:
      - xorb-infrastructure
    restart: unless-stopped

  # Falco for runtime security monitoring (Optional)
  falco:
    image: falcosecurity/falco:latest
    container_name: xorb-falco-agents
    privileged: true
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - /dev:/host/dev
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - /etc:/host/etc:ro
      - ./configs/falco/falco.yaml:/etc/falco/falco.yaml:ro
    networks:
      - monitoring-network
    restart: unless-stopped

networks:
  # Main agent communication network
  xorb-agents:
    driver: bridge
    name: xorb-agents-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

  # Isolated sandbox network for agent execution
  sandbox-network:
    driver: bridge
    name: xorb-sandbox-network
    internal: true  # No external internet access
    ipam:
      config:
        - subnet: 172.21.0.0/16

  # Infrastructure services network
  xorb-infrastructure:
    driver: bridge
    name: xorb-infrastructure-network
    ipam:
      config:
        - subnet: 172.22.0.0/16

  # Monitoring network
  monitoring-network:
    driver: bridge
    name: xorb-monitoring-network
    ipam:
      config:
        - subnet: 172.23.0.0/16

volumes:
  # Persistent data volumes
  postgres_agents_data:
    driver: local
  redis_agents_data:
    driver: local
  prometheus_agents_data:
    driver: local
  grafana_agents_data:
    driver: local
  loki_agents_data:
    driver: local
  vault_agents_data:
    driver: local

  # Shared volumes
  logs:
    driver: local
  models:
    driver: local
  configs:
    driver: local

# Docker Compose profiles for different deployment scenarios
x-profiles:
  # Development profile (all services)
  development: &development
    profiles: ["development", "full"]

  # Production profile (core services only)
  production: &production
    profiles: ["production", "core"]

  # Monitoring profile (monitoring services)
  monitoring: &monitoring
    profiles: ["monitoring", "full"]

  # Security profile (security services)
  security: &security
    profiles: ["security", "full"]