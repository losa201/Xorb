---
# Advanced SIEM Integration for Xorb 2.0
# Implements threat detection, behavioral analysis, and automated response

apiVersion: v1
kind: Namespace
metadata:
  name: xorb-security
  labels:
    security-tier: "advanced"

---
# Security Information and Event Management (SIEM) Stack
apiVersion: apps/v1
kind: Deployment
metadata:
  name: xorb-siem-analyzer
  namespace: xorb-security
spec:
  replicas: 2
  selector:
    matchLabels:
      app: siem-analyzer
  template:
    metadata:
      labels:
        app: siem-analyzer
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: xorb-siem-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: siem-analyzer
        image: xorb/siem-analyzer:2.0.0
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: LOG_LEVEL
          value: "INFO"
        - name: THREAT_DETECTION_ENABLED
          value: "true"
        - name: BEHAVIORAL_ANALYSIS_ENABLED
          value: "true"
        - name: ELASTICSEARCH_URL
          valueFrom:
            secretKeyRef:
              name: siem-secrets
              key: elasticsearch-url
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: siem-config
              key: kafka-brokers
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 20
        volumeMounts:
        - name: threat-rules
          mountPath: /etc/threat-rules
          readOnly: true
      volumes:
      - name: threat-rules
        configMap:
          name: threat-detection-rules

---
# Threat Detection Rules ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: threat-detection-rules
  namespace: xorb-security
data:
  authentication-threats.yaml: |
    rules:
      - name: "Brute Force Detection"
        description: "Detect brute force authentication attempts"
        condition: "failed_login_count > 5 AND time_window < 300"
        severity: "high"
        action: "block_ip"
        
      - name: "Credential Stuffing"
        description: "Detect credential stuffing attacks"
        condition: "distinct_usernames > 10 AND source_ip_count = 1"
        severity: "critical"
        action: "block_ip_and_alert"
        
      - name: "Anomalous Login Location"
        description: "Detect logins from unusual geographic locations"
        condition: "geo_distance > 1000km AND time_since_last_login < 3600"
        severity: "medium"
        action: "require_mfa"

  api-threats.yaml: |
    rules:
      - name: "API Rate Limit Abuse"
        description: "Detect API abuse patterns"
        condition: "requests_per_minute > 1000 AND user_agent_suspicious = true"
        severity: "high"
        action: "rate_limit"
        
      - name: "SQL Injection Attempt"
        description: "Detect SQL injection in API parameters"
        condition: "contains_sql_keywords = true AND parameter_injection = true"
        severity: "critical"
        action: "block_and_alert"
        
      - name: "Unusual Embedding Requests"
        description: "Detect anomalous NVIDIA embedding usage"
        condition: "embedding_requests > baseline * 5 AND embedding_content_suspicious = true"
        severity: "medium"
        action: "monitor_and_log"

  infrastructure-threats.yaml: |
    rules:
      - name: "Kubernetes API Abuse"
        description: "Detect unauthorized K8s API access"
        condition: "k8s_api_errors > 50 AND source_not_cluster = true"
        severity: "critical"
        action: "block_and_escalate"
        
      - name: "Container Breakout Attempt"
        description: "Detect container escape attempts"
        condition: "syscall_suspicious = true AND container_privileged = false"
        severity: "critical"
        action: "kill_pod_and_alert"
        
      - name: "Resource Exhaustion Attack"
        description: "Detect resource exhaustion attempts"
        condition: "cpu_usage > 90% AND memory_usage > 90% AND duration > 300"
        severity: "high"
        action: "scale_down_and_alert"

---
# SIEM Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: siem-config
  namespace: xorb-security
data:
  config.yaml: |
    siem:
      analysis_engine: "advanced"
      threat_intelligence:
        enabled: true
        sources:
          - "mitre-attack"
          - "cve-database"
          - "threat-intel-feeds"
      
      behavioral_analysis:
        enabled: true
        baseline_learning_period: "7d"
        anomaly_threshold: 2.5
        models:
          - "user_behavior"
          - "api_usage_patterns"
          - "network_traffic"
      
      automated_response:
        enabled: true
        response_levels:
          low: ["log", "monitor"]
          medium: ["alert", "rate_limit"]
          high: ["block", "alert", "escalate"]
          critical: ["immediate_block", "kill_session", "escalate"]
      
      integration:
        elasticsearch:
          index_pattern: "xorb-security-*"
          retention_days: 90
        
        prometheus:
          metrics_endpoint: "/metrics"
          labels:
            environment: "production"
            service: "xorb-siem"
        
        slack:
          webhook_enabled: true
          channels:
            alerts: "#xorb-security-alerts"
            incidents: "#xorb-incidents"

  kafka-brokers: "kafka-cluster:9092"
  elasticsearch-index: "xorb-security-events"

---
# Automated Incident Response Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: incident-responder
  namespace: xorb-security
spec:
  replicas: 1
  selector:
    matchLabels:
      app: incident-responder
  template:
    metadata:
      labels:
        app: incident-responder
    spec:
      serviceAccountName: xorb-incident-sa
      containers:
      - name: responder
        image: xorb/incident-responder:2.0.0
        env:
        - name: RESPONSE_MODE
          value: "automated"
        - name: ESCALATION_TIMEOUT
          value: "300" # 5 minutes
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: siem-secrets
              key: slack-webhook
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: response-playbooks
          mountPath: /etc/playbooks
          readOnly: true
      volumes:
      - name: response-playbooks
        configMap:
          name: incident-response-playbooks

---
# Incident Response Playbooks
apiVersion: v1
kind: ConfigMap
metadata:
  name: incident-response-playbooks
  namespace: xorb-security
data:
  brute-force-response.yaml: |
    playbook: "Brute Force Attack Response"
    triggers:
      - "Brute Force Detection"
    steps:
      - action: "block_source_ip"
        duration: "1h"
        escalate_after: "3_attempts"
      - action: "notify_security_team"
        urgency: "high"
      - action: "increase_monitoring"
        target: "authentication_endpoints"
        duration: "24h"
      - action: "generate_incident_report"
        include: ["ip_addresses", "user_accounts", "timeline"]

  api-abuse-response.yaml: |
    playbook: "API Abuse Response"
    triggers:
      - "API Rate Limit Abuse"
      - "SQL Injection Attempt"
    steps:
      - action: "apply_rate_limiting"
        rate: "10_requests_per_minute"
        duration: "1h"
      - action: "block_malicious_patterns"
        patterns: ["sql_injection", "xss_attempts"]
      - action: "alert_development_team"
        urgency: "medium"
      - action: "capture_request_samples"
        count: 10
        include_headers: true

  infrastructure-response.yaml: |
    playbook: "Infrastructure Threat Response"
    triggers:
      - "Container Breakout Attempt"
      - "Kubernetes API Abuse"
    steps:
      - action: "isolate_affected_pods"
        immediate: true
      - action: "capture_forensic_data"
        include: ["logs", "network_traces", "system_calls"]
      - action: "escalate_to_platform_team"
        urgency: "critical"
      - action: "initiate_incident_bridge"
        participants: ["security", "platform", "engineering"]

---
# RBAC for SIEM Services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: xorb-siem-sa
  namespace: xorb-security

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: xorb-siem-analyzer
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "create", "update"]
- apiGroups: ["security.istio.io"]
  resources: ["authorizationpolicies"]
  verbs: ["get", "list", "create", "update"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: xorb-siem-analyzer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: xorb-siem-analyzer
subjects:
- kind: ServiceAccount
  name: xorb-siem-sa
  namespace: xorb-security

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: xorb-incident-sa
  namespace: xorb-security

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: xorb-incident-responder
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "patch", "update"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: xorb-incident-responder
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: xorb-incident-responder
subjects:
- kind: ServiceAccount
  name: xorb-incident-sa
  namespace: xorb-security

---
# Network Security Monitoring
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: siem-network-policy
  namespace: xorb-security
spec:
  podSelector:
    matchLabels:
      app: siem-analyzer
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: xorb-system
    - namespaceSelector:
        matchLabels:
          name: xorb-monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 9200  # Elasticsearch
    - protocol: TCP
      port: 9092  # Kafka
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 53    # DNS
    - protocol: UDP
      port: 53    # DNS

---
# SIEM Service
apiVersion: v1
kind: Service
metadata:
  name: siem-analyzer
  namespace: xorb-security
  labels:
    app: siem-analyzer
spec:
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics
  selector:
    app: siem-analyzer

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: siem-metrics
  namespace: xorb-security
spec:
  selector:
    matchLabels:
      app: siem-analyzer
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics