# TODO: LEGACY â€” archived unused docker configs on audit 2025-08-07
version: '3.8'

services:
  # Red Team Agent - Autonomous penetration testing
  red-team:
    build:
      context: ./red-team
      dockerfile: Dockerfile
    hostname: red-team
    container_name: xorb-red-team
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    networks:
      combat_network:
        ipv4_address: 172.20.0.10
    volumes:
      - red_results:/redteam/results
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TARGET_NETWORK=172.20.0.0/24
      - COMBAT_MODE=active
      - LEARNING_MODE=enabled
    restart: unless-stopped
    depends_on:
      - blue-team
      - vulnerable-webapp
      - database-target

  # Blue Team Agent - Autonomous defense and monitoring
  blue-team:
    build:
      context: ./blue-team
      dockerfile: Dockerfile
    hostname: blue-team
    container_name: xorb-blue-team
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    networks:
      combat_network:
        ipv4_address: 172.20.0.20
    volumes:
      - blue_logs:/blueteam/logs
      - blue_intelligence:/blueteam/intelligence
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - MONITOR_NETWORK=172.20.0.0/24
      - THREAT_DETECTION=enabled
      - AUTO_RESPONSE=enabled
      - LEARNING_MODE=enabled
    restart: unless-stopped
    ports:
      - "8080:8080"  # Blue team dashboard

  # Vulnerable Web Application Target
  vulnerable-webapp:
    build:
      context: ./targets
      dockerfile: Dockerfile.webapp
    hostname: webapp-target
    container_name: xorb-webapp-target
    networks:
      combat_network:
        ipv4_address: 172.20.0.30
    volumes:
      - webapp_logs:/var/log/apache2
    environment:
      - VULNERABILITY_LEVEL=high
      - LOG_ATTACKS=true
    restart: unless-stopped
    ports:
      - "8081:80"  # External access for monitoring

  # Database Target (MySQL with vulnerabilities)
  database-target:
    image: mysql:5.7
    hostname: database-target
    container_name: xorb-database-target
    networks:
      combat_network:
        ipv4_address: 172.20.0.40
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=company_db
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
    volumes:
      - db_data:/var/lib/mysql
      - ./targets/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --bind-address=0.0.0.0 --skip-name-resolve
    restart: unless-stopped
    ports:
      - "3307:3306"  # External access for monitoring

  # SSH Target (Ubuntu with weak credentials)
  ssh-target:
    image: ubuntu:20.04
    hostname: ssh-target
    container_name: xorb-ssh-target
    networks:
      combat_network:
        ipv4_address: 172.20.0.50
    environment:
      - DEBIAN_FRONTEND=noninteractive
    volumes:
      - ./targets/ssh/setup.sh:/setup.sh
    command: >
      bash -c "
        apt-get update &&
        apt-get install -y openssh-server &&
        useradd -m -s /bin/bash admin &&
        echo 'admin:admin' | chpasswd &&
        useradd -m -s /bin/bash test &&
        echo 'test:test' | chpasswd &&
        echo 'root:root' | chpasswd &&
        mkdir -p /var/run/sshd &&
        sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config &&
        sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config &&
        /usr/sbin/sshd -D
      "
    restart: unless-stopped
    ports:
      - "2222:22"

  # SMB Target (Samba with weak configuration)
  smb-target:
    image: dperson/samba
    hostname: smb-target
    container_name: xorb-smb-target
    networks:
      combat_network:
        ipv4_address: 172.20.0.60
    environment:
      - USER=admin;admin
      - USER2=guest;guest
      - SHARE=public;/public;yes;no;no;all;admin
      - SHARE2=private;/private;yes;no;no;all;admin
    volumes:
      - smb_public:/public
      - smb_private:/private
    command: >
      bash -c "
        mkdir -p /public /private &&
        echo 'Public data accessible' > /public/readme.txt &&
        echo 'Sensitive company data' > /private/confidential.txt &&
        samba.sh -u 'admin;admin' -u 'guest;guest' -s 'public;/public;yes;no;no;all' -s 'private;/private;yes;no;no;admin'
      "
    restart: unless-stopped
    ports:
      - "445:445"
      - "139:139"

  # Combat Analytics - Real-time monitoring
  combat-analytics:
    image: grafana/grafana:latest
    hostname: combat-analytics
    container_name: xorb-combat-analytics
    networks:
      combat_network:
        ipv4_address: 172.20.0.70
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - analytics_data:/var/lib/grafana
      - ./analytics/grafana.ini:/etc/grafana/grafana.ini
      - ./analytics/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"  # Analytics dashboard
    restart: unless-stopped

  # Traffic Generator - Simulates normal network activity
  traffic-generator:
    image: alpine:latest
    hostname: traffic-gen
    container_name: xorb-traffic-generator
    networks:
      combat_network:
        ipv4_address: 172.20.0.80
    command: >
      sh -c "
        apk add --no-cache curl wget &&
        while true; do
          curl -s http://172.20.0.30/ > /dev/null 2>&1 || true
          wget -q -O /dev/null http://172.20.0.30/search?q=user_search || true
          sleep $((RANDOM % 30 + 10))
        done
      "
    restart: unless-stopped

  # Network Monitor - Captures all traffic for analysis
  network-monitor:
    image: nicolaka/netshoot
    hostname: network-monitor
    container_name: xorb-network-monitor
    privileged: true
    networks:
      combat_network:
        ipv4_address: 172.20.0.90
    volumes:
      - network_captures:/captures
    command: >
      sh -c "
        tcpdump -i eth0 -w /captures/combat_traffic_$(date +%Y%m%d_%H%M%S).pcap &
        while true; do sleep 3600; done
      "
    restart: unless-stopped

networks:
  combat_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1

volumes:
  red_results:
    driver: local
  blue_logs:
    driver: local
  blue_intelligence:
    driver: local
  webapp_logs:
    driver: local
  db_data:
    driver: local
  smb_public:
    driver: local
  smb_private:
    driver: local
  analytics_data:
    driver: local
  network_captures:
    driver: local