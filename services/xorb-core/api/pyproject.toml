[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "xorb-api"
version = "2.0.0"
description = "Xorb Security Platform API"
authors = [
    {name = "Xorb Team", email = "team@xorb.security"},
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["security", "api", "threat-intelligence", "evidence"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Security",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

dependencies = [
    "fastapi>=0.116.1",
    "uvicorn[standard]>=0.35.0",
    "temporalio>=1.0.0",
    "prometheus-fastapi-instrumentator>=6.0.0",
    "structlog>=23.1.0",
    "opentelemetry-instrumentation-fastapi>=0.41b0",
    "opentelemetry-exporter-otlp>=1.20.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "pydantic>=2.11.7",
    "alembic>=1.12.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "asyncpg>=0.28.0",
    "psycopg2-binary>=2.9.7",
    "pgvector>=0.1.8",
    "authlib>=1.3.0",
    "httpx>=0.28.0",
    "redis>=5.1.0",
    "boto3>=1.35.0",
    "aiofiles>=24.1.0",
    "python-magic>=0.4.27",
    "uvloop>=0.20.0",
    "orjson>=3.10.0",
    "psutil>=6.1.0",
    "numpy>=1.26.0",
    "structlog>=24.1.0",
    "opentelemetry-api>=1.23.0",
    "opentelemetry-sdk>=1.23.0",
    "opentelemetry-instrumentation-fastapi>=0.44b0",
    "opentelemetry-instrumentation-asyncpg>=0.44b0",
    "opentelemetry-instrumentation-redis>=0.44b0",
    "opentelemetry-instrumentation-httpx>=0.44b0",
    "opentelemetry-exporter-otlp>=1.23.0",
    "bleach>=6.1.0",
    "slowapi>=0.1.9",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "black>=24.0.0",
    "ruff>=0.5.0",
    "mypy>=1.10.0",
    "bandit[toml]>=1.7.0",
    "safety>=3.0.0",
    "pre-commit>=3.7.0",
    "coverage[toml]>=7.5.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "httpx>=0.28.0",
    "faker>=26.0.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/xorb/xorb-platform"
Documentation = "https://docs.xorb.security"
Repository = "https://github.com/xorb/xorb-platform"
"Bug Tracker" = "https://github.com/xorb/xorb-platform/issues"

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # flake8-bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert
    "S104",  # hardcoded bind all interfaces
]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "migrations",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S106", "S311"]  # Allow asserts and hardcoded passwords in tests

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pgvector.*",
    "temporalio.*",
    "asyncpg.*",
    "redis.*",
    "boto3.*",
    "magic.*",
    "structlog.*",
    "opentelemetry.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=10",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "asyncio: marks tests as async tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_start

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]