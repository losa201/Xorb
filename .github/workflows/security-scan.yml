name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run Bandit security scan
      run: |
        poetry run bandit -r xorb_common/ services/ -f sarif -o bandit.sarif
      continue-on-error: true

    - name: Upload Bandit SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: bandit.sarif

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/python
        generateSarif: "1"

    - name: Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  # CodeQL analysis for additional security insights
  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Container image vulnerability scanning
  container-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, worker, orchestrator, scanner, triage, payments]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -f compose/Dockerfile.${{ matrix.service }} -t xorb-${{ matrix.service }}:test .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'xorb-${{ matrix.service }}:test'
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      id: grype-scan
      with:
        image: 'xorb-${{ matrix.service }}:test'
        fail-build-on: 'high'
        output-format: sarif

    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1

    - name: Export requirements
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes

    - name: Run Safety check
      uses: pyupio/safety@2.3.4
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}
        scan: requirements.txt

    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit --format=sarif --output=pip-audit.sarif --requirement requirements.txt
      continue-on-error: true

    - name: Upload pip-audit results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: pip-audit.sarif

  # Infrastructure as Code security scanning
  iac-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov IaC scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: compose/
        framework: dockerfile,docker_compose
        output_format: sarif
        output_file_path: checkov.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov.sarif

    - name: Run Hadolint for Dockerfile linting
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: "compose/Dockerfile.*"
        format: sarif
        output-file: hadolint.sarif
        no-color: true

    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint.sarif

  # Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog secret scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks secret scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Security benchmark testing
  security-benchmark:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start test environment
      run: |
        cp compose/.env.example compose/.env
        echo "JWT_SECRET_KEY=test_secret_key_minimum_32_characters_long" >> compose/.env
        cd compose
        docker-compose up -d

    - name: Wait for services
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'

    - name: Run OWASP ZAP baseline scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Run custom security tests
      run: |
        python scripts/security-tests.py

    - name: Cleanup
      if: always()
      run: |
        cd compose
        docker-compose down -v

  # Generate security report
  security-report:
    runs-on: ubuntu-latest
    needs: [sast-scan, codeql-analysis, container-scan, dependency-scan, iac-scan, secret-scan, security-benchmark]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-report.md
        echo "## Scan Results" >> security-report.md
        echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- IaC Scan: ${{ needs.iac-scan.result }}" >> security-report.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
        echo "- Security Benchmark: ${{ needs.security-benchmark.result }}" >> security-report.md
        echo "" >> security-report.md
        echo "Generated on: $(date -u)" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md

    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });