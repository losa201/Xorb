# XORB Platform - Kubernetes Best Practices
# Namespace configuration with resource quotas and security policies

apiVersion: v1
kind: Namespace
metadata:
  name: xorb_platform
  labels:
    name: xorb_platform
    environment: production
    team: security
    app.kubernetes.io/name: xorb_platform
    app.kubernetes.io/version: "3.1.0"
    app.kubernetes.io/component: platform
    app.kubernetes.io/part-of: cybersecurity
    app.kubernetes.io/managed-by: helm

---
# Resource Quota
apiVersion: v1
kind: ResourceQuota
metadata:
  name: xorb-resource-quota
  namespace: xorb_platform
spec:
  hard:
    requests.cpu: "8"
    requests.memory: 16Gi
    limits.cpu: "16"
    limits.memory: 32Gi
    pods: "20"
    services: "10"
    secrets: "20"
    configmaps: "20"
    persistentvolumeclaims: "10"

---
# Limit Range
apiVersion: v1
kind: LimitRange
metadata:
  name: xorb-limit-range
  namespace: xorb_platform
spec:
  limits:
  - default:
      cpu: "500m"
      memory: "512Mi"
    defaultRequest:
      cpu: "100m"
      memory: "128Mi"
    type: Container
  - max:
      cpu: "2"
      memory: "4Gi"
    min:
      cpu: "50m"
      memory: "64Mi"
    type: Container

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: xorb-network-policy
  namespace: xorb_platform
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: xorb_platform
    - namespaceSelector:
        matchLabels:
          name: monitoring
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: xorb_platform
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443

---
# Pod Security Policy
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: xorb-psp
  namespace: xorb_platform
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
