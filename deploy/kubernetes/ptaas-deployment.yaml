apiVersion: v1
kind: Namespace
metadata:
  name: ptaas-production
  labels:
    name: ptaas-production
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ptaas-config
  namespace: ptaas-production
data:
  NODE_ENV: "production"
  REACT_APP_XORB_API_URL: "https://api.ptaas.example.com"
  REACT_APP_XORB_WS_URL: "wss://ws.ptaas.example.com"
  NGINX_WORKER_PROCESSES: "auto"
  NGINX_WORKER_CONNECTIONS: "1024"
  RATE_LIMIT_RPM: "60"
  CACHE_TTL: "300"
  SECURITY_HEADERS: "true"
  GZIP_COMPRESSION: "true"
  LOG_LEVEL: "info"
---
apiVersion: v1
kind: Secret
metadata:
  name: ptaas-secrets
  namespace: ptaas-production
type: Opaque
stringData:
  XORB_API_KEY: "ptaas-production-key-placeholder"
  JWT_SECRET: "jwt-secret-placeholder"
  WEBHOOK_SECRET: "webhook-secret-placeholder"
  SSL_CERT: |
    -----BEGIN CERTIFICATE-----
    # SSL certificate placeholder
    -----END CERTIFICATE-----
  SSL_KEY: |
    -----BEGIN PRIVATE KEY-----
    # SSL private key placeholder  
    -----END PRIVATE KEY-----
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ptaas-frontend
  namespace: ptaas-production
  labels:
    app: ptaas-frontend
    version: v1.0.0
    component: frontend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: ptaas-frontend
  template:
    metadata:
      labels:
        app: ptaas-frontend
        version: v1.0.0
        component: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ptaas-frontend
              topologyKey: kubernetes.io/hostname
      containers:
      - name: ptaas-frontend
        image: ptaas/frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        - containerPort: 9090
          name: metrics
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: ptaas-config
              key: NODE_ENV
        - name: REACT_APP_XORB_API_URL
          valueFrom:
            configMapKeyRef:
              name: ptaas-config
              key: REACT_APP_XORB_API_URL
        - name: REACT_APP_XORB_WS_URL
          valueFrom:
            configMapKeyRef:
              name: ptaas-config
              key: REACT_APP_XORB_WS_URL
        - name: XORB_API_KEY
          valueFrom:
            secretKeyRef:
              name: ptaas-secrets
              key: XORB_API_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2
        volumeMounts:
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: ssl-certs
        secret:
          secretName: ptaas-secrets
          items:
          - key: SSL_CERT
            path: tls.crt
          - key: SSL_KEY
            path: tls.key
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: ptaas-production
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log main;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 2m;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: https:; font-src 'self';" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
        
        # Upstream for API
        upstream xorb_api {
            least_conn;
            server xorb-api-service:8000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        # HTTP server (redirect to HTTPS)
        server {
            listen 80;
            server_name _;
            return 301 https://$host$request_uri;
        }
        
        # HTTPS server
        server {
            listen 443 ssl http2;
            server_name ptaas.example.com;
            
            # SSL configuration
            ssl_certificate /etc/ssl/certs/tls.crt;
            ssl_certificate_key /etc/ssl/certs/tls.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;
            ssl_session_cache shared:SSL:10m;
            ssl_session_timeout 10m;
            
            # Root and index
            root /usr/share/nginx/html;
            index index.html;
            
            # Static assets with caching
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Content-Type-Options nosniff;
            }
            
            # API proxy
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://xorb_api;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                proxy_connect_timeout 10s;
                proxy_send_timeout 10s;
                proxy_read_timeout 30s;
            }
            
            # WebSocket proxy
            location /ws/ {
                proxy_pass http://xorb_api;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_read_timeout 86400;
            }
            
            # Health check endpoints
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            location /ready {
                access_log off;
                try_files /index.html =503;
            }
            
            # Metrics endpoint for Prometheus
            location /metrics {
                access_log off;
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
                return 200 "# PTaaS Frontend Metrics\n";
                add_header Content-Type text/plain;
            }
            
            # React Router support
            location / {
                try_files $uri $uri/ /index.html;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma no-cache;
                add_header Expires 0;
            }
            
            # Security.txt
            location /.well-known/security.txt {
                return 200 "Contact: security@ptaas.example.com\nPreferred-Languages: en\nCanonical: https://ptaas.example.com/.well-known/security.txt\n";
                add_header Content-Type text/plain;
            }
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: ptaas-frontend-service
  namespace: ptaas-production
  labels:
    app: ptaas-frontend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: ptaas-frontend
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ptaas-ingress
  namespace: ptaas-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "60"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "2m"
spec:
  tls:
  - hosts:
    - ptaas.example.com
    - www.ptaas.example.com
    secretName: ptaas-tls
  rules:
  - host: ptaas.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ptaas-frontend-service
            port:
              number: 80
  - host: www.ptaas.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ptaas-frontend-service
            port:
              number: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ptaas-frontend-pdb
  namespace: ptaas-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: ptaas-frontend
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ptaas-frontend-hpa
  namespace: ptaas-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ptaas-frontend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ptaas-frontend-sa
  namespace: ptaas-production
automountServiceAccountToken: false
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ptaas-frontend-netpol
  namespace: ptaas-production
spec:
  podSelector:
    matchLabels:
      app: ptaas-frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: xorb-backend
    ports:
    - protocol: TCP
      port: 8000
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443