# Simplified Xorb Deployment - Local Development/Demo
version: '3.8'

networks:
  xorb-internal:
    driver: bridge

volumes:
  postgres_data:
  neo4j_data:
  redis_data:
  prometheus_data:
  grafana_data:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=xorb
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-xorb_postgres_2024}
      - POSTGRES_DB=xorb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - xorb-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xorb -d xorb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - xorb-internal
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-xorb_neo4j_2024}
      - NEO4J_server_memory_heap_initial__size=512M
      - NEO4J_server_memory_heap_max__size=1G
    volumes:
      - neo4j_data:/data
    networks:
      - xorb-internal
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p ${NEO4J_PASSWORD:-xorb_neo4j_2024} 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Xorb API Service (using local Python)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api.simple
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - POSTGRES_URL=postgresql://xorb:${POSTGRES_PASSWORD:-xorb_postgres_2024}@postgres:5432/xorb
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-xorb_neo4j_2024}
      - NVIDIA_API_KEY=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
    volumes:
      - .:/app
    networks:
      - xorb-internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.52.0
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./compose/observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - xorb-internal

  # Grafana
  grafana:
    image: grafana/grafana:11.1.0
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-xorb_grafana_2024}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./compose/observability/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - xorb-internal
    depends_on:
      - prometheus