version: '3.8'

services:
  # PostgreSQL Database - Hardened Configuration
  postgres-hardened:
    image: ankane/pgvector:v0.5.1
    container_name: xorb-postgres-hardened
    environment:
      POSTGRES_DB: xorb_prod
      POSTGRES_USER: xorb_prod
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_hardened_data:/var/lib/postgresql/data
      - ./scripts/init-db-prod.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./infra/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=vector
      -c max_connections=500
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=32MB
      -c min_wal_size=2GB
      -c max_wal_size=8GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
      -c log_min_duration_statement=1000
      -c log_statement=mod
      -c log_lock_waits=on
      -c log_temp_files=0
      -c log_connections=on
      -c log_disconnections=on
      -c log_hostname=on
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xorb_prod -d xorb_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
      - label=type:container_runtime_t
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    user: "70:70"  # Non-root user
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Redis - Hardened
  redis-hardened:
    image: redis:7-alpine
    container_name: xorb-redis-hardened
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_hardened_data:/data
    secrets:
      - redis_password
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    read_only: true
    security_opt:
      - no-new-privileges:true
    user: "999:999"  # Non-root user

  # Worker Service - Hardened
  worker-hardened:
    build:
      context: .
      dockerfile: src/services/worker/Dockerfile
      target: production
      cache_from:
        - xorb/worker:prod-cache
        - xorb/worker:latest
    environment:
      - XORB_ENV=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_HOST=postgres-hardened
      - DATABASE_PORT=5432
      - DATABASE_NAME=xorb_prod
      - DATABASE_USERNAME=xorb_prod
      - REDIS_HOST=redis-hardened
      - REDIS_PORT=6379
      - WORKER_CONCURRENCY=8
      - WORKER_MAX_MEMORY=512m
    volumes:
      - ./config:/app/config:ro
      - ./src/common:/app/src/common:ro
      - worker_hardened_logs:/app/logs
      - worker_hardened_data:/app/data
    secrets:
      - postgres_password
      - redis_password
    depends_on:
      postgres-hardened:
        condition: service_healthy
      redis-hardened:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    user: "1000:1000"  # Non-root user
    deploy:
      replicas: 4
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 60s

  # API Service - Hardened
  api-hardened:
    build:
      context: .
      dockerfile: src/api/Dockerfile
      target: production
      cache_from:
        - xorb/api:prod-cache
        - xorb/api:latest
    environment:
      - XORB_ENV=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_HOST=postgres-hardened
      - DATABASE_PORT=5432
      - DATABASE_NAME=xorb_prod
      - DATABASE_USERNAME=xorb_prod
      - REDIS_HOST=redis-hardened
      - REDIS_PORT=6379
      - WORKERS=8
      - MAX_WORKERS=16
      - TIMEOUT=60
      - KEEPALIVE=10
      - MAX_REQUESTS=5000
      - MAX_REQUESTS_JITTER=500
      - SKIP_MIGRATIONS=false
      - ENABLE_METRICS=true
      - CORS_ALLOW_ORIGINS=https://app.xorb.com,https://xorb.com
    ports:
      - "8000:8000"
    volumes:
      - ./config:/app/config:ro
      - ./src/common:/app/src/common:ro
      - api_hardened_logs:/app/logs
      - api_hardened_data:/app/data
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
      - encryption_key
    depends_on:
      postgres-hardened:
        condition: service_healthy
      redis-hardened:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    user: "1000:1000"  # Non-root user
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-hardened.rule=Host(`api.xorb.com`)"
      - "traefik.http.routers.api-hardened.tls=true"
      - "traefik.http.routers.api-hardened.tls.certresolver=letsencrypt"
      - "traefik.http.services.api-hardened.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.api-rate-limit.ratelimit.burst=100"

  # Load Balancer - Hardened
  nginx-hardened:
    image: nginx:alpine
    container_name: xorb-nginx-hardened
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-hardened
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
    user: "101:101"  # Non-root user

  # Orchestrator Service - Hardened
  orchestrator-hardened:
    build:
      context: .
      dockerfile: infra/docker/orchestrator.Dockerfile
      target: production
    container_name: xorb-orchestrator-hardened
    environment:
      - XORB_ENV=production
      - DATABASE_HOST=postgres-hardened
      - REDIS_HOST=redis-hardened
      - TEMPORAL_HOST=temporal-hardened:7233
    ports:
      - "8001:8001"
    volumes:
      - ./config:/app/config:ro
    depends_on:
      - postgres-hardened
      - redis-hardened
      - temporal-hardened
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    read_only: true
    tmpfs:
      - /tmp
    user: "1000:1000"  # Non-root user

  # Temporal - Hardened
  temporal-hardened:
    image: temporalio/auto-setup:1.22
    container_name: xorb-temporal-hardened
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=xorb_prod
      - POSTGRES_PWD_FILE=/run/secrets/postgres_password
      - POSTGRES_SEEDS=postgres-hardened
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/production.yaml
    ports:
      - "7233:7233"
      - "8233:8233"
    depends_on:
      postgres-hardened:
        condition: service_healthy
    secrets:
      - postgres_password
    volumes:
      - ./temporal-config:/etc/temporal/config/dynamicconfig
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    read_only: true
    tmpfs:
      - /tmp
    user: "1000:1000"  # Non-root user

  # HashiCorp Vault - Hardened
  vault-hardened:
    image: vault:1.15
    container_name: xorb-vault-hardened
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - ./infra/vault/vault-config.hcl:/vault/config/vault.hcl:ro
      - vault_hardened_data:/vault/data
    command: vault server -config=/vault/config/vault.hcl
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    read_only: true
    tmpfs:
      - /tmp
    user: "100:1000"  # Non-root user

  # Monitoring Stack - Hardened
  prometheus-hardened:
    image: prom/prometheus:latest
    container_name: xorb-prometheus-hardened
    ports:
      - "9090:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infra/monitoring/prometheus/prometheus-rules.yml:/etc/prometheus/rules.yml:ro
      - prometheus_hardened_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=90d'
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    read_only: true
    tmpfs:
      - /tmp
    user: "65534:65534"  # Non-root user

  grafana-hardened:
    image: grafana/grafana:latest
    container_name: xorb-grafana-hardened
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://monitoring.xorb.security
    ports:
      - "3000:3000"
    volumes:
      - ./infra/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infra/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_hardened_data:/var/lib/grafana
    secrets:
      - grafana_password
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    read_only: false  # Grafana needs write access to some directories
    user: "472:472"  # Grafana user

  # Alertmanager - Hardened
  alertmanager-hardened:
    image: prom/alertmanager:latest
    container_name: xorb-alertmanager-hardened
    ports:
      - "9093:9093"
    volumes:
      - ./infra/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_hardened_data:/alertmanager
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    read_only: true
    tmpfs:
      - /tmp
    user: "65534:65534"  # Non-root user

secrets:
  postgres_password:
    file: ./secrets/db_password
  redis_password:
    file: ./secrets/redis_password
  jwt_secret:
    file: ./secrets/jwt_secret
  encryption_key:
    file: ./secrets/encryption_key
  grafana_password:
    file: ./secrets/grafana_password

volumes:
  postgres_hardened_data:
  redis_hardened_data:
  prometheus_hardened_data:
  grafana_hardened_data:
  alertmanager_hardened_data:
  vault_hardened_data:
  worker_hardened_logs:
  worker_hardened_data:
  api_hardened_logs:
  api_hardened_data:

networks:
  default:
    name: xorb-hardened-network
    driver: bridge
