# XORB ML Defense Engine Dockerfile
# Optimized for AMD EPYC CPU-only workloads

FROM python:3.11-slim as builder

RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    ca-certificates \
    libomp-dev \
    libblas-dev \
    liblapack-dev \
    libopenblas-dev \
    gfortran \
    && rm -rf /var/lib/apt/lists/*

# Set build arguments
ARG BUILD_ENV=production
ARG ML_FRAMEWORK=torch

# Install Python ML dependencies
COPY requirements/ml-defense.txt /tmp/requirements.txt

# Install PyTorch CPU-only optimized for AMD EPYC
RUN pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

# Install other ML dependencies
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Install additional ML packages
RUN pip install --no-cache-dir \
    scikit-learn==1.3.0 \
    numpy==1.24.3 \
    pandas==2.0.3 \
    scipy==1.11.1 \
    matplotlib==3.7.2 \
    seaborn==0.12.2 \
    joblib==1.3.1 \
    xgboost==1.7.6 \
    lightgbm==4.0.0 \
    catboost==1.2 \
    optuna==3.3.0 \
    mlflow==2.5.0

# ==========================================
# Production stage
# ==========================================

FROM python:3.11-slim as production

RUN apt-get update && apt-get install -y \
    libomp-dev \
    libblas-dev \
    liblapack-dev \
    libopenblas-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONPATH="/app:$PYTHONPATH" \
    APP_ENV=production \
    OMP_NUM_THREADS=16 \
    MKL_NUM_THREADS=16 \
    OPENBLAS_NUM_THREADS=16 \
    BLIS_NUM_THREADS=16

# Create app user
RUN groupadd -r xorb && useradd -r -g xorb xorb

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Create application directories
RUN mkdir -p /app/{logs,models,data,config,checkpoints} \
    && chown -R xorb:xorb /app

# Create model cache directory
RUN mkdir -p /home/xorb/.cache/huggingface \
    && chown -R xorb:xorb /home/xorb/.cache

WORKDIR /app

# Copy application code
COPY --chown=xorb:xorb domains/adversarial/ml_defense_engine.py ./ml_defense/
COPY --chown=xorb:xorb domains/adversarial/adversarial_integration.py ./ml_defense/
COPY --chown=xorb:xorb domains/core/ ./core/
COPY --chown=xorb:xorb domains/utils/ ./utils/
COPY --chown=xorb:xorb src/shared/ ./shared/

# Copy ML models and configurations
COPY --chown=xorb:xorb config/ml-defense/ ./config/
COPY --chown=xorb:xorb models/ml-defense/ ./models/

# Copy entrypoint script
COPY --chown=xorb:xorb scripts/docker/ml-defense-entrypoint.sh ./entrypoint.sh
RUN chmod +x ./entrypoint.sh

# Create health check script
RUN echo '#!/bin/bash\npython -c "import torch; import sklearn; print(\"ML Dependencies OK\")" && curl -f http://localhost:8003/health || exit 1' > /app/healthcheck.sh \
    && chmod +x /app/healthcheck.sh

# Create model initialization script
COPY --chown=xorb:xorb scripts/ml/init_models.py ./init_models.py

# Switch to app user
USER xorb

# Pre-download common ML models (as app user)
RUN python -c "import torch; import sklearn; print('ML frameworks initialized')" || true

# Expose ports
EXPOSE 8003 8004

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=120s --retries=3 \
    CMD ["/app/healthcheck.sh"]

# Set entrypoint
ENTRYPOINT ["./entrypoint.sh"]
CMD ["python", "-m", "ml_defense.main"]