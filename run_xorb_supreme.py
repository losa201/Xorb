#!/usr/bin/env python3

import asyncio
import json
import logging
import sys
from pathlib import Path

# Add the current directory to the Python path
sys.path.insert(0, str(Path(__file__).parent))

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def main():
    """Main entry point for XORB Supreme Enhanced Edition."""
    
    print("üöÄ Starting XORB Supreme Enhanced Edition...")
    print("=" * 60)
    
    # Load configuration
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
        logger.info("Configuration loaded successfully")
    except FileNotFoundError:
        logger.error("config.json not found! Please create a configuration file.")
        return
    except json.JSONDecodeError as e:
        logger.error(f"Invalid JSON in config.json: {e}")
        return
    
    # Initialize components based on configuration
    components = []
    
    # 1. Initialize Knowledge Fabric with Enhanced Features
    print("\nüß† Initializing Enhanced Knowledge Fabric...")
    try:
        from knowledge_fabric.core import KnowledgeFabric
        
        # Check if ensemble ML is enabled
        if config.get("enhanced_features", {}).get("ensemble_ml", False):
            try:
                from knowledge_fabric.ensemble_predictor import EnsembleTargetPredictor
                print("  ‚úÖ Ensemble ML Predictor available")
            except ImportError as e:
                print(f"  ‚ö†Ô∏è  Ensemble ML not available: {e}")
        
        knowledge_fabric = KnowledgeFabric()
        await knowledge_fabric.initialize()
        components.append(("Knowledge Fabric", knowledge_fabric))
        print("  ‚úÖ Knowledge Fabric initialized")
        
    except Exception as e:
        logger.error(f"Failed to initialize Knowledge Fabric: {e}")
        return
    
    # 2. Initialize Threat Intelligence Streaming
    if config.get("enhanced_features", {}).get("threat_intelligence", False):
        print("\nüîç Initializing Threat Intelligence Streaming...")
        try:
            from integrations.threat_intel_streamer import ThreatIntelStreamer
            
            threat_streamer = ThreatIntelStreamer(knowledge_fabric)
            await threat_streamer.initialize()
            components.append(("Threat Intelligence", threat_streamer))
            print("  ‚úÖ Threat Intelligence Streamer initialized")
            
            # Start streaming in background
            asyncio.create_task(threat_streamer.start_streaming(
                update_interval_minutes=config.get("threat_intelligence", {}).get("update_interval_minutes", 60)
            ))
            print("  üîÑ Background streaming started")
            
        except Exception as e:
            logger.error(f"Failed to initialize Threat Intelligence: {e}")
    
    # 3. Initialize Stealth Agents
    if config.get("enhanced_features", {}).get("stealth_agents", False):
        print("\nü•∑ Initializing Stealth Agents...")
        try:
            from agents.stealth_agents import StealthPlaywrightAgent, StealthConfig
            
            stealth_config = StealthConfig(
                user_agent_rotation=config.get("stealth_config", {}).get("user_agent_rotation", True),
                proxy_rotation=config.get("stealth_config", {}).get("proxy_rotation", False),
                request_delay_min=config.get("stealth_config", {}).get("request_delay_min", 1.0),
                request_delay_max=config.get("stealth_config", {}).get("request_delay_max", 3.0),
                fingerprint_randomization=config.get("stealth_config", {}).get("fingerprint_randomization", True)
            )
            
            # Create a stealth agent for demonstration
            stealth_agent = StealthPlaywrightAgent("stealth_demo", stealth_config)
            await stealth_agent.initialize()
            components.append(("Stealth Agent", stealth_agent))
            print("  ‚úÖ Stealth Agents initialized")
            
        except Exception as e:
            logger.error(f"Failed to initialize Stealth Agents: {e}")
            print(f"  ‚ö†Ô∏è  Stealth agents not available: {e}")
    
    # 4. Initialize Market Intelligence
    if config.get("enhanced_features", {}).get("market_intelligence", False):
        print("\nüí∞ Initializing Market Intelligence...")
        try:
            from integrations.market_intelligence import MarketIntelligenceEngine
            from integrations.hackerone_client import HackerOneClient
            
            # Create a mock HackerOne client (would need real API key for full functionality)
            h1_client = HackerOneClient()
            market_engine = MarketIntelligenceEngine(h1_client)
            await market_engine.initialize()
            components.append(("Market Intelligence", market_engine))
            print("  ‚úÖ Market Intelligence Engine initialized")
            
        except Exception as e:
            logger.error(f"Failed to initialize Market Intelligence: {e}")
    
    # 5. Initialize ML Orchestrator
    print("\nü§ñ Initializing ML-Enhanced Orchestrator...")
    try:
        from orchestration.ml_orchestrator import IntelligentOrchestrator
        
        orchestrator = IntelligentOrchestrator()
        await orchestrator.start()
        components.append(("ML Orchestrator", orchestrator))
        print("  ‚úÖ ML-Enhanced Orchestrator initialized")
        
    except Exception as e:
        logger.error(f"Failed to initialize ML Orchestrator: {e}")
    
    # 6. Start Enhanced Dashboard
    print("\nüìä Starting Enhanced Dashboard...")
    try:
        from monitoring.dashboard import TerminalDashboard
        
        dashboard = TerminalDashboard()
        # Don't await this - let it run in background
        asyncio.create_task(dashboard.start_monitoring())
        print("  ‚úÖ Enhanced Dashboard started")
        
    except Exception as e:
        logger.error(f"Failed to start Dashboard: {e}")
    
    # Display system status
    print("\n" + "=" * 60)
    print("üéâ XORB Supreme Enhanced Edition - READY!")
    print("=" * 60)
    print(f"‚úÖ {len(components)} components initialized successfully")
    print("\nüìã Active Components:")
    
    for name, component in components:
        status = "üü¢ Running" if hasattr(component, 'running') and getattr(component, 'running', True) else "üü¢ Ready"
        print(f"  ‚Ä¢ {name}: {status}")
    
    print("\nüåü Enhanced Features Active:")
    enhanced_features = config.get("enhanced_features", {})
    for feature, enabled in enhanced_features.items():
        status = "üü¢ Enabled" if enabled else "‚ö™ Disabled"
        feature_name = feature.replace("_", " ").title()
        print(f"  ‚Ä¢ {feature_name}: {status}")
    
    print("\nüöÄ System Capabilities:")
    print("  ‚Ä¢ AI-Powered Target Prediction with Ensemble ML")
    print("  ‚Ä¢ Real-Time Threat Intelligence Integration")
    print("  ‚Ä¢ Advanced Stealth Browser Automation")
    print("  ‚Ä¢ Market Intelligence and ROI Optimization")
    print("  ‚Ä¢ Comprehensive Security Monitoring")
    
    print("\nüí° Next Steps:")
    print("  1. Configure API keys in config.json for full functionality")
    print("  2. Start monitoring stack: docker-compose -f docker-compose.monitoring.yml up -d")
    print("  3. Access Grafana dashboard: http://localhost:3000")
    print("  4. Create your first enhanced campaign")
    
    print("\nüîß Demo Commands:")
    print("  ‚Ä¢ Test ensemble ML: python -c \"from knowledge_fabric.ensemble_predictor import *\"")
    print("  ‚Ä¢ Check threat intel: python -c \"from integrations.threat_intel_streamer import *\"")
    print("  ‚Ä¢ Test stealth agents: python -c \"from agents.stealth_agents import *\"")
    
    # Keep the system running
    print("\n‚è≥ System running... Press Ctrl+C to stop")
    try:
        while True:
            await asyncio.sleep(30)
            # Periodic health check
            logger.info(f"XORB Supreme running with {len(components)} active components")
    except KeyboardInterrupt:
        print("\nüõë Shutting down XORB Supreme...")
        
        # Cleanup components
        for name, component in components:
            try:
                if hasattr(component, 'close'):
                    await component.close()
                elif hasattr(component, 'cleanup'):
                    await component.cleanup()
                print(f"  ‚úÖ {name} shut down cleanly")
            except Exception as e:
                logger.error(f"Error shutting down {name}: {e}")
        
        print("üëã XORB Supreme Enhanced Edition stopped")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        sys.exit(1)