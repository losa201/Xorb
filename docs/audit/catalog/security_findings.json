{
  "adr_compliance": {
    "adr_002": {
      "violations": [
        {
          "file": "src/api/app/infrastructure/advanced_redis_orchestrator.py",
          "pattern": "\\.pubsub\\s*\\(",
          "line": 821,
          "context": "get_optimal_client(\"read\")\n        pubsub = client.pubsub()\n        \n        try:\n            await pubsub.s",
          "severity": "MEDIUM"
        },
        {
          "file": "src/api/app/infrastructure/advanced_redis_orchestrator.py",
          "pattern": "pubsub.*channel",
          "line": 810,
          "context": "_subscription_loop(channel))\n                self.pubsub_tasks[channel] = task\n            \n            self.subscribers",
          "severity": "MEDIUM"
        },
        {
          "file": "src/api/app/infrastructure/advanced_redis_orchestrator.py",
          "pattern": "pubsub.*channel",
          "line": 824,
          "context": ".pubsub()\n        \n        try:\n            await pubsub.subscribe(channel)\n            \n            async for message in pu",
          "severity": "MEDIUM"
        },
        {
          "file": "src/xorb/intelligence/vulnerability_correlation_engine.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 688,
          "context": "is for real-time notifications\n        await self.redis_client.publish(\"vulnerability_alerts\", json.dumps(alert_data))",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/intelligence/vulnerability_correlation_engine.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 814,
          "context": "isoformat()\n        }\n        \n        await self.redis_client.publish(\"vulnerability_alerts\", json.dumps(alert_data))",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/audit/audit_logger.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 722,
          "context": "or real-time notifications\n            await self.redis_client.publish(\"audit_alerts\", json.dumps(alert))",
          "severity": "HIGH"
        },
        {
          "file": "tests/unit/test_autonomous_response.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 249,
          "context": "\"status\": \"acknowledged\"\n        }\n\n        await redis.publish('xorb:coordination', json.dumps(response))",
          "severity": "HIGH"
        },
        {
          "file": "tests/unit/test_autonomous_response.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 273,
          "context": "ime.utcnow().isoformat()\n        }\n\n        await redis.publish('xorb:coordination', json.dumps(response))",
          "severity": "HIGH"
        },
        {
          "file": "tests/unit/test_autonomous_response.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 301,
          "context": "format()\n                }\n\n                await redis.publish('xorb:agent_status', json.dumps(status_update))",
          "severity": "HIGH"
        },
        {
          "file": "tests/unit/test_autonomous_response.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 383,
          "context": "ime.utcnow().isoformat()\n        }\n\n        await redis.publish('xorb:coordination', json.dumps(coordination_msg))",
          "severity": "HIGH"
        },
        {
          "file": "tests/unit/test_autonomous_response.py",
          "pattern": "\\.pubsub\\s*\\(",
          "line": 163,
          "context": "ction_pool=self.redis_pool)\n        pubsub = redis.pubsub()\n\n        try:\n            # Subscribe to agent c",
          "severity": "MEDIUM"
        },
        {
          "file": "tests/unit/test_autonomous_response.py",
          "pattern": "pubsub.*channel",
          "line": 167,
          "context": "to agent communication channels\n            await pubsub.subscribe('xorb:coordination', 'xorb:test_channel')\n            logger.info(\"Subscribed to coordina",
          "severity": "MEDIUM"
        },
        {
          "file": "tests/unit/test_autonomous_response.py",
          "pattern": "pubsub.*channel",
          "line": 189,
          "context": "ncio.sleep(5)\n\n        finally:\n            await pubsub.unsubscribe('xorb:coordination', 'xorb:test_channel')\n            await pubsub.close()\n\n    async def",
          "severity": "MEDIUM"
        },
        {
          "file": "services/xorb-core/orchestration/compliance_orchestrator.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 131,
          "context": "# Publish completion event\n            await self.redis_client.publish(\n                \"compliance_validation_complete\",",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/orchestration/compliance_orchestrator.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 569,
          "context": "# Publish error event\n            await self.redis_client.publish(\n                \"compliance_validation_error\",",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/intelligence/vulnerability_correlation_engine.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 688,
          "context": "is for real-time notifications\n        await self.redis_client.publish(\"vulnerability_alerts\", json.dumps(alert_data))",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/intelligence/vulnerability_correlation_engine.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 814,
          "context": "isoformat()\n        }\n        \n        await self.redis_client.publish(\"vulnerability_alerts\", json.dumps(alert_data))",
          "severity": "HIGH"
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "pubsub.*channel",
          "line": 28,
          "context": "r'\\.pubsub\\s*\\(',\n                r'pubsub.*channel',\n                r'message.*bus.*redis'",
          "severity": "MEDIUM"
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "message.*bus.*redis",
          "line": 29,
          "context": "r'pubsub.*channel',\n                r'message.*bus.*redis'\n            ]\n            \n            # Complia",
          "severity": "MEDIUM"
        },
        {
          "file": "tools/scripts/utilities/distributed_threat_hunting.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 419,
          "context": "nnounce agent registration\n            await self.redis_pool.publish(\n                \"threat_hunting:agent_events\",",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/distributed_threat_hunting.py",
          "pattern": "redis.*\\.publish\\s*\\(",
          "line": 481,
          "context": "# Notify task scheduler\n            await self.redis_pool.publish(\n                \"threat_hunting:task_events\",",
          "severity": "HIGH"
        }
      ],
      "compliant_usage": [
        {
          "file": "ptaas/threat_hunting_engine.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 133
        },
        {
          "file": "ptaas/threat_hunting_engine.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 136
        },
        {
          "file": "ptaas/streaming_analytics.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 94
        },
        {
          "file": "demo/sample_data_generator.py",
          "pattern": "cache.*redis",
          "line": 28
        },
        {
          "file": "src/security/enhanced_security.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 297
        },
        {
          "file": "src/common/config_manager.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 332
        },
        {
          "file": "src/api/tests/test_redis_manager.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 144
        },
        {
          "file": "src/api/tests/test_redis_manager.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 149
        },
        {
          "file": "src/api/tests/test_redis_manager.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 155
        },
        {
          "file": "src/api/tests/test_redis_manager.py",
          "pattern": "cache.*redis",
          "line": 279
        },
        {
          "file": "src/api/app/container.py",
          "pattern": "cache.*redis",
          "line": 170
        },
        {
          "file": "src/api/app/enhanced_container.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 85
        },
        {
          "file": "src/api/app/enhanced_container.py",
          "pattern": "cache.*redis",
          "line": 201
        },
        {
          "file": "src/api/app/enhanced_main.py",
          "pattern": "cache.*redis",
          "line": 306
        },
        {
          "file": "src/api/middleware/rate_limiting.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 399
        },
        {
          "file": "src/api/middleware/rate_limiting.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 725
        },
        {
          "file": "src/api/middleware/rate_limiting.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 731
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 714
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 701
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "cache.*redis",
          "line": 539
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "cache.*redis",
          "line": 540
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "cache.*redis",
          "line": 541
        },
        {
          "file": "src/api/app/jobs/service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 234
        },
        {
          "file": "src/api/app/jobs/queue.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 59
        },
        {
          "file": "src/api/app/jobs/queue.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 260
        },
        {
          "file": "src/api/app/jobs/worker.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 263
        },
        {
          "file": "src/api/app/storage/filesystem.py",
          "pattern": "cache.*redis",
          "line": 63
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 618
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 646
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 666
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 797
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "cache.*redis",
          "line": 881
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "cache.*redis",
          "line": 883
        },
        {
          "file": "src/api/app/infrastructure/production_container.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 130
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 942
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 969
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 993
        },
        {
          "file": "src/api/app/infrastructure/production_repository_implementations.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 341
        },
        {
          "file": "src/api/app/infrastructure/production_repository_implementations.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 358
        },
        {
          "file": "src/api/app/infrastructure/production_repository_implementations.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 377
        },
        {
          "file": "src/api/app/infrastructure/production_repository_implementations.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 403
        },
        {
          "file": "src/api/app/infrastructure/production_repositories.py",
          "pattern": "cache.*redis",
          "line": 698
        },
        {
          "file": "src/api/app/infrastructure/production_repositories.py",
          "pattern": "cache.*redis",
          "line": 715
        },
        {
          "file": "src/api/app/infrastructure/repositories.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 347
        },
        {
          "file": "src/api/app/infrastructure/repositories.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 360
        },
        {
          "file": "src/api/app/infrastructure/repositories.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 365
        },
        {
          "file": "src/api/app/infrastructure/repositories.py",
          "pattern": "cache.*redis",
          "line": 685
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 168
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 555
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 556
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 557
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 185
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 245
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 384
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 122
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 128
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 134
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 146
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 167
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 168
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 219
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 463
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 657
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 670
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 691
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 692
        },
        {
          "file": "src/api/app/routers/gamification.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 208
        },
        {
          "file": "src/api/app/routers/gamification.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 139
        },
        {
          "file": "src/api/app/routers/gamification.py",
          "pattern": "cache.*redis",
          "line": 208
        },
        {
          "file": "src/api/app/routers/health.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 136
        },
        {
          "file": "src/api/app/routers/health.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 137
        },
        {
          "file": "src/api/app/routers/health.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 138
        },
        {
          "file": "src/api/app/routers/system_status.py",
          "pattern": "cache.*redis",
          "line": 63
        },
        {
          "file": "src/api/app/utils/rate_limit_manager.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 314
        },
        {
          "file": "src/api/app/utils/rate_limit_manager.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 315
        },
        {
          "file": "src/api/app/utils/rate_limit_manager.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 316
        },
        {
          "file": "src/api/app/utils/rate_limit_manager.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 317
        },
        {
          "file": "src/api/app/utils/rate_limit_manager.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 247
        },
        {
          "file": "src/api/app/utils/rate_limit_manager.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 520
        },
        {
          "file": "src/api/app/utils/rate_limit_manager.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 529
        },
        {
          "file": "src/api/app/core/advanced_monitoring.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 640
        },
        {
          "file": "src/api/app/core/rate_limit_policies.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 656
        },
        {
          "file": "src/api/app/core/rate_limit_policies.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 667
        },
        {
          "file": "src/api/app/core/rate_limit_policies.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 690
        },
        {
          "file": "src/api/app/core/rate_limit_policies.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 696
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 480
        },
        {
          "file": "src/api/app/core/production_config.py",
          "pattern": "cache.*redis",
          "line": 292
        },
        {
          "file": "src/api/app/core/production_config.py",
          "pattern": "cache.*redis",
          "line": 293
        },
        {
          "file": "src/api/app/core/production_config.py",
          "pattern": "cache.*redis",
          "line": 294
        },
        {
          "file": "src/api/app/core/production_config.py",
          "pattern": "cache.*redis",
          "line": 295
        },
        {
          "file": "src/api/app/core/production_config.py",
          "pattern": "cache.*redis",
          "line": 296
        },
        {
          "file": "src/api/app/core/production_config.py",
          "pattern": "cache.*redis",
          "line": 297
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 902
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 903
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 904
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 905
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 958
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 984
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 971
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 705
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 925
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 977
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 733
        },
        {
          "file": "src/api/app/core/cache.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 463
        },
        {
          "file": "src/api/app/core/cache.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 474
        },
        {
          "file": "src/api/app/core/cache.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 482
        },
        {
          "file": "src/api/app/core/cache.py",
          "pattern": "cache.*redis",
          "line": 449
        },
        {
          "file": "src/api/app/core/cache.py",
          "pattern": "cache.*redis",
          "line": 454
        },
        {
          "file": "src/api/app/core/cache.py",
          "pattern": "cache.*redis",
          "line": 488
        },
        {
          "file": "src/api/app/core/cache.py",
          "pattern": "cache.*redis",
          "line": 525
        },
        {
          "file": "src/api/app/services/advanced_network_security.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 1020
        },
        {
          "file": "src/api/app/services/advanced_network_security.py",
          "pattern": "cache.*redis",
          "line": 1017
        },
        {
          "file": "src/api/app/services/ptaas_orchestrator_service_helpers.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 546
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 222
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 269
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 373
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 476
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 561
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 238
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 298
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 382
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 387
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 425
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 502
        },
        {
          "file": "src/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 539
        },
        {
          "file": "src/api/app/services/base_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 385
        },
        {
          "file": "src/api/app/services/performance_optimization_engine.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 266
        },
        {
          "file": "src/api/app/services/performance_optimization_engine.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 270
        },
        {
          "file": "src/api/app/services/performance_optimization_engine.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 286
        },
        {
          "file": "src/api/app/services/performance_optimization_engine.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 292
        },
        {
          "file": "src/api/app/services/production_metrics_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 546
        },
        {
          "file": "src/api/app/services/advanced_redis_intelligence_engine.py",
          "pattern": "cache.*redis",
          "line": 390
        },
        {
          "file": "src/api/app/services/security_monitoring_service.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 983
        },
        {
          "file": "src/api/app/services/consolidated_auth_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 561
        },
        {
          "file": "src/api/app/services/consolidated_auth_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 562
        },
        {
          "file": "src/api/app/services/consolidated_auth_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 586
        },
        {
          "file": "src/api/app/services/consolidated_auth_service.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 576
        },
        {
          "file": "src/api/app/services/consolidated_auth_service.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 579
        },
        {
          "file": "src/api/app/services/advanced_autonomous_ai_orchestrator.py",
          "pattern": "cache.*redis",
          "line": 898
        },
        {
          "file": "src/api/app/services/production_enterprise_platform_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 201
        },
        {
          "file": "src/api/app/services/production_intelligence_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 601
        },
        {
          "file": "src/api/app/services/production_intelligence_service.py",
          "pattern": "cache.*redis",
          "line": 601
        },
        {
          "file": "src/api/app/services/ptaas_orchestrator_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 235
        },
        {
          "file": "src/api/app/middleware/performance_middleware.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 265
        },
        {
          "file": "src/api/app/middleware/performance_middleware.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 266
        },
        {
          "file": "src/api/app/middleware/performance_middleware.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 276
        },
        {
          "file": "src/api/app/middleware/production_middleware.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 747
        },
        {
          "file": "src/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 275
        },
        {
          "file": "src/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 303
        },
        {
          "file": "src/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 329
        },
        {
          "file": "src/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 351
        },
        {
          "file": "src/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 416
        },
        {
          "file": "src/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 425
        },
        {
          "file": "src/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 332
        },
        {
          "file": "src/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 338
        },
        {
          "file": "src/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 323
        },
        {
          "file": "src/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 292
        },
        {
          "file": "src/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 298
        },
        {
          "file": "src/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 303
        },
        {
          "file": "src/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 318
        },
        {
          "file": "src/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 193
        },
        {
          "file": "src/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 214
        },
        {
          "file": "src/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 340
        },
        {
          "file": "src/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 351
        },
        {
          "file": "src/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 356
        },
        {
          "file": "src/api/app/middleware/production_security.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 120
        },
        {
          "file": "src/api/app/middleware/production_security.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 763
        },
        {
          "file": "src/api/app/middleware/production_security.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 921
        },
        {
          "file": "src/api/app/middleware/production_security.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 973
        },
        {
          "file": "src/api/app/middleware/production_security.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 895
        },
        {
          "file": "src/api/app/middleware/production_security.py",
          "pattern": "cache.*redis",
          "line": 120
        },
        {
          "file": "src/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 211
        },
        {
          "file": "src/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 240
        },
        {
          "file": "src/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 149
        },
        {
          "file": "src/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 155
        },
        {
          "file": "src/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 161
        },
        {
          "file": "src/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 268
        },
        {
          "file": "src/api/app/infrastructure/caching/cache_manager.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 271
        },
        {
          "file": "src/api/app/infrastructure/caching/cache_manager.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 291
        },
        {
          "file": "src/api/app/infrastructure/caching/cache_manager.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 303
        },
        {
          "file": "src/api/app/infrastructure/caching/cache_manager.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 328
        },
        {
          "file": "src/api/app/infrastructure/caching/cache_manager.py",
          "pattern": "cache.*redis",
          "line": 394
        },
        {
          "file": "src/api/app/infrastructure/caching/cache_manager.py",
          "pattern": "cache.*redis",
          "line": 397
        },
        {
          "file": "src/api/app/infrastructure/caching/__init__.py",
          "pattern": "cache.*redis",
          "line": 7
        },
        {
          "file": "src/xorb/execution_engine/core.py",
          "pattern": "cache.*redis",
          "line": 109
        },
        {
          "file": "src/xorb/execution_engine/core.py",
          "pattern": "cache.*redis",
          "line": 252
        },
        {
          "file": "src/xorb/intelligence_engine/agent_orchestrator.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 39
        },
        {
          "file": "src/xorb/intelligence_engine/agent_orchestrator.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 74
        },
        {
          "file": "src/xorb/architecture/fault_tolerance.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 674
        },
        {
          "file": "src/xorb/architecture/fault_tolerance.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 682
        },
        {
          "file": "src/xorb/architecture/service_mesh.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 389
        },
        {
          "file": "src/xorb/core/multi_tenant_manager.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 267
        },
        {
          "file": "src/xorb/core/multi_tenant_manager.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 608
        },
        {
          "file": "src/xorb/core/multi_tenant_manager.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 672
        },
        {
          "file": "src/xorb/intelligence/vulnerability_correlation_engine.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 206
        },
        {
          "file": "src/xorb/intelligence/vulnerability_correlation_engine.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 797
        },
        {
          "file": "src/xorb_services/core_platform/main.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 114
        },
        {
          "file": "src/xorb_services/core_platform/main.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 175
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 44
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 78
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 93
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 146
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 227
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 259
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 29
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 59
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 109
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 129
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 217
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 242
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 289
        },
        {
          "file": "src/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 276
        },
        {
          "file": "src/orchestrator/core/workflow_engine.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 1186
        },
        {
          "file": "src/orchestrator/core/workflow_engine.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 175
        },
        {
          "file": "src/orchestrator/core/base_orchestrator.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 450
        },
        {
          "file": "src/orchestrator/core/base_orchestrator.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 459
        },
        {
          "file": "src/services/red_blue_agents/core/sandbox_orchestrator.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 595
        },
        {
          "file": "src/services/red_blue_agents/core/sandbox_orchestrator.py",
          "pattern": "cache.*redis",
          "line": 508
        },
        {
          "file": "src/services/red_blue_agents/core/sandbox_orchestrator.py",
          "pattern": "cache.*redis",
          "line": 517
        },
        {
          "file": "src/services/red_blue_agents/core/capability_registry.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 230
        },
        {
          "file": "src/services/red_blue_agents/core/capability_registry.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 442
        },
        {
          "file": "src/services/red_blue_agents/core/capability_registry.py",
          "pattern": "cache.*redis",
          "line": 230
        },
        {
          "file": "src/services/red_blue_agents/core/agent_scheduler.py",
          "pattern": "cache.*redis",
          "line": 248
        },
        {
          "file": "src/services/red_blue_agents/core/agent_scheduler.py",
          "pattern": "cache.*redis",
          "line": 257
        },
        {
          "file": "src/services/red_blue_agents/learning/autonomous_explorer.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 825
        },
        {
          "file": "src/services/red_blue_agents/learning/autonomous_explorer.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 866
        },
        {
          "file": "platform/bus/pubsub/nats_client.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 227
        },
        {
          "file": "platform/bus/pubsub/nats_client.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 251
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/cachecontrol/caches/__init__.py",
          "pattern": "cache.*redis",
          "line": 6
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/cachecontrol/caches/__init__.py",
          "pattern": "cache.*redis",
          "line": 8
        },
        {
          "file": "packages/common/config_manager.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 332
        },
        {
          "file": "tests/performance/benchmark_unified_services.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 191
        },
        {
          "file": "tests/performance/benchmark_unified_services.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 207
        },
        {
          "file": "tests/performance/benchmark_unified_services.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 170
        },
        {
          "file": "tests/performance/benchmark_unified_services.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 184
        },
        {
          "file": "tests/security/security_test_framework.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 433
        },
        {
          "file": "tests/unit/test_adaptive_rate_limiter.py",
          "pattern": "cache.*redis",
          "line": 558
        },
        {
          "file": "tests/unit/test_autonomous_response.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 76
        },
        {
          "file": "tests/integration/test_unified_auth_integration.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 135
        },
        {
          "file": "tests/integration/test_enhanced_platform_integration.py",
          "pattern": "cache.*redis",
          "line": 306
        },
        {
          "file": "wargame-enterprise/purple-orchestrator/purple_environment_generator.py",
          "pattern": "cache.*redis",
          "line": 137
        },
        {
          "file": "services/infrastructure/security/zero-trust-network.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 485
        },
        {
          "file": "services/infrastructure/security/incident-response-orchestrator.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 734
        },
        {
          "file": "services/xorb-core/orchestration/compliance_orchestrator.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 586
        },
        {
          "file": "services/xorb-core/intelligence/vulnerability_correlation_engine.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 206
        },
        {
          "file": "services/xorb-core/intelligence/vulnerability_correlation_engine.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 797
        },
        {
          "file": "services/xorb-core/api/app/container.py",
          "pattern": "cache.*redis",
          "line": 67
        },
        {
          "file": "services/xorb-core/api/app/main.py",
          "pattern": "cache.*redis",
          "line": 68
        },
        {
          "file": "services/xorb-core/api/middleware/rate_limiting.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 399
        },
        {
          "file": "services/xorb-core/api/middleware/rate_limiting.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 725
        },
        {
          "file": "services/xorb-core/api/middleware/rate_limiting.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 731
        },
        {
          "file": "services/xorb-core/api/app/jobs/service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 234
        },
        {
          "file": "services/xorb-core/api/app/jobs/queue.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 59
        },
        {
          "file": "services/xorb-core/api/app/jobs/queue.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 260
        },
        {
          "file": "services/xorb-core/api/app/jobs/worker.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 263
        },
        {
          "file": "services/xorb-core/api/app/storage/filesystem.py",
          "pattern": "cache.*redis",
          "line": 63
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/enterprise_performance.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 134
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/enterprise_performance.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 626
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/enterprise_performance.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 181
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/enterprise_performance.py",
          "pattern": "cache.*redis",
          "line": 241
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/enterprise_performance.py",
          "pattern": "cache.*redis",
          "line": 627
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/repositories.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 329
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/repositories.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 339
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/repositories.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 344
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/cache.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 19
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/cache.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 48
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/cache.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 55
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/cache.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 70
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 93
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/cache.py",
          "pattern": "cache.*redis",
          "line": 96
        },
        {
          "file": "services/xorb-core/api/app/routers/gamification.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 208
        },
        {
          "file": "services/xorb-core/api/app/routers/gamification.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 139
        },
        {
          "file": "services/xorb-core/api/app/routers/gamification.py",
          "pattern": "cache.*redis",
          "line": 208
        },
        {
          "file": "services/xorb-core/api/app/routers/enterprise_auth.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 53
        },
        {
          "file": "services/xorb-core/api/app/routers/enterprise_auth.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 58
        },
        {
          "file": "services/xorb-core/api/app/routers/health.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 136
        },
        {
          "file": "services/xorb-core/api/app/routers/health.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 137
        },
        {
          "file": "services/xorb-core/api/app/routers/health.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 138
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 222
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 269
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 373
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 476
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 561
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 238
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 298
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 382
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 387
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 425
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 502
        },
        {
          "file": "services/xorb-core/api/app/services/mfa_service.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 539
        },
        {
          "file": "services/xorb-core/api/app/services/consolidated_auth_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 547
        },
        {
          "file": "services/xorb-core/api/app/services/consolidated_auth_service.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 548
        },
        {
          "file": "services/xorb-core/api/app/services/consolidated_auth_service.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 572
        },
        {
          "file": "services/xorb-core/api/app/services/consolidated_auth_service.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 562
        },
        {
          "file": "services/xorb-core/api/app/services/consolidated_auth_service.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 565
        },
        {
          "file": "services/xorb-core/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 289
        },
        {
          "file": "services/xorb-core/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 313
        },
        {
          "file": "services/xorb-core/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 335
        },
        {
          "file": "services/xorb-core/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 354
        },
        {
          "file": "services/xorb-core/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 412
        },
        {
          "file": "services/xorb-core/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 417
        },
        {
          "file": "services/xorb-core/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 337
        },
        {
          "file": "services/xorb-core/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 342
        },
        {
          "file": "services/xorb-core/api/app/middleware/rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 330
        },
        {
          "file": "services/xorb-core/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 292
        },
        {
          "file": "services/xorb-core/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 298
        },
        {
          "file": "services/xorb-core/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 303
        },
        {
          "file": "services/xorb-core/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 318
        },
        {
          "file": "services/xorb-core/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 193
        },
        {
          "file": "services/xorb-core/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 214
        },
        {
          "file": "services/xorb-core/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 340
        },
        {
          "file": "services/xorb-core/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 351
        },
        {
          "file": "services/xorb-core/api/app/middleware/advanced_rate_limiter.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 356
        },
        {
          "file": "services/xorb-core/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 211
        },
        {
          "file": "services/xorb-core/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 240
        },
        {
          "file": "services/xorb-core/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 149
        },
        {
          "file": "services/xorb-core/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 155
        },
        {
          "file": "services/xorb-core/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 161
        },
        {
          "file": "services/xorb-core/api/app/middleware/audit_logging.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 268
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 44
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 78
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 93
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 146
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 227
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 259
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 29
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 59
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 109
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 129
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 217
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 242
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.delete\\s*\\(",
          "line": 289
        },
        {
          "file": "services/xorb-core/orchestrator/storage/redis_storage.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 276
        },
        {
          "file": "services/xorb-core/orchestrator/core/base_orchestrator.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 450
        },
        {
          "file": "services/xorb-core/orchestrator/core/base_orchestrator.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 459
        },
        {
          "file": "services/xorb-core/orchestrator/core/advanced_workflow_orchestrator.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 435
        },
        {
          "file": "services/xorb-core/orchestrator/core/advanced_workflow_orchestrator.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 530
        },
        {
          "file": "services/xorb-core/orchestrator/core/advanced_workflow_orchestrator.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 632
        },
        {
          "file": "services/xorb-core/orchestrator/core/advanced_workflow_orchestrator.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 466
        },
        {
          "file": "services/xorb-core/orchestrator/core/advanced_workflow_orchestrator.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 851
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "cache.*redis",
          "line": 38
        },
        {
          "file": "tools/scripts-archive/xorb_production_launch.py",
          "pattern": "cache.*redis",
          "line": 191
        },
        {
          "file": "tools/validation/validate_principal_auditor_implementation.py",
          "pattern": "cache.*redis",
          "line": 115
        },
        {
          "file": "tools/scripts/orchestration/enterprise_deployment_orchestrator.py",
          "pattern": "cache.*redis",
          "line": 1235
        },
        {
          "file": "tools/scripts/deployment/deploy_rl_enhanced_xorb_platform.py",
          "pattern": "cache.*redis",
          "line": 405
        },
        {
          "file": "tools/scripts/utilities/xorb_analytics_standalone.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 81
        },
        {
          "file": "tools/scripts/utilities/xorb_analytics_standalone.py",
          "pattern": "cache.*redis",
          "line": 81
        },
        {
          "file": "tools/scripts/utilities/ptaas_telemetry_pipeline.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 666
        },
        {
          "file": "tools/scripts/utilities/advanced_explainable_ai_module.py",
          "pattern": "cache.*redis",
          "line": 717
        },
        {
          "file": "tools/scripts/utilities/security_hardener.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 190
        },
        {
          "file": "tools/scripts/utilities/security_hardener.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 272
        },
        {
          "file": "tools/scripts/utilities/ptaas_adaptive_feedback.py",
          "pattern": "redis.*\\.expire\\s*\\(",
          "line": 580
        },
        {
          "file": "tools/scripts/utilities/ptaas_core_orchestrator.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 280
        },
        {
          "file": "tools/scripts/utilities/ptaas_core_orchestrator.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 357
        },
        {
          "file": "tools/scripts/utilities/ptaas_core_orchestrator.py",
          "pattern": "redis.*\\.set\\s*\\(",
          "line": 482
        },
        {
          "file": "tools/scripts/utilities/web_server_deployment.py",
          "pattern": "redis.*\\.get\\s*\\(",
          "line": 288
        },
        {
          "file": "tools/scripts/utilities/web_server_deployment.py",
          "pattern": "cache.*redis",
          "line": 288
        },
        {
          "file": "tools/scripts/utilities/web_server_deployment.py",
          "pattern": "cache.*redis",
          "line": 385
        }
      ],
      "compliance_status": "FAIL"
    },
    "adr_003": {
      "violations": [
        {
          "file": "simple_validation.py",
          "pattern": "print\\s*\\(.*key",
          "line": 195,
          "context": "replaced all stubs with production code\")\n        print(\"\\n\ud83c\udf1f Key Achievements:\")\n        print(f\"   \u2022 {total_lines",
          "severity": "HIGH"
        },
        {
          "file": "container_exploitation.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 231,
          "context": "f.read().strip()\n                \n                logger.info(\"\u2705 Found Kubernetes service account token\")\n                \n                # Get API serve",
          "severity": "HIGH"
        },
        {
          "file": "container_exploitation.py",
          "pattern": "logger.*info.*token",
          "line": 231,
          "context": "f.read().strip()\n                \n                logger.info(\"\u2705 Found Kubernetes service account token\")\n                \n                # Get API serv",
          "severity": "HIGH"
        },
        {
          "file": "nvidia_image_generator.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 131,
          "context": "elif response.status_code == 403:\n                logger.error(\"Forbidden - check your API key permissions\")\n            elif response.status_code == 429:",
          "severity": "HIGH"
        },
        {
          "file": "wargame/wargame_orchestrator.py",
          "pattern": "print\\s*\\(.*key",
          "line": 351,
          "context": "round_summary.get('lessons_learned'):\n            print(f\"\\nKey Lessons:\")\n            for lesson in round_summar",
          "severity": "HIGH"
        },
        {
          "file": "ptaas/forensics_engine.py",
          "pattern": "print\\s*\\(.*key",
          "line": 459,
          "context": "for key, value in verification.items():\n        print(f\"{key}: {value}\")\n    \n    # Get chain of custody\n    c",
          "severity": "HIGH"
        },
        {
          "file": "scripts/validate_migration.py",
          "pattern": "print\\s*\\(.*key",
          "line": 41,
          "context": "or key, value in details.items():\n                print(f\"    {key}: {value}\")\n    \n    def validate_file_structure(",
          "severity": "HIGH"
        },
        {
          "file": "infra/infrastructure_automation.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 630,
          "context": "nfig.port}\",\n                \"connection_string\": f\"postgresql://{config.username}:{config.password}@localhost:{config.port}/{config.database}\"\n            }\n            \n            return Tru",
          "severity": "HIGH"
        },
        {
          "file": "security/secret_scanner.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 231,
          "context": "canner()\n    scan_path = Path(args.path)\n    \n    print(f\"\ud83d\udd0d Scanning for secrets in: {scan_path}\")\n    \n    if scan_path.is_file(",
          "severity": "HIGH"
        },
        {
          "file": "src/orchestrator/unified_orchestrator.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 572,
          "context": "()\n        \n    except KeyboardInterrupt:\n        logger.info(\"Received keyboard interrupt\")\n    except Exception as e:\n        logger.error(",
          "severity": "HIGH"
        },
        {
          "file": "src/security/enhanced_security.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 379,
          "context": "it_card(str(value)):\n                        self.logger.warning(f\"PCI-DSS violation: Credit card number detected in field {key}\")\n                        return False",
          "severity": "HIGH"
        },
        {
          "file": "src/security/enhanced_security.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 395,
          "context": "ins_phi(str(value)):\n                        self.logger.warning(f\"HIPAA violation: PHI detected in field {key}\")\n                        return False",
          "severity": "HIGH"
        },
        {
          "file": "src/security/enhanced_security.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 411,
          "context": "ve_data(str(value)):\n                        self.logger.warning(f\"ISO 27001 violation: Sensitive data detected in field {key}\")\n                        return False",
          "severity": "HIGH"
        },
        {
          "file": "src/common/tls_server.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 109,
          "context": "not Path(self.key_file).exists():\n                logger.error(f\"Private key file not found: {self.key_file}\")\n                return False",
          "severity": "HIGH"
        },
        {
          "file": "src/common/tls_server.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 274,
          "context": "if not cert_file or not key_file:\n        logger.warning(\"TLS certificate/key not configured via environment variables\")\n        return None\n        \n    ca_file = os.ge",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 39,
          "context": "if not self.vault_token:\n            logger.warning(\"\u26a0\ufe0f VAULT_TOKEN not provided, using fallback mode\")\n            self.fallback_mode = True",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 67,
          "context": "ey)\n                if value:\n                    logger.info(f\"\u2705 Retrieved secret {key} from Vault\")\n                    return value\n            exc",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 78,
          "context": "value = f.read().strip()\n                logger.info(f\"\u2705 Retrieved secret {key} from file\")\n                return value\n            except",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 89,
          "context": "value = f.read().strip()\n                logger.info(f\"\u2705 Retrieved secret {key} from env file\")\n                return value\n            except",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 97,
          "context": "nv(key.upper())\n        if env_value:\n            logger.warning(f\"\u26a0\ufe0f Using environment variable for {key} (SECURITY RISK)\")\n            return env_value\n        \n        lo",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 100,
          "context": ")\")\n            return env_value\n        \n        logger.error(f\"\u274c Secret {key} not found in any source\")\n        return None\n    \n    def validate_secret",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 110,
          "context": "uirements\n        if len(value) < 16:\n            logger.error(f\"Secret {key} too short (minimum 16 characters)\")\n            return False\n        \n        # Spec",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 126,
          "context": "ower() for pattern in weak_patterns):\n            logger.error(f\"Secret {key} contains weak pattern\")\n            return False\n        \n        return",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 134,
          "context": "secret = secrets.token_urlsafe(length)\n        logger.info(f\"Generated secure secret for {key}\")\n        return secret\n    \n    def health_check(",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 67,
          "context": "ey)\n                if value:\n                    logger.info(f\"\u2705 Retrieved secret {key} from Vault\")\n                    return value\n            exc",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 70,
          "context": "except Exception as e:\n                logger.warning(f\"\u26a0\ufe0f Vault secret retrieval failed: {e}\")\n        \n        # 2. Try file-based secrets (Do",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 78,
          "context": "value = f.read().strip()\n                logger.info(f\"\u2705 Retrieved secret {key} from file\")\n                return value\n            except",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 81,
          "context": "except Exception as e:\n                logger.error(f\"\u274c File secret retrieval failed: {e}\")\n        \n        # 3. Try environment file",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 89,
          "context": "value = f.read().strip()\n                logger.info(f\"\u2705 Retrieved secret {key} from env file\")\n                return value\n            except",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 92,
          "context": "except Exception as e:\n                logger.error(f\"\u274c Env file secret retrieval failed: {e}\")\n        \n        # 4. Final fallback to environm",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 100,
          "context": ")\")\n            return env_value\n        \n        logger.error(f\"\u274c Secret {key} not found in any source\")\n        return None\n    \n    def validate_secret",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 110,
          "context": "uirements\n        if len(value) < 16:\n            logger.error(f\"Secret {key} too short (minimum 16 characters)\")\n            return False\n        \n        # Spec",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 116,
          "context": ":\n            if len(value) < 32:\n                logger.error(\"JWT secret must be at least 32 characters\")\n                return False\n        \n        #",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 126,
          "context": "ower() for pattern in weak_patterns):\n            logger.error(f\"Secret {key} contains weak pattern\")\n            return False\n        \n        return",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client_enhanced.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 134,
          "context": "secret = secrets.token_urlsafe(length)\n        logger.info(f\"Generated secure secret for {key}\")\n        return secret\n    \n    def health_check(",
          "severity": "HIGH"
        },
        {
          "file": "src/common/encryption.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 153,
          "context": "_hash)\n        except Exception as e:\n            logger.error(f\"Password verification failed: {e}\")\n            return False\n\n\nclass CertificateMana",
          "severity": "HIGH"
        },
        {
          "file": "src/common/encryption.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 40,
          "context": "ode(secrets.token_bytes(32)).decode()\n            logger.warning(\"Generated new master key for development use\")\n        return key\n        \n    def _create_fern",
          "severity": "HIGH"
        },
        {
          "file": "src/common/encryption.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 233,
          "context": "r.info(f\"Certificate saved: {cert_path}\")\n        logger.info(f\"Private key saved: {key_path}\")\n        \n    def get_tls_config(self) -> Dict[st",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*key",
          "line": 69,
          "context": "for key in secrets[\"keys\"]:\n                    print(f\"   - {key}\")\n            else:\n                print(\"   No",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*key",
          "line": 101,
          "context": "lf):\n        \"\"\"Rotate JWT signing key\"\"\"\n        print(\"\ud83d\udd04 Rotating JWT signing key...\")\n        success = await self.vault_client.ro",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*key",
          "line": 104,
          "context": ".rotate_jwt_key()\n        if success:\n            print(\"\u2705 JWT key rotation completed\")\n        else:\n            pr",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*key",
          "line": 106,
          "context": "ey rotation completed\")\n        else:\n            print(\"\u274c JWT key rotation failed\")\n    \n    async def backup_secre",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*key",
          "line": 141,
          "context": "print(f\"   JWT Secret: {'*' * 8}\")\n            print(f\"   API Key: {'*' * 8}\")\n            print(\"   \u2705 Convenience",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 65,
          "context": "self.vault_client.list_secrets(path)\n            print(f\"\ud83d\udccb Secrets at '{path or 'root'}':\")",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 71,
          "context": "(f\"   - {key}\")\n            else:\n                print(\"   No secrets found\")\n                \n        except Exceptio",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 74,
          "context": "except Exception as e:\n            print(f\"\u274c Failed to list secrets: {e}\")\n    \n    async def get_secret(self, path:",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 81,
          "context": "get_secret_version(path, version)\n                print(f\"\ud83d\udd11 Secret '{path}' (version {version}):\")\n            else:",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 84,
          "context": "elf.vault_client.get_secret(path)\n                print(f\"\ud83d\udd11 Secret '{path}':\")\n            \n            # Mask sensi",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 97,
          "context": "except Exception as e:\n            print(f\"\u274c Failed to get secret: {e}\")\n    \n    async def rotate_jwt_key(self):",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 110,
          "context": "tr):\n        \"\"\"Backup secrets to file\"\"\"\n        print(f\"\ud83d\udcbe Backing up secrets to {output_file}...\")\n        success = await se",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 113,
          "context": "rets(output_file)\n        if success:\n            print(\"\u2705 Secrets backup completed\")\n        else:\n            pri",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 115,
          "context": "rets backup completed\")\n        else:\n            print(\"\u274c Secrets backup failed\")\n    \n    async def test_integrat",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 126,
          "context": "# Test secret retrieval\n        print(\"\\n2. Configuration Secrets:\")\n        await self.get_secret(\"xorb/config\")",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 129,
          "context": "t self.get_secret(\"xorb/config\")\n        \n        print(\"\\n3. External API Secrets:\")\n        await self.get_secret(\"xorb/external\"",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 140,
          "context": "await get_xorb_api_key()\n            \n            print(f\"   JWT Secret: {'*' * 8}\")\n            print(f\"   API Key: {'*'",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 149,
          "context": "opment secrets (requires write access)\"\"\"\n        print(\"\ud83d\udd27 Setting up development secrets...\")\n        \n        try:\n            # This wo",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 153,
          "context": "ld require write permissions to Vault\n            print(\"\u26a0\ufe0f  Development secret setup requires Vault write permissions\")",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 157,
          "context": "except Exception as e:\n            print(f\"\u274c Failed to setup development secrets: {e}\")\n\n\nasync def main():\n    \"\"\"Main CLI inter",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 186,
          "context": "t\":\n            if not args.path:\n                print(\"\u274c --path required for get-secret\")\n                sys.exit(1)\n            await m",
          "severity": "HIGH"
        },
        {
          "file": "src/common/secret_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 47,
          "context": "et\n            return secret\n            \n        logger.warning(f\"Secret '{key}' not found in any backend\")\n        return default\n        \n    def get_data",
          "severity": "HIGH"
        },
        {
          "file": "src/common/secret_manager.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 47,
          "context": "et\n            return secret\n            \n        logger.warning(f\"Secret '{key}' not found in any backend\")\n        return default\n        \n    def get_data",
          "severity": "HIGH"
        },
        {
          "file": "src/common/secret_manager.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 77,
          "context": "secret = secrets.token_urlsafe(64)\n            logger.warning(\"Using temporary JWT secret for development\")\n        return secret\n        \n    def get_api_k",
          "severity": "HIGH"
        },
        {
          "file": "src/common/secret_manager.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 63,
          "context": "ecret store\")\n                \n            return f\"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}\"\n        else:\n            # Development fallback",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_integration.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 290,
          "context": "timedelta(seconds=lease_duration)\n                logger.info(\"Successfully renewed Vault token\")\n            else:\n                # Token renewa",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_integration.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 262,
          "context": "if response.status in [200, 204]:\n                logger.info(\"Successfully rotated key\", key_name=key_name)\n                return True",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_integration.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 208,
          "context": "if response.status in [200, 204]:\n                logger.info(\"Successfully stored secret\", path=secret_path)\n                return True",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_integration.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 359,
          "context": "except VaultError as e:\n            logger.warning(\"Failed to get secret from Vault\", error=str(e), path=secret_path)",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_integration.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 381,
          "context": "ache\"\"\"\n        self.secret_cache.clear()\n        logger.info(\"Secret cache cleared\")\n\n\n# Global instances\n_vault_client: Optional[Vau",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_integration.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 445,
          "context": "v, \"\")\n        except Exception as e:\n            logger.error(\"Failed to load secret\", secret=env_key, error=str(e))\n            secret",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_integration.py",
          "pattern": "logger.*info.*token",
          "line": 290,
          "context": "timedelta(seconds=lease_duration)\n                logger.info(\"Successfully renewed Vault token\")\n            else:\n                # Token renew",
          "severity": "HIGH"
        },
        {
          "file": "src/common/config_manager.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 343,
          "context": "except Exception as e:\n            self.logger.error(f\"Failed to load secrets: {e}\")\n        \n        return config\n    \n    def _app",
          "severity": "HIGH"
        },
        {
          "file": "src/common/config_manager.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 59,
          "context": "\"\"\"Get database connection URL\"\"\"\n        return f\"postgresql://{self.username}:{self.password}@{self.host}:{self.port}/{self.name}?sslmode={self.ssl_mode}\"\n\n\n@dataclass\nclass RedisConfig:\n    \"\"\"Redis conf",
          "severity": "HIGH"
        },
        {
          "file": "src/common/config_manager.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 74,
          "context": "\"rediss\" if self.ssl else \"redis\"\n        auth = f\":{self.password}@\" if self.password else \"\"\n        return f\"{protocol}://{auth}{self.host}:{",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client.py",
          "pattern": "print\\s*\\(.*token",
          "line": 80,
          "context": "ult token authentication failed\")\n                print(f\"Vault client initialized with token: {self.vault_url}\")\n            else:",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client.py",
          "pattern": "print\\s*\\(.*key",
          "line": 317,
          "context": "it.rotate_key(name=\"jwt-signing\")\n                print(\"\u2705 JWT signing key rotated successfully\")\n                return Tru",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client.py",
          "pattern": "print\\s*\\(.*key",
          "line": 320,
          "context": "return True\n            else:\n                print(\"\u26a0\ufe0f  Vault not available, skipping key rotation\")\n                return False",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client.py",
          "pattern": "print\\s*\\(.*key",
          "line": 324,
          "context": "except Exception as e:\n            print(f\"\u274c JWT key rotation failed: {e}\")\n            return False",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 143,
          "context": "except Exception as e:\n            print(f\"Failed to get secret {path}: {e}\")\n            # Return environment fa",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 340,
          "context": "except Exception as e:\n            print(f\"Failed to get secret version {path}@{version}: {e}\")\n            retur",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 353,
          "context": "except Exception as e:\n            print(f\"Failed to list secrets: {e}\")\n            return {\"keys\": []}\n\n    asyn",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 359,
          "context": "NT\", \"development\") != \"development\":\n            print(\"\u274c Secret backup only allowed in development environment\")",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 385,
          "context": "ackup_data, f, indent=2)\n            \n            print(f\"\u2705 Secrets backed up to {output_file}\")\n            return",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 389,
          "context": "except Exception as e:\n            print(f\"\u274c Secret backup failed: {e}\")\n            return False\n\n\n#",
          "severity": "HIGH"
        },
        {
          "file": "src/common/vault_client.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 40,
          "context": "nv(\"POSTGRES_DATABASE\", \"xorb_db\")\n        return f\"postgresql://{self.username}:{self.password}@{host}:{port}/{database}\"\n    \n    @property\n    def is_expired(self) -> bo",
          "severity": "HIGH"
        },
        {
          "file": "src/common/tls_client.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 80,
          "context": "lf.cert_file}\")\n            else:\n                logger.warning(f\"Client cert/key files not found: {self.cert_file}, {self.key_file}\")\n                \n        return context\n\n\nclass",
          "severity": "HIGH"
        },
        {
          "file": "src/common/centralized_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 311,
          "context": "e\", {}).update(db_creds)\n            \n            logger.info(\"Loaded secrets from Vault\")\n            return vault_config",
          "severity": "HIGH"
        },
        {
          "file": "src/common/centralized_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 315,
          "context": "except Exception as e:\n            logger.warning(f\"Failed to load secrets from Vault: {e}\")\n            return {}\n    \n    def _parse_databa",
          "severity": "HIGH"
        },
        {
          "file": "src/common/centralized_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 377,
          "context": "\"\"\"\n        if not self.vault_client:\n            logger.warning(\"No Vault client configured, cannot refresh secrets\")\n            return\n        \n        try:",
          "severity": "HIGH"
        },
        {
          "file": "src/common/centralized_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 391,
          "context": "ig_cache = merged_config\n            \n            logger.info(\"Configuration secrets refreshed from Vault\")\n            \n        except Exception as e:",
          "severity": "HIGH"
        },
        {
          "file": "src/common/centralized_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 394,
          "context": "except Exception as e:\n            logger.error(f\"Failed to refresh secrets: {e}\")\n    \n    def validate_configuration(self) -> Lis",
          "severity": "HIGH"
        },
        {
          "file": "src/common/centralized_config.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 61,
          "context": "tr:\n        \"\"\"Get database URL\"\"\"\n        return f\"postgresql://{self.username}:{self.password}@{self.host}:{self.port}/{self.name}\"\n\nclass RedisConfig(BaseModel):\n    \"\"\"Redis confi",
          "severity": "HIGH"
        },
        {
          "file": "src/common/centralized_config.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 74,
          "context": "> str:\n        \"\"\"Get Redis URL\"\"\"\n        auth = f\":{self.password}@\" if self.password else \"\"\n        return f\"redis://{auth}{self.host}:{self.",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/container.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 638,
          "context": "except Exception as e:\n            logger.error(f\"Failed to get async service {service_key}: {e}\")\n            return None\n    \n    def get_advance",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/enhanced_container.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 231,
          "context": "n\"\"\"\n        self._config.update(updates)\n        logger.info(f\"Configuration updated with {len(updates)} keys\")\n    \n    async def shutdown(self):\n        \"\"\"Sh",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/enhanced_container.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 97,
          "context": "dev-secret-key-change-in-production':\n            logger.warning(\"Using default JWT secret - change in production!\")\n        \n        self._service_factory = await g",
          "severity": "HIGH"
        },
        {
          "file": "src/api/middleware/rate_limiting.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 419,
          "context": "state\n        except Exception as e:\n            logger.error(f\"Failed to get rate limit state for {key}: {e}\")\n            \n        # Return new state",
          "severity": "HIGH"
        },
        {
          "file": "src/api/middleware/rate_limiting.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 456,
          "context": ")\n        except Exception as e:\n            logger.error(f\"Failed to save rate limit state for {state.key}: {e}\")\n            \n    async def _apply_token_bucket(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 154,
          "context": "script_load(self.TOKEN_BUCKET_SCRIPT)\n            logger.info(\"Token bucket Lua script loaded\")\n        except Exception as e:\n            logge",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 156,
          "context": "aded\")\n        except Exception as e:\n            logger.error(f\"Failed to load token bucket script: {e}\")\n            raise\n    \n    async def check_rate_",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 236,
          "context": "except Exception as e:\n            logger.error(f\"Token bucket rate limit check failed: {e}\")\n            # Fail open in case of Redis issues",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 600,
          "context": "if not circuit_allowed:\n            logger.warning(f\"Circuit breaker blocked request: {key}\")\n            return [\n                RateLimitRe",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 691,
          "context": "[key] = (new_score, current_time)\n                logger.debug(f\"Reputation decreased: {key} -> {new_score}\")\n            else:\n                # Slowly impro",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 717,
          "context": "del self._reputation_cache[key]\n            logger.info(f\"Reputation reset for key: {key}\")\n        except Exception as e:\n            logge",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/rate_limit/limiter.py",
          "pattern": "logger.*info.*token",
          "line": 154,
          "context": "script_load(self.TOKEN_BUCKET_SCRIPT)\n            logger.info(\"Token bucket Lua script loaded\")\n        except Excepti",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/integrations/base_connector.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 329,
          "context": "specific connectors should override this\n        logger.warning(f\"OAuth2 token refresh not implemented for {self.endpoint.name}\")\n        return False\n    \n    def _create_ssl_co",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/integrations/base_connector.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 300,
          "context": "64\n                auth_string = base64.b64encode(f\"{username}:{password}\".encode()).decode()\n                headers[\"Autho",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/integrations/enterprise_connector.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 499,
          "context": "d:\n                auth_string = base64.b64encode(f\"{username}:{password}\".encode()).decode()\n                headers[\"Autho",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/integrations/enterprise_connectors.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 414,
          "context": "elf.credentials.credentials\n        auth_string = f\"{credentials['username']}:{credentials['password']}\"\n        auth_bytes = auth_string.encode('ascii')",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/integrations/identity_connector.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 429,
          "context": "t_id, client_secret, refresh_token]):\n            logger.error(\"Missing required credentials for token refresh\")\n            return False\n        \n        token_",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/jobs/queue.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 63,
          "context": ")\n            if existing_job_id:\n                logger.info(f\"Job with idempotency key {job_def.idempotency_key} already exists\")\n                # Return existing job execution",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/storage/s3.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 243,
          "context": "d_at = datetime.utcnow()\n            \n            logger.info(f\"Uploaded file to S3: {object_key}\")\n            return metadata",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/storage/s3.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 247,
          "context": "except Exception as e:\n            logger.error(f\"Failed to upload file to S3 {object_key}: {e}\")\n            metadata.status = FileStatus.ERROR",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 635,
          "context": "t(key)\n        except Exception as e:\n            logger.error(f\"Cache get error for key {key}: {e}\")\n            return self._cache.get(key)",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 655,
          "context": "n True\n        except Exception as e:\n            logger.error(f\"Cache set error for key {key}: {e}\")\n            self._cache[key] = value",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 673,
          "context": "eleted\n        except Exception as e:\n            logger.error(f\"Cache delete error for key {key}: {e}\")\n            deleted = self._cache.pop(key, None)",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 693,
          "context": "_cache\n        except Exception as e:\n            logger.error(f\"Cache exists error for key {key}: {e}\")\n            return key in self._cache",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 707,
          "context": "_value\n        except Exception as e:\n            logger.error(f\"Cache increment error for key {key}: {e}\")\n            current = self._cache.get(key, 0)",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 730,
          "context": "n True\n        except Exception as e:\n            logger.error(f\"Cache hset error for key {key}, field {field}: {e}\")\n            if key not in self._cache:",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 751,
          "context": "field)\n        except Exception as e:\n            logger.error(f\"Cache hget error for key {key}, field {field}: {e}\")\n            hash_data = self._cache.get(key, {})",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 770,
          "context": "y, {})\n        except Exception as e:\n            logger.error(f\"Cache hgetall error for key {key}: {e}\")\n            return self._cache.get(key, {})",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 786,
          "context": "False\n        except Exception as e:\n            logger.error(f\"Cache hdel error for key {key}, field {field}: {e}\")\n            hash_data = self._cache.get(key, {})",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 805,
          "context": "False\n        except Exception as e:\n            logger.error(f\"Cache expire error for key {key}: {e}\")\n            if key in self._cache:",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/enhanced_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 821,
          "context": "tern)]\n        except Exception as e:\n            logger.error(f\"Cache keys pattern error for pattern {pattern}: {e}\")\n            import fnmatch\n            return [k",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 502,
          "context": "await self.session.rollback()\n            logger.error(f\"Error saving auth token: {e}\")\n            raise\n    \n    async def get_by_toke",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 517,
          "context": "except Exception as e:\n            logger.error(f\"Error getting auth token: {e}\")\n            return None\n    \n    async def get_b",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 532,
          "context": "except Exception as e:\n            logger.error(f\"Error getting auth token by hash: {e}\")\n            return None\n    \n    async def revok",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 551,
          "context": "await self.session.rollback()\n            logger.error(f\"Error revoking token: {e}\")\n            return False\n    \n    async def revo",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 575,
          "context": "await self.session.rollback()\n            logger.error(f\"Error revoking user tokens for {user_id}: {e}\")\n            return 0\n    \n    async def cleanup_",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 592,
          "context": "await self.session.rollback()\n            logger.error(f\"Error cleaning up expired tokens: {e}\")\n            return 0\n    \n    def _model_to_enti",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 944,
          "context": "ept Exception as redis_error:\n                    logger.warning(f\"Redis get failed for key {key}: {redis_error}\")\n            \n            # Fallback to memory ca",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 958,
          "context": "except Exception as e:\n            logger.error(f\"Cache get error for key {key}: {e}\")\n            return None\n    \n    async def set(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 972,
          "context": "ept Exception as redis_error:\n                    logger.warning(f\"Redis set failed for key {key}: {redis_error}\")\n            \n            # Fallback to memory ca",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 983,
          "context": "except Exception as e:\n            logger.error(f\"Cache set error for key {key}: {e}\")\n            return False\n    \n    async def dele",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 996,
          "context": "ept Exception as redis_error:\n                    logger.warning(f\"Redis delete failed for key {key}: {redis_error}\")\n            \n            # Also delete from memo",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1006,
          "context": "except Exception as e:\n            logger.error(f\"Cache delete error for key {key}: {e}\")\n            return False\n    \n    async def exis",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1016,
          "context": "ept Exception as redis_error:\n                    logger.warning(f\"Redis exists failed for key {key}: {redis_error}\")\n            \n            # Check memory cache",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1029,
          "context": "except Exception as e:\n            logger.error(f\"Cache exists error for key {key}: {e}\")\n            return False\n    \n    async def incr",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1039,
          "context": "ept Exception as redis_error:\n                    logger.warning(f\"Redis increment failed for key {key}: {redis_error}\")\n            \n            # Fallback to memory ca",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1054,
          "context": "except Exception as e:\n            logger.error(f\"Cache increment error for key {key}: {e}\")\n            return amount\n    \n    async def dec",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repository_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 348,
          "context": "except Exception as e:\n            logger.warning(f\"Cache get error for key {key}: {e}\")\n            return self._fallback_cache.get(key)",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repository_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 369,
          "context": "except Exception as e:\n            logger.warning(f\"Cache set error for key {key}: {e}\")\n            self._fallback_cache[key] = value",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repository_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 383,
          "context": "except Exception as e:\n            logger.warning(f\"Cache delete error for key {key}: {e}\")\n            self._fallback_cache.pop(key, None)",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repository_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 396,
          "context": "except Exception as e:\n            logger.warning(f\"Cache exists error for key {key}: {e}\")\n            return key in self._fallback_cache",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repository_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 411,
          "context": "except Exception as e:\n            logger.warning(f\"Cache expire error for key {key}: {e}\")\n            return False\n    \n    async def sadd",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repository_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 429,
          "context": "except Exception as e:\n            logger.warning(f\"Cache sadd error for key {key}: {e}\")\n            return 0\n    \n    async def smembers",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repository_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 443,
          "context": "except Exception as e:\n            logger.warning(f\"Cache smembers error for key {key}: {e}\")\n            return []\n    \n    async def _expire",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 590,
          "context": "except Exception as e:\n                logger.error(f\"Error saving token: {e}\")\n                raise\n    \n    async def get_by_",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 620,
          "context": "except Exception as e:\n                logger.error(f\"Error getting token: {e}\")\n                return None\n    \n    async def r",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 637,
          "context": "except Exception as e:\n                logger.error(f\"Error revoking token: {e}\")\n                return False\n    \n    async def",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 659,
          "context": "except Exception as e:\n                logger.error(f\"Error revoking user tokens for {user_id}: {e}\")\n                return 0\n    \n    async def clea",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_database_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 677,
          "context": "except Exception as e:\n                logger.error(f\"Error cleaning up tokens: {e}\")\n                return 0\n\n\nclass ProductionTenan",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 577,
          "context": "n None\n        except Exception as e:\n            logger.error(f\"Cache GET failed for key {key}: {e}\")\n            return None\n    \n    async def set(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 588,
          "context": "False\n        except Exception as e:\n            logger.error(f\"Cache SET failed for key {key}: {e}\")\n            return False\n    \n    async def dele",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 600,
          "context": "False\n        except Exception as e:\n            logger.error(f\"Cache DELETE failed for key {key}: {e}\")\n            return False\n    \n    async def exis",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 611,
          "context": "False\n        except Exception as e:\n            logger.error(f\"Cache EXISTS failed for key {key}: {e}\")\n            return False\n    \n    async def incr",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 622,
          "context": "turn 0\n        except Exception as e:\n            logger.error(f\"Cache INCREMENT failed for key {key}: {e}\")\n            return 0\n    \n    async def decremen",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 633,
          "context": "turn 0\n        except Exception as e:\n            logger.error(f\"Cache DECREMENT failed for key {key}: {e}\")\n            return 0\n    \n    async def set_json",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 642,
          "context": ", ttl)\n        except Exception as e:\n            logger.error(f\"Cache SET_JSON failed for key {key}: {e}\")\n            return False\n    \n    async def get_",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_repositories.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 653,
          "context": "n None\n        except Exception as e:\n            logger.error(f\"Cache GET_JSON failed for key {key}: {e}\")\n            return None\n    \n    async def close",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/production_observability.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1047,
          "context": "issue_data.get(\"key\", \"Unknown\")\n                logger.info(f\"Created JIRA incident {issue_key} for alert {alert.name}\")\n            else:\n                logger.error(f",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 130,
          "context": "t(key)\n        except Exception as e:\n            logger.error(f\"Redis GET error for key {key}: {e}\")\n            return None\n    \n    async def set(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 142,
          "context": "n True\n        except Exception as e:\n            logger.error(f\"Redis SET error for key {key}: {e}\")\n            return False\n    \n    async def dele",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 154,
          "context": "lt > 0\n        except Exception as e:\n            logger.error(f\"Redis DELETE error for key {key}: {e}\")\n            return False\n    \n    async def exis",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 166,
          "context": "lt > 0\n        except Exception as e:\n            logger.error(f\"Redis EXISTS error for key {key}: {e}\")\n            return False\n    \n    async def incr",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 177,
          "context": "mount)\n        except Exception as e:\n            logger.error(f\"Redis INCR error for key {key}: {e}\")\n            return None\n    \n    async def expir",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 188,
          "context": "time)\n        except Exception as e:\n            logger.error(f\"Redis EXPIRE error for key {key}: {e}\")\n            return False\n    \n    # Advanced Red",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 200,
          "context": "pping)\n        except Exception as e:\n            logger.error(f\"Redis ZADD error for key {key}: {e}\")\n            return 0\n    \n    async def zremrang",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 211,
          "context": "score)\n        except Exception as e:\n            logger.error(f\"Redis ZREMRANGEBYSCORE error for key {key}: {e}\")\n            return 0\n    \n    async def zcard(se",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 222,
          "context": "d(key)\n        except Exception as e:\n            logger.error(f\"Redis ZCARD error for key {key}: {e}\")\n            return 0\n    \n    async def zcount(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 233,
          "context": "score)\n        except Exception as e:\n            logger.error(f\"Redis ZCOUNT error for key {key}: {e}\")\n            return 0\n    \n    async def pipeline",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 340,
          "context": "value, ex=ttl)\n    except Exception as e:\n        logger.error(f\"Failed to cache value for key {key}: {e}\")\n    \n    return value\n\n\nasync def rate_limit_che",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 401,
          "context": "}\n        \n    except Exception as e:\n        logger.error(f\"Rate limit check error for key {key}: {e}\")\n        # Fail open\n        return {",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_compatibility.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 121,
          "context": "n data\n        except Exception as e:\n            logger.error(f\"Redis GET failed for key {key}: {e}\")\n            return None\n    \n    async def set(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_compatibility.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 145,
          "context": "n True\n        except Exception as e:\n            logger.error(f\"Redis SET failed for key {key}: {e}\")\n            return False\n    \n    async def dele",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_compatibility.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 162,
          "context": "turn 0\n        except Exception as e:\n            logger.error(f\"Redis DELETE failed for key {key}: {e}\")\n            return 0\n    \n    async def exists(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_compatibility.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 174,
          "context": "_store\n        except Exception as e:\n            logger.error(f\"Redis EXISTS failed for key {key}: {e}\")\n            return False\n    \n    async def incr",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_compatibility.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 188,
          "context": "urrent\n        except Exception as e:\n            logger.error(f\"Redis INCR failed for key {key}: {e}\")\n            return 0\n    \n    async def incrby(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_compatibility.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 202,
          "context": "urrent\n        except Exception as e:\n            logger.error(f\"Redis INCRBY failed for key {key}: {e}\")\n            return 0\n    \n    async def expire(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_compatibility.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 214,
          "context": "n True\n        except Exception as e:\n            logger.error(f\"Redis EXPIRE failed for key {key}: {e}\")\n            return False\n    \n    async def hget",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_compatibility.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 231,
          "context": "n None\n        except Exception as e:\n            logger.error(f\"Redis HGET failed for key {key}, field {field}: {e}\")\n            return None\n    \n    async def hset(",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_compatibility.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 247,
          "context": "n True\n        except Exception as e:\n            logger.error(f\"Redis HSET failed for key {key}, field {field}: {e}\")\n            return False\n    \n    async def _cle",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/redis_compatibility.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 265,
          "context": "if expired_keys:\n                logger.debug(f\"Cleaned up {len(expired_keys)} expired keys from memory store\")\n                \n        except Exception as e:",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 184,
          "context": "except Exception as e:\n                    logger.error(f\"Cache deserialization error for {full_key}: {e}\")\n                    await self.redis_client.dele",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 191,
          "context": "except Exception as e:\n            logger.error(f\"Cache get error for {full_key}: {e}\")\n            self.metrics.errors += 1",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 231,
          "context": "except Exception as e:\n            logger.error(f\"Cache set error for {full_key}: {e}\")\n            self.metrics.errors += 1",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 254,
          "context": "except Exception as e:\n            logger.error(f\"Cache delete error for {full_key}: {e}\")\n            self.metrics.errors += 1",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 275,
          "context": "except Exception as e:\n            logger.error(f\"Cache exists error for {full_key}: {e}\")\n            return False\n    \n    async def get_",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/cache.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 315,
          "context": "xcept Exception as e:\n                            logger.error(f\"Deserialization error for {full_key}: {e}\")\n                            self.metrics.errors",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/routers/auth.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 137,
          "context": "# Log unauthorized access attempt\n        logger.warning(\"Unauthorized dev token access attempt\",\n                      environment=os.getenv(\"ENV",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/routers/auth.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 166,
          "context": "v_user_data)\n        \n        # Audit log\n        logger.info(\"Development token created\",\n                   username=username,",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/routers/auth.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 175,
          "context": ":\n        error_id = secrets.token_hex(8)\n        logger.error(\"Dev token creation failed\",\n                    username=username,",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/routers/auth.py",
          "pattern": "logger.*info.*token",
          "line": 166,
          "context": "v_user_data)\n        \n        # Audit log\n        logger.info(\"Development token created\",\n                   username=username,",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/routers/advanced_ai_security_platform.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 327,
          "context": "}\n        \n    except Exception as e:\n        logger.error(f\"Key exchange failed: {e}\")\n        raise HTTPException(status_code=500, det",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 263,
          "context": "ashed)\n        except Exception as e:\n            logger.error(\"Password verification failed\", error=str(e))\n            return False",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 360,
          "context": "jwt_algorithm\n        )\n        \n        security_logger.info(\"Access token created\", user_id=subject)\n        return token\n    \n    d",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 382,
          "context": "jwt_algorithm\n        )\n        \n        security_logger.info(\"Refresh token created\", user_id=subject)\n        return token\n    \n    d",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 390,
          "context": "is_token_revoked(token):\n                security_logger.warning(\"Token is revoked\")\n                return None",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 400,
          "context": "t(\"type\") != token_type:\n                security_logger.warning(\"Invalid token type\", expected=token_type, actual=payload.get(\"type\"))\n                return None",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 406,
          "context": "t jwt.ExpiredSignatureError:\n            security_logger.warning(\"Token expired\")\n            return None\n        except jwt.Inval",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 409,
          "context": "jwt.InvalidTokenError as e:\n            security_logger.warning(\"Invalid token\", error=str(e))\n            return None\n    \n    d",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 432,
          "context": "if not jti:\n                security_logger.warning(\"Token revocation failed: no JTI found\")\n                return False",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 446,
          "context": "tokens.add(jti)\n            \n            security_logger.info(\"Token revoked successfully\", jti=jti)\n            return True",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 450,
          "context": "except Exception as e:\n            security_logger.error(\"Token revocation failed\", error=str(e))\n            return False",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 482,
          "context": "t.delete(*keys)\n            \n            security_logger.info(\"All user tokens revoked\", user_id=user_id)\n            return True",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 486,
          "context": "except Exception as e:\n            security_logger.error(\"Failed to revoke user tokens\", user_id=user_id, error=str(e))\n            retur",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 109,
          "context": "ig.min_password_length:\n            errors.append(f\"Password must be at least {self.config.min_password_length} characters long\")\n        \n        # Character requirements",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "logger.*info.*token",
          "line": 360,
          "context": "jwt_algorithm\n        )\n        \n        security_logger.info(\"Access token created\", user_id=subject)\n        return token",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "logger.*info.*token",
          "line": 382,
          "context": "jwt_algorithm\n        )\n        \n        security_logger.info(\"Refresh token created\", user_id=subject)\n        return token",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "logger.*info.*token",
          "line": 446,
          "context": "tokens.add(jti)\n            \n            security_logger.info(\"Token revoked successfully\", jti=jti)\n            retur",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/security.py",
          "pattern": "logger.*info.*token",
          "line": 482,
          "context": "t.delete(*keys)\n            \n            security_logger.info(\"All user tokens revoked\", user_id=user_id)\n            return Tr",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/production_config.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 233,
          "context": "ret_key\"] = secrets.token_urlsafe(64)\n            logger.warning(\"Generated random secret key - store securely for production\")\n        \n        return secrets\n    \n    def _va",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/production_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 228,
          "context": "except Exception as e:\n                    logger.warning(f\"Failed to load secret {secret_name}: {e}\")\n        \n        # Generate missing secrets",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/production_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 233,
          "context": "ret_key\"] = secrets.token_urlsafe(64)\n            logger.warning(\"Generated random secret key - store securely for production\")\n        \n        return secrets\n    \n    def _va",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 286,
          "context": "s[\"tokens_issued\"] += 1\n        \n        security_logger.info(\"Access token created\", \n                           subject=subject,",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 328,
          "context": "nager.key_id}\n        )\n        \n        security_logger.info(\"Refresh token created\", \n                           subject=subject,",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 363,
          "context": "type\") != expected_type:\n                security_logger.warning(\"Invalid token type\", \n                                      expected=",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 371,
          "context": "n_store.is_revoked(jti):\n                security_logger.warning(\"Revoked token used\", jti=jti)\n                return None",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 378,
          "context": "client_fingerprint:\n                    security_logger.warning(\"Token binding verification failed\")\n                    return None",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 385,
          "context": "- iat > max_age_seconds:\n                security_logger.warning(\"Token exceeds maximum age\")\n                return None",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 392,
          "context": "t jwt.ExpiredSignatureError:\n            security_logger.warning(\"Token expired\")\n            self.token_stats[\"verification_failu",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 396,
          "context": "jwt.InvalidTokenError as e:\n            security_logger.warning(\"Invalid token\", error=str(e))\n            self.token_stats[\"veri",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 400,
          "context": "except Exception as e:\n            security_logger.error(\"Token verification error\", error=str(e))\n            self.token_stats[\"veri",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 417,
          "context": "s[\"tokens_revoked\"] += 1\n                security_logger.info(\"Token revoked\", jti=jti)\n                return True",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 421,
          "context": "except Exception as e:\n            logger.error(\"Failed to revoke token\", error=str(e))\n        \n        return False",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 121,
          "context": "await self._load_keys()\n                logger.info(\"Loaded existing RSA keys\")\n            else:\n                # Generate new",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 125,
          "context": "it self._generate_and_save_keys()\n                logger.info(\"Generated new RSA keys\")\n                \n        except Exception as e:",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 128,
          "context": "except Exception as e:\n            logger.error(\"Failed to load/generate RSA keys\", error=str(e))\n            raise\n    \n    async d",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 462,
          "context": "keys after grace period\n        \n        security_logger.info(\"Key rotation initiated\")\n    \n    def get_statistics(self) -> Dict[str, A",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "logger.*info.*token",
          "line": 286,
          "context": "s[\"tokens_issued\"] += 1\n        \n        security_logger.info(\"Access token created\", \n                           subject=sub",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "logger.*info.*token",
          "line": 328,
          "context": "nager.key_id}\n        )\n        \n        security_logger.info(\"Refresh token created\", \n                           subject=sub",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/enhanced_jwt.py",
          "pattern": "logger.*info.*token",
          "line": 417,
          "context": "s[\"tokens_revoked\"] += 1\n                security_logger.info(\"Token revoked\", jti=jti)\n                return True",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 534,
          "context": "ys=30  # Rotate monthly\n            )\n            logger.info(\"Generated new token signing key\")\n        else:\n            # Use most recent non-",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 552,
          "context": "ires_in_days=30\n                )\n                logger.info(\"Generated new token signing key (previous expired)\")\n    \n    def create_token(\n        self,",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 603,
          "context": "}.{payload_b64}.{signature_b64}\"\n        \n        logger.debug(f\"Created quantum-safe token for {payload.get('sub', 'unknown')}\")\n        return token\n    \n    def verify_token(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 648,
          "context": "ueError(\"Token expired\")\n            \n            logger.debug(f\"Verified quantum-safe token: {payload.get('jti')}\")\n            return payload",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 652,
          "context": "except Exception as e:\n            logger.warning(f\"Token verification failed: {e}\")\n            raise\n    \n    def _sign_data(self,",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 168,
          "context": "key_id, algorithm.value)\n            \n            logger.info(f\"Generated {algorithm.value} key pair: {key_id}\")\n            return key\n            \n        exce",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 172,
          "context": "except Exception as e:\n            logger.error(f\"Failed to generate key pair: {e}\")\n            raise\n    \n    def _generate_rsa_key",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 226,
          "context": ")   # Kyber-1024 public key size\n        \n        logger.warning(\"Using simulated Kyber key generation - implement proper post-quantum library\")\n        return private_key, public_key",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 462,
          "context": "y_id}\", old_key.algorithm.value)\n        \n        logger.info(f\"Rotated key {key_id} to {new_key.key_id}\")\n        return new_key\n    \n    def revoke_key(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 476,
          "context": "d\", key_id, key.algorithm.value)\n        \n        logger.info(f\"Revoked key: {key_id}\")\n    \n    def export_public_keys(self) -> Dict[st",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 534,
          "context": "ys=30  # Rotate monthly\n            )\n            logger.info(\"Generated new token signing key\")\n        else:\n            # Use most recent non-",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 545,
          "context": "keys, key=lambda k: k.created_at)\n                logger.info(f\"Using existing signing key: {self.signing_key.key_id}\")\n            else:\n                # All keys exp",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 552,
          "context": "ires_in_days=30\n                )\n                logger.info(\"Generated new token signing key (previous expired)\")\n    \n    def create_token(\n        self,",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 256,
          "context": "r derived keys\n        cache_key = hashlib.sha256(f\"{password}:{salt.hex()}:{algorithm.value}\".encode()).hexdigest()\n        \n        if cache_k",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "logger.*info.*token",
          "line": 534,
          "context": "ys=30  # Rotate monthly\n            )\n            logger.info(\"Generated new token signing key\")\n        else:\n            # Use mos",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/quantum_safe_security.py",
          "pattern": "logger.*info.*token",
          "line": 552,
          "context": "ires_in_days=30\n                )\n                logger.info(\"Generated new token signing key (previous expired)\")\n    \n    def cre",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/adaptive_rate_limiter.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 518,
          "context": "except Exception as e:\n            logger.error(\"Token bucket check failed\", error=str(e), key=key)\n            self.metrics[",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_config.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 56,
          "context": "elf.environment == \"development\":\n                logger.warning(\"Generating temporary database password for development\")\n                password = self._secret_manager.",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_config.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 79,
          "context": "elf.environment == \"development\":\n                logger.warning(\"Generating temporary Redis password for development\")\n                password = self._secret_manager.",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 22,
          "context": "lth = self._secret_manager.health_check()\n        logger.info(\"Secret manager initialized\", \n                   vault_available=health[\"vaul",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 37,
          "context": "elf.environment == \"development\":\n                logger.warning(\"Generating temporary JWT secret for development\")\n                secret = self._secret_manager.ge",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/vault_client.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 70,
          "context": "self._auth_time = time.time()\n                    logger.info(\"Vault authentication successful via token\")\n                    return",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/vault_client.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 103,
          "context": "except hvac.exceptions.InvalidPath:\n            logger.warning(f\"Secret not found at path: {path}\")\n            return None\n        except Exception",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/vault_client.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 106,
          "context": "n None\n        except Exception as e:\n            logger.error(f\"Failed to retrieve secret from {path}: {e}\")\n            raise\n    \n    def store_secret(self",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/vault_client.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 119,
          "context": "secret=secret_data\n            )\n            logger.info(f\"Secret stored successfully at path: {path}\")\n        except Exception as e:\n            logge",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/vault_client.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 121,
          "context": "ath}\")\n        except Exception as e:\n            logger.error(f\"Failed to store secret at {path}: {e}\")\n            raise",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/vault_client.py",
          "pattern": "logger.*info.*token",
          "line": 70,
          "context": "self._auth_time = time.time()\n                    logger.info(\"Vault authentication successful via token\")\n                    return",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 71,
          "context": "self.vault_client = VaultClient()\n                logger.info(\"Vault client initialized for JWT secret management\")\n            except Exception as e:",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 103,
          "context": "ment()\n        except Exception as e:\n            logger.error(f\"Failed to load JWT secret: {e}\")\n            if self.environment == \"production\":",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 107,
          "context": "in production\")\n            else:\n                logger.warning(\"Generating temporary secret for development\")\n                self._generate_temporary_secret(",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 128,
          "context": "\"vault\"\n                    )\n                    logger.info(\"JWT secret loaded from Vault\")\n                    return",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 135,
          "context": "except Exception as e:\n            logger.error(f\"Failed to load secret from Vault: {e}\")\n            raise\n    \n    def _load_from_enviro",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 146,
          "context": "in production\")\n            else:\n                logger.warning(\"No JWT_SECRET found, generating temporary secret\")\n                self._generate_temporary_secret(",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 161,
          "context": "unt=0,\n            source=\"env\"\n        )\n        logger.info(\"JWT secret loaded from environment\")\n    \n    def _validate_secret(self, secret: str)",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 166,
          "context": "len(secret) < self.MIN_SECRET_LENGTH:\n            logger.error(f\"JWT secret too short: {len(secret)} < {self.MIN_SECRET_LENGTH}\")\n            return False\n        \n        entrop",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 171,
          "context": "if entropy < self.MIN_ENTROPY:\n            logger.error(f\"JWT secret entropy too low: {entropy} < {self.MIN_ENTROPY}\")\n            return False\n        \n        # Chec",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 176,
          "context": "if self._has_weak_patterns(secret):\n            logger.error(\"JWT secret contains weak patterns\")\n            return False\n        \n        return",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 262,
          "context": "re_secret(\"jwt-signing\", secret_data)\n            logger.info(\"New JWT secret generated and stored in Vault\")\n        \n        self._current_secret = secret",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 284,
          "context": "source=\"generated\"\n        )\n        logger.warning(\"Using temporary JWT secret - not suitable for production\")\n    \n    def _needs_rotation(self) -> bool:",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 313,
          "context": "except Exception as e:\n            logger.error(f\"JWT secret rotation failed: {e}\")\n            # Don't raise in production to avoid",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/core/secure_jwt.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 320,
          "context": "\"\"\"Force immediate secret rotation\"\"\"\n        logger.warning(\"Forcing JWT secret rotation\")\n        self._rotate_secret()\n    \n    def get_s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_ai_vulnerability_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1182,
          "context": "# Simulate social media monitoring\n        logger.debug(f\"Monitoring social media for: {source['keywords']}\")\n        # In production: monitor Twitter/X API f",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_auth_services.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 401,
          "context": "f-8'))\n        except Exception as e:\n            logger.error(f\"Password verification error: {e}\")\n            return False\n    \n    def _generate_",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_auth_services.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 343,
          "context": "except jwt.InvalidTokenError as e:\n            logger.warning(f\"Invalid token: {e}\")\n            return TokenValidationResult(",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_auth_services.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 349,
          "context": ")\n        except Exception as e:\n            logger.error(f\"Token validation error: {e}\")\n            return TokenValidationResult(",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/advanced_ptaas_engine.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 485,
          "context": "test_urls = [\n                    f\"{base_url}/login?username=admin&password={payload}\",\n                    f\"{base_url}/search?q={paylo",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_security_suite.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 241,
          "context": "except Exception as e:\n            logger.error(f\"Key generation failed for {algorithm}: {e}\")\n            raise\n    \n    async def encrypt_dat",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_security_suite.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 863,
          "context": "except Exception as e:\n            logger.error(f\"Failed to rotate quantum keys: {e}\")\n            raise\n    \n    async def _analyze_cr",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_security_suite.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1028,
          "context": "except Exception as e:\n            logger.error(f\"Key rotation failed: {e}\")\n            raise\n    \n    async def get_securit",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_security_suite.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1120,
          "context": "except Exception as e:\n            logger.error(f\"Default keypair generation failed: {e}\")\n    \n    async def _setup_security_policies(self",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/ptaas_orchestrator_service_helpers.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 566,
          "context": "except Exception as e:\n                        logger.error(f\"Failed to load session {key}: {e}\")\n                \n                logger.info(f\"L",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/rate_limiting_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 148,
          "context": "except Exception as e:\n            self.logger.error(f\"Error checking rate limit for key '{key}': {str(e)}\")\n            # Fail open for availability",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/rate_limiting_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 182,
          "context": "except Exception as e:\n            self.logger.error(f\"Error incrementing usage for key '{key}': {str(e)}\")\n            return True  # Fail open\n    \n    as",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/rate_limiting_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 226,
          "context": "except Exception as e:\n            self.logger.error(f\"Error getting usage stats for key '{key}': {str(e)}\")\n            return UsageStats(\n                t",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/rate_limiting_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 285,
          "context": "e.delete(cache_key)\n            \n            self.logger.info(f\"Reset rate limit for key: {cache_key}\")\n            return True\n            \n        exc",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/rate_limiting_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 289,
          "context": "except Exception as e:\n            self.logger.error(f\"Error resetting rate limit for key '{key}': {str(e)}\")\n            return False\n    \n    async def _che",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 418,
          "context": "except Exception as e:\n            logger.error(f\"Password hashing failed: {e}\")\n            raise AuthenticationError(\"Password",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 428,
          "context": "f-8'))\n        except Exception as e:\n            logger.error(f\"Password verification failed: {e}\")\n            return False\n    \n    # Private help",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 644,
          "context": "password(dev_password, dev_password_hash)\n        logger.info(f\"Development user seeded: admin@xorb.dev (password verification: {verification_test})\")\n\n\n# Global service instance with lazy initializa",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 123,
          "context": "self.security_config.require_mfa\n        \n        logger.info(f\"Security settings initialized - Token expiry: {self.access_token_expiry}, \"\n                   f\"Max attempts: {self.max_logi",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 316,
          "context": "except Exception as e:\n            logger.error(f\"Token validation failed: {e}\")\n            return {\n                \"valid\": Fa",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 337,
          "context": "ken(user_id, session_id)\n            \n            logger.info(f\"Access token refreshed for user {user_id}\")\n            return new_access_token",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 341,
          "context": "except Exception as e:\n            logger.error(f\"Token refresh failed: {e}\")\n            return None\n    \n    async def logou",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 384,
          "context": "except Exception as e:\n            logger.error(f\"Failed to create access token: {e}\")\n            raise AuthenticationError(\"Failed to",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 402,
          "context": ", but still blacklist it\n            \n            logger.info(\"Token revoked successfully\")\n            return True\n            \n        exc",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 406,
          "context": "except Exception as e:\n            logger.error(f\"Token revocation failed: {e}\")\n            return False\n    \n    def hash_passw",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 124,
          "context": "{self.access_token_expiry}, \"\n                   f\"Max attempts: {self.max_login_attempts}, Password length: {self.password_min_length}\")\n    \n    async def authenticate_user(self, crede",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "logger.*info.*token",
          "line": 123,
          "context": "self.security_config.require_mfa\n        \n        logger.info(f\"Security settings initialized - Token expiry: {self.access_token_expiry}, \"\n                   f\"Max attempts: {se",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "logger.*info.*token",
          "line": 337,
          "context": "ken(user_id, session_id)\n            \n            logger.info(f\"Access token refreshed for user {user_id}\")\n            return",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/secure_authentication_service.py",
          "pattern": "logger.*info.*token",
          "line": 402,
          "context": ", but still blacklist it\n            \n            logger.info(\"Token revoked successfully\")\n            return True",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_safe_security_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 370,
          "context": "except Exception as e:\n            logger.error(f\"Failed to generate quantum-safe keypair: {e}\")\n            raise\n\n    async def _generate_kem_k",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_safe_security_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 394,
          "context": "except Exception as e:\n            logger.error(f\"Failed to generate KEM keypair: {e}\")\n            raise\n\n    async def _generate_signa",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_safe_security_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 419,
          "context": "except Exception as e:\n            logger.error(f\"Failed to generate signature keypair: {e}\")\n            raise\n\n    async def quantum_safe_en",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 410,
          "context": "except Exception as e:\n            logger.error(f\"Password hashing failed: {e}\")\n            raise\n    \n    def verify_password(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 418,
          "context": "f-8'))\n        except Exception as e:\n            logger.error(f\"Password verification failed: {e}\")\n            return False\n    \n    # Authorizatio",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 718,
          "context": "figuration (without sensitive values)\n            logger.info(f\"Security policies loaded - Password min length: {self.security_policies['password_policy']['min_length']}, \"\n                       f\"Session timeout: {self.s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 799,
          "context": "except Exception as e:\n            logger.error(f\"Password policy check failed: {e}\")\n        \n        return warnings\n\n\n# Global serv",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 332,
          "context": "except Exception as e:\n            logger.error(f\"Token validation failed: {e}\")\n            return {\n                \"valid\": Fa",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_authentication_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 369,
          "context": "except Exception as e:\n            logger.error(f\"Token refresh failed: {e}\")\n            return None\n    \n    async def logou",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_authentication_service.py",
          "pattern": "log.*\\..*\\{.*password.*\\}",
          "line": 718,
          "context": "figuration (without sensitive values)\n            logger.info(f\"Security policies loaded - Password min length: {self.security_policies['password_policy']['min_length']}, \"\n                       f\"Session timeout: {sel",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_authentication_service.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 718,
          "context": "without sensitive values)\n            logger.info(f\"Security policies loaded - Password min length: {self.security_policies['password_policy']['min_length']}, \"\n                       f\"Session timeout: {self.s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/incident_response_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 672,
          "context": "with token management system\n                    logger.info(f\"Revoking tokens for user {user} for incident {incident.incident_id}\")\n                    incident.evidence.append(f\"R",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/incident_response_service.py",
          "pattern": "logger.*info.*token",
          "line": 672,
          "context": "with token management system\n                    logger.info(f\"Revoking tokens for user {user} for incident {incident.incident_",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_service_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 106,
          "context": "oken\"}\n        except Exception as e:\n            logger.error(f\"Token validation failed: {e}\")\n            return {\"valid\": False, \"error\": \"Va",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_service_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 125,
          "context": "except Exception as e:\n            logger.error(f\"Token refresh failed: {e}\")\n            raise\n    \n    async def logout_user",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/advanced_reporting_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1104,
          "context": "if expired_keys:\n                    logger.debug(f\"Cleaned {len(expired_keys)} expired reports from cache\")\n                \n                await asyncio.s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 194,
          "context": ")\n        except Exception as e:\n            self.logger.error(f\"Password hashing error: {str(e)}\")\n            raise\n    \n    def verify_password(s",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 202,
          "context": ")\n        except Exception as e:\n            self.logger.error(f\"Password verification error: {str(e)}\")\n            return False\n    \n    def _generate_",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 129,
          "context": "xcept jwt.ExpiredSignatureError:\n            self.logger.info(\"Token validation failed: Token expired\")\n            return None\n        except jwt.Inval",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 132,
          "context": "cept jwt.InvalidTokenError as e:\n            self.logger.warning(f\"Token validation failed: {str(e)}\")\n            return None\n        except Exception",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 135,
          "context": "e\n        except Exception as e:\n            self.logger.error(f\"Token validation error: {str(e)}\")\n            return None\n    \n    async def refre",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 160,
          "context": "ess_token(username)\n            \n            self.logger.info(f\"Access token refreshed for user: {username}\")\n            return new_access_token",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 164,
          "context": "xcept jwt.ExpiredSignatureError:\n            self.logger.info(\"Refresh token expired\")\n            return None\n        except jwt.Inval",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 167,
          "context": "cept jwt.InvalidTokenError as e:\n            self.logger.warning(f\"Invalid refresh token: {str(e)}\")\n            return None\n        except Exception",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 170,
          "context": "e\n        except Exception as e:\n            self.logger.error(f\"Token refresh error: {str(e)}\")\n            return None\n    \n    async def logou",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 182,
          "context": "distributed systems\n            \n            self.logger.info(f\"User logged out, token blacklisted: {session_id[:20]}...\")\n            return True\n            \n        exc",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "logger.*info.*token",
          "line": 129,
          "context": "xcept jwt.ExpiredSignatureError:\n            self.logger.info(\"Token validation failed: Token expired\")\n            return None\n        except",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "logger.*info.*token",
          "line": 160,
          "context": "ess_token(username)\n            \n            self.logger.info(f\"Access token refreshed for user: {username}\")\n            retu",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "logger.*info.*token",
          "line": 164,
          "context": "xcept jwt.ExpiredSignatureError:\n            self.logger.info(\"Refresh token expired\")\n            return None\n        except",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_interface_implementations.py",
          "pattern": "logger.*info.*token",
          "line": 182,
          "context": "distributed systems\n            \n            self.logger.info(f\"User logged out, token blacklisted: {session_id[:20]}...\")\n            r",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_safe_cryptography.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 258,
          "context": "s[\"keys_generated\"] += 2\n            \n            logger.info(f\"Generated {algorithm.value} key pair (security level {security_level.value})\")\n            return private_key_id, public_key_id",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_safe_cryptography.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 262,
          "context": "except Exception as e:\n            logger.error(f\"Key pair generation failed: {e}\")\n            raise\n\n    async def encrypt_data(",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_safe_cryptography.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 464,
          "context": "except Exception as e:\n            logger.error(f\"Key exchange failed: {e}\")\n            raise\n\n    # Implementation of crypt",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_metrics_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 552,
          "context": ", json.JSONDecodeError) as e:\n                    logger.warning(f\"Failed to parse metric key {key}: {e}\")\n                    continue",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/advanced_redis_intelligence_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 988,
          "context": "except Exception as e:\n                self.logger.error(f\"Predictive prefetching error for {prediction.key}: {e}\")\n    \n    async def _execute_prefetch_batch(self)",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/advanced_redis_intelligence_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1007,
          "context": ")\n                \n                self.logger.info(f\"Prefetched cache entry: {prediction.key}\")\n                \n            except Exception as",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/advanced_redis_intelligence_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1187,
          "context": "await client.delete(key)\n                    self.logger.info(f\"Cleared low-performing cache: {key}\")\n            \n        except Exception as e:",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/production_ai_threat_intelligence.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1022,
          "context": "ation_cache[key]\n                \n                logger.debug(f\"Cache cleanup completed. Removed {len(expired_keys)} expired entries\")\n                \n                # Run every hou",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/consolidated_auth_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 420,
          "context": "JWTError, ValueError, KeyError) as e:\n            logger.warning(f\"Token validation failed: {e}\")\n            return None\n        except Exception",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/consolidated_auth_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 423,
          "context": "n None\n        except Exception as e:\n            logger.error(f\"Token validation error: {e}\")\n            return None\n    \n    # =============",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/consolidated_auth_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 697,
          "context": "except Exception as e:\n            logger.error(f\"Refresh token error: {e}\")\n            return None\n    \n    async def logou",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/consolidated_auth_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 373,
          "context": "except Exception as e:\n            logger.error(f\"API key authentication error: {e}\")\n            return AuthenticationResult(",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/embedding_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 151,
          "context": "KEY\")\n            if not api_key:\n                logger.warning(\"OpenAI API key not found\")\n                return",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/embedding_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 187,
          "context": "KEY\")\n            if not api_key:\n                logger.warning(\"NVIDIA API key not found\")\n                return",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/embedding_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 276,
          "context": "f._is_cache_valid(cached_result):\n                logger.debug(f\"Cache hit for embedding: {cache_key[:16]}...\")\n                return cached_result[\"embedding\"",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_security_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 263,
          "context": "_keys[key_id] = key_pair\n            \n            logger.info(f\"Generated post-quantum key pair: {key_id} using {algorithm.value}\")\n            return key_pair",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_security_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 267,
          "context": "except Exception as e:\n            logger.error(f\"Post-quantum key generation failed: {e}\")\n            raise\n    \n    async def quantum_saf",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/quantum_security_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 674,
          "context": "ithm])\n        except Exception as e:\n            logger.error(f\"Error generating real PQ keys for {algorithm}: {e}\")\n            return await self._generate_simulate",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/services/sophisticated_red_team_agent.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 1225,
          "context": "except Exception as e:\n            logger.error(f\"Error verifying authorization token: {e}\")\n            return False\n            \n    def _t",
          "severity": "HIGH"
        },
        {
          "file": "src/api/app/infrastructure/caching/cache_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 347,
          "context": "except Exception as e:\n            logger.error(f\"Redis keys error: {e}\")\n            return []\n    \n    async def health_",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/integrations/cicd_platform.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 758,
          "context": "repo_key not in self.integrators:\n                logger.error(f\"No integrator found for {repo_key}\")\n                return",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/integrations/siem_platform.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 229,
          "context": "if not self.auth_token:\n                logger.error(\"QRadar SEC token not provided\")\n                return False",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/integrations/siem_platform.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 437,
          "context": "d:\n                credentials = base64.b64encode(f\"{username}:{password}\".encode()).decode()\n                self.auth_head",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/architecture/observability.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 133,
          "context": "self.attributes[key] = value\n            logger.debug(f\"Span attribute: {key} = {value}\")\n            \n        def set_status(self, status",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/intelligence/llm_integration.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 90,
          "context": "\")\n        if not openrouter_api_key:\n            logger.warning(\"OPENROUTER_API_KEY not set - OpenRouter providers will be unavailable\")\n            return\n        \n        openrouter_c",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/intelligence/llm_integration.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 122,
          "context": "a_api_key\n            )\n        else:\n            logger.warning(\"NVIDIA_API_KEY not set - NVIDIA provider will be unavailable\")\n        \n        logger.info(f\"Initialized {len(",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/ci_integration.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 130,
          "context": "]:\n        \"\"\"Run secret scanning\"\"\"\n        self.logger.info(\"Running secret scanning...\")\n        # In a real implementation, this would e",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_security_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 215,
          "context": "key.key_id] = public_key\n            \n            logger.info(f\"Generated {algorithm.value} keypair: {key_id}\")\n            \n            return private_key.key_",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_security_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 220,
          "context": "except Exception as e:\n            logger.error(f\"Keypair generation failed: {e}\")\n            raise\n    \n    async def encrypt_mes",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_security_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 259,
          "context": "lic_key.usage_count += 1\n            \n            logger.debug(f\"Encrypted message using {public_key.algorithm.value}\")\n            \n            return quantum_message",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_security_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 297,
          "context": "ate_key.usage_count += 1\n            \n            logger.debug(f\"Decrypted message using {private_key.algorithm.value}\")\n            \n            return decrypted_data",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_security_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 324,
          "context": "ate_key.usage_count += 1\n            \n            logger.debug(f\"Created signature using {private_key.algorithm.value}\")\n            \n            return signature",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_security_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 351,
          "context": "lic_key.usage_count += 1\n            \n            logger.debug(f\"Verified signature using {public_key.algorithm.value}: {is_valid}\")\n            \n            return is_valid",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_security_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 579,
          "context": "on\"] = datetime.utcnow()\n            \n            logger.info(f\"Distributed quantum key {key_id} via channel {channel_id}\")\n            return key_id\n            \n        e",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_security_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 583,
          "context": "except Exception as e:\n            logger.error(f\"Quantum key distribution failed: {e}\")\n            raise\n    \n    async def get_quantum",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_security_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 902,
          "context": "except Exception as e:\n            logger.error(f\"Quantum-safe keypair creation failed: {e}\")\n            raise\n    \n    async def encrypt_qua",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_security_engine.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1046,
          "context": "itialize default quantum-safe keypairs\"\"\"\n        logger.info(\"Initializing default quantum-safe keypairs\")\n        # Create default keypairs for each activ",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_enhanced_security_infrastructure.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 192,
          "context": "id] = public_quantum_key\n            \n            logger.info(\"Quantum-safe keypair generated\",\n                       algorithm=algorithm.value",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_enhanced_security_infrastructure.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 200,
          "context": "except Exception as e:\n            logger.error(\"Failed to generate quantum keypair\", \n                        algorithm=algorithm.val",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_enhanced_security_infrastructure.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 276,
          "context": "rror_rate\": 0.02  # 2%\n        }\n        \n        logger.info(\"Quantum Key Distribution Simulator initialized\", \n                   simulator_id=self.simulator_",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_crypto.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 137,
          "context": "except Exception as e:\n            logger.error(f\"Kyber keypair generation failed: {e}\")\n            raise\n    \n    async def encapsulate",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_crypto.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 216,
          "context": "except Exception as e:\n            logger.error(f\"Dilithium keypair generation failed: {e}\")\n            raise\n    \n    async def sign(self,",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/security/quantum_safe_crypto.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 521,
          "context": "except Exception as e:\n            logger.error(f\"Keypair generation failed: {e}\")\n            raise\n    \n    async def get_algorit",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/audit/audit_logger.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 378,
          "context": "except Exception as e:\n                logger.error(f\"Failed to load signing keys: {e}\")\n                \n    async def _generate_signing",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/audit/audit_logger.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 413,
          "context": "wait f.write(public_pem)\n                \n        logger.info(\"Generated new audit signing key pair\")\n        \n    async def log_event(self, event: Au",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/security_framework.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 174,
          "context": "Path(key_path).chmod(0o600)\n        \n        logger.info(\"Master key generated\", key_path=key_path)\n    \n    async def _load_mast",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/security_framework.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 182,
          "context": "read()\n        except Exception as e:\n            logger.error(\"Failed to load master key\", error=str(e))\n            raise\n    \n    async d",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/security_framework.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 233,
          "context": "w() + timedelta(days=90)\n            \n            logger.debug(\"Encryption key derived\", key_id=key_id)\n            \n        except Excep",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/security_framework.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 236,
          "context": "except Exception as e:\n            logger.error(\"Key derivation failed\", key_id=key_id, error=str(e))\n            raise",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/authorization.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 193,
          "context": "y_path, public_key_path)\n            \n            logger.info(\"Token manager initialized\")\n            \n        except Exception as e:",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/authorization.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 196,
          "context": "except Exception as e:\n            logger.error(\"Failed to initialize token manager\", error=str(e))\n            raise\n    \n    async d",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/authorization.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 268,
          "context": "lgorithm=self.algorithm)\n            \n            logger.debug(\"Token generated\", user_id=user.user_id, session_id=session_id)",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/authorization.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 273,
          "context": "except Exception as e:\n            logger.error(\"Token generation failed\", error=str(e))\n            raise\n    \n    def val",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/authorization.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 290,
          "context": "except jwt.ExpiredSignatureError:\n            logger.warning(\"Token expired\")\n            return None\n        except jwt.Inval",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/authorization.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 293,
          "context": "except jwt.InvalidTokenError as e:\n            logger.warning(\"Invalid token\", error=str(e))\n            return None\n        ex",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/authorization.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 296,
          "context": "n None\n        except Exception as e:\n            logger.error(\"Token validation failed\", error=str(e))\n            return None\n\n\nclass Ro",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/authorization.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 233,
          "context": "Path(public_path).chmod(0o644)\n        \n        logger.info(\"JWT key pair generated\", \n                   private_key=private_path, pu",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/common/authorization.py",
          "pattern": "logger.*info.*token",
          "line": 193,
          "context": "y_path, public_key_path)\n            \n            logger.info(\"Token manager initialized\")\n            \n        except",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/intelligence_engine/core/compliance_automation.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1404,
          "context": "self.logger.info(f\"Completed scheduled assessment for {assessment_key}\")\n                        \n                    exc",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/intelligence_engine/core/compliance_automation.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1407,
          "context": "cept Exception as e:\n                        self.logger.error(f\"Scheduled assessment failed for {assessment_key}: {e}\")\n                \n                # Sleep for mon",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb/intelligence_engine/core/compliance_automation.py",
          "pattern": "print\\s*\\(.*key",
          "line": 1574,
          "context": "liant_controls}/{report.total_controls}\")\n        print(f\"\\nKey Findings:\")\n        for finding in report.key_fin",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb_services/core_platform/main.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 181,
          "context": "xcept jwt.ExpiredSignatureError:\n            self.logger.warning(\"JWT token expired\")\n            return None\n        except jwt.Inval",
          "severity": "HIGH"
        },
        {
          "file": "src/xorb_services/core_platform/main.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 184,
          "context": "except jwt.InvalidTokenError:\n            self.logger.warning(\"Invalid JWT token\")\n            return None\n    \n    async def check",
          "severity": "HIGH"
        },
        {
          "file": "src/services/worker/worker.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 53,
          "context": "oken)\n        except ValueError as e:\n            logger.warning(f\"Token verification failed: {e}\")\n            return None\n        except Exception",
          "severity": "HIGH"
        },
        {
          "file": "src/services/worker/worker.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 56,
          "context": "n None\n        except Exception as e:\n            logger.warning(f\"Token verification error: {e}\")\n            return None\n\n# Task data models\n@dat",
          "severity": "HIGH"
        },
        {
          "file": "src/services/worker/worker.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 228,
          "context": "n)\n            if not token_data:\n                logger.error(\"Invalid token\")\n                return",
          "severity": "HIGH"
        },
        {
          "file": "src/services/red_blue_agents/agents/red_team.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1249,
          "context": "= parameters[\"value_data\"]\n        \n        self.logger.info(f\"Creating registry autorun: {key_path}\")\n        \n        # For safety, only simulate reg",
          "severity": "HIGH"
        },
        {
          "file": "src/services/red_blue_agents/agents/red_team.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1269,
          "context": "eters.get(\"public_key\", \"\")\n        \n        self.logger.info(f\"Setting up SSH key persistence for {target_user}\")\n        \n        # For safety, only simulate SSH",
          "severity": "HIGH"
        },
        {
          "file": "src/services/red_blue_agents/agents/red_team.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1593,
          "context": "output_file\", \"keylog.txt\")\n        \n        self.logger.info(f\"Starting keylogging for {duration} seconds\")\n        \n        # For safety, only simulate key",
          "severity": "HIGH"
        },
        {
          "file": "wargame/red/red_team_agent.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 198,
          "context": "target=hr_app['url'],\n                    payload=f\"POST /login username={vuln_001['credentials']['username']}&password={vuln_001['credentials']['password']}\",\n                    result=\"Successfully logged",
          "severity": "HIGH"
        },
        {
          "file": "platform/bus/pubsub/nats_client.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 172,
          "context": "k.seq\n\n        except Exception as e:\n            logger.error(f\"Failed to publish message {message.idempotency_key}: {e}\")\n            raise\n\n    async def subscribe_disco",
          "severity": "HIGH"
        },
        {
          "file": "platform/bus/pubsub/nats_client.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 222,
          "context": "# Duplicate, acknowledge and skip\n                logger.debug(f\"Message {idempotency_key} already processed\")\n                return\n\n            # Consumer f",
          "severity": "HIGH"
        },
        {
          "file": "platform/bus/pubsub/nats_client.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 236,
          "context": "consumer processing, retry later\n                logger.warning(f\"Consumer fence active for {fence_key}, retrying\")\n                return\n\n            try:",
          "severity": "HIGH"
        },
        {
          "file": "platform/bus/pubsub/nats_client.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 247,
          "context": "await msg.ack()\n\n                logger.info(f\"Successfully processed message {idempotency_key}\")\n\n            finally:\n                # Release",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
          "pattern": "print\\s*\\(.*token",
          "line": 898,
          "context": ")\n        if debugging:\n            # print(\"Matched\", self, \"->\", ret_tokens.as_list())\n            if self.debugActions.debu",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
          "pattern": "print\\s*\\(.*token",
          "line": 1219,
          "context": "rint(' '*start + '^'*(end-start))\n                print(' '*start + tokens[0])\n\n        prints::\n\n            sldjf123lsdjj",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/requests/help.py",
          "pattern": "print\\s*\\(.*key",
          "line": 127,
          "context": "\"Pretty-print the bug information as JSON.\"\"\"\n    print(json.dumps(info(), sort_keys=True, indent=2))\n\n\nif __name__ == \"__main__\":",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 189,
          "context": "path += f\"?{p_parsed.query}\"\n\n        A1 = f\"{self.username}:{realm}:{self.password}\"\n        A2 = f\"{method}:{path}\"\n\n        HA1 = ha",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/rich/scope.py",
          "pattern": "print\\s*\\(.*key",
          "line": 83,
          "context": "\"id\": \"194521489\",\n        }\n        print(render_scope(locals(), title=\"[i]locals\", sort_keys=False))\n\n    test(20.3423, 3.1427)\n    print()",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/rich/logging.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 273,
          "context": "5532\")\n    log.info(\"POST /admin/ 401 42234\")\n    log.warning(\"password was rejected for admin site.\")\n\n    def divide() -> None:\n        number = 1",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
          "pattern": "print\\s*\\(.*password",
          "line": 369,
          "context": "password) >= 5:\n                break\n            print(\"[prompt.invalid]password too short\")\n        print(f\"password={password!r}",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
          "pattern": "print\\s*\\(.*password",
          "line": 370,
          "context": "int(\"[prompt.invalid]password too short\")\n        print(f\"password={password!r}\")\n\n        fruit = Prompt.ask(\"Enter a fruit\",",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 370,
          "context": "prompt.invalid]password too short\")\n        print(f\"password={password!r}\")\n\n        fruit = Prompt.ask(\"Enter a fruit\", cho",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 348,
          "context": "asattr(context, \"keylog_filename\"):\n        sslkeylogfile = os.environ.get(\"SSLKEYLOGFILE\")\n        if sslkeylogfile:\n            context.ke",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/utils/misc.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 521,
          "context": "quote(user)\n        password = \":****\"\n    return f\"{user}{password}@{netloc}\"\n\n\ndef _transform_url(\n    url: str, transform_net",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 92,
          "context": "one\n\n        if username is not None:\n            logger.debug(\"Getting password from keyring for %s\", url)\n            password = self.keyring.get_pas",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 85,
          "context": "attr(self.keyring, \"get_credential\"):\n            logger.debug(\"Getting credentials from keyring for %s\", url)\n            cred = self.keyring.get_credent",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 92,
          "context": "one\n\n        if username is not None:\n            logger.debug(\"Getting password from keyring for %s\", url)\n            password = self.keyring.get_pas",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 163,
          "context": "ovider(provider: str) -> KeyRingBaseProvider:\n    logger.verbose(\"Keyring provider requested: %s\", provider)\n\n    # keyring has previously failed a",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 171,
          "context": "impl = KeyRingPythonProvider()\n            logger.verbose(\"Keyring provider set: import\")\n            return impl\n        except ImportErr",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 216,
          "context": "keyring\", path=path)\n\n        if cli:\n            logger.verbose(\"Keyring provider set: subprocess with executable %s\", cli)\n            return KeyRingCliProvider(cli)",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 219,
          "context": ")\n            return KeyRingCliProvider(cli)\n\n    logger.verbose(\"Keyring provider set: disabled\")\n    return KeyRingNullProvider()\n\n\nclass MultiDo",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 382,
          "context": "# fmt: on\n            if kr_auth:\n                logger.debug(\"Found credentials in keyring for %s\", netloc)\n                return kr_auth",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 556,
          "context": "atus_code < 400:\n            try:\n                logger.info(\"Saving credentials to keyring\")\n                self.keyring_provider.save_auth_",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 154,
          "context": "\"set\", service_name, username],\n            input=f\"{password}{os.linesep}\".encode(\"utf-8\"),\n            env=env,\n            check=True,",
          "severity": "HIGH"
        },
        {
          "file": "source/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "pattern": "logger.*debug.*password",
          "line": 92,
          "context": "one\n\n        if username is not None:\n            logger.debug(\"Getting password from keyring for %s\", url)\n            password =",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/encryption.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 153,
          "context": "_hash)\n        except Exception as e:\n            logger.error(f\"Password verification failed: {e}\")\n            return False\n\n\nclass CertificateMana",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/encryption.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 40,
          "context": "ode(secrets.token_bytes(32)).decode()\n            logger.warning(\"Generated new master key for development use\")\n        return key\n        \n    def _create_fern",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/encryption.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 233,
          "context": "r.info(f\"Certificate saved: {cert_path}\")\n        logger.info(f\"Private key saved: {key_path}\")\n        \n    def get_tls_config(self) -> Dict[st",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*key",
          "line": 69,
          "context": "for key in secrets[\"keys\"]:\n                    print(f\"   - {key}\")\n            else:\n                print(\"   No",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*key",
          "line": 101,
          "context": "lf):\n        \"\"\"Rotate JWT signing key\"\"\"\n        print(\"\ud83d\udd04 Rotating JWT signing key...\")\n        success = await self.vault_client.ro",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*key",
          "line": 104,
          "context": ".rotate_jwt_key()\n        if success:\n            print(\"\u2705 JWT key rotation completed\")\n        else:\n            pr",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*key",
          "line": 106,
          "context": "ey rotation completed\")\n        else:\n            print(\"\u274c JWT key rotation failed\")\n    \n    async def backup_secre",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*key",
          "line": 141,
          "context": "print(f\"   JWT Secret: {'*' * 8}\")\n            print(f\"   API Key: {'*' * 8}\")\n            print(\"   \u2705 Convenience",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 65,
          "context": "self.vault_client.list_secrets(path)\n            print(f\"\ud83d\udccb Secrets at '{path or 'root'}':\")",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 71,
          "context": "(f\"   - {key}\")\n            else:\n                print(\"   No secrets found\")\n                \n        except Exceptio",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 74,
          "context": "except Exception as e:\n            print(f\"\u274c Failed to list secrets: {e}\")\n    \n    async def get_secret(self, path:",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 81,
          "context": "get_secret_version(path, version)\n                print(f\"\ud83d\udd11 Secret '{path}' (version {version}):\")\n            else:",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 84,
          "context": "elf.vault_client.get_secret(path)\n                print(f\"\ud83d\udd11 Secret '{path}':\")\n            \n            # Mask sensi",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 97,
          "context": "except Exception as e:\n            print(f\"\u274c Failed to get secret: {e}\")\n    \n    async def rotate_jwt_key(self):",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 110,
          "context": "tr):\n        \"\"\"Backup secrets to file\"\"\"\n        print(f\"\ud83d\udcbe Backing up secrets to {output_file}...\")\n        success = await se",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 113,
          "context": "rets(output_file)\n        if success:\n            print(\"\u2705 Secrets backup completed\")\n        else:\n            pri",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 115,
          "context": "rets backup completed\")\n        else:\n            print(\"\u274c Secrets backup failed\")\n    \n    async def test_integrat",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 126,
          "context": "# Test secret retrieval\n        print(\"\\n2. Configuration Secrets:\")\n        await self.get_secret(\"xorb/config\")",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 129,
          "context": "t self.get_secret(\"xorb/config\")\n        \n        print(\"\\n3. External API Secrets:\")\n        await self.get_secret(\"xorb/external\"",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 140,
          "context": "await get_xorb_api_key()\n            \n            print(f\"   JWT Secret: {'*' * 8}\")\n            print(f\"   API Key: {'*'",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 149,
          "context": "opment secrets (requires write access)\"\"\"\n        print(\"\ud83d\udd27 Setting up development secrets...\")\n        \n        try:\n            # This wo",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 153,
          "context": "ld require write permissions to Vault\n            print(\"\u26a0\ufe0f  Development secret setup requires Vault write permissions\")",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 157,
          "context": "except Exception as e:\n            print(f\"\u274c Failed to setup development secrets: {e}\")\n\n\nasync def main():\n    \"\"\"Main CLI inter",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_manager.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 186,
          "context": "t\":\n            if not args.path:\n                print(\"\u274c --path required for get-secret\")\n                sys.exit(1)\n            await m",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/secret_manager.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 47,
          "context": "et\n            return secret\n            \n        logger.warning(f\"Secret '{key}' not found in any backend\")\n        return default\n        \n    def get_data",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/secret_manager.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 47,
          "context": "et\n            return secret\n            \n        logger.warning(f\"Secret '{key}' not found in any backend\")\n        return default\n        \n    def get_data",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/secret_manager.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 77,
          "context": "secret = secrets.token_urlsafe(64)\n            logger.warning(\"Using temporary JWT secret for development\")\n        return secret\n        \n    def get_api_k",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/secret_manager.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 63,
          "context": "ecret store\")\n                \n            return f\"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}\"\n        else:\n            # Development fallback",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/config_manager.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 343,
          "context": "except Exception as e:\n            self.logger.error(f\"Failed to load secrets: {e}\")\n        \n        return config\n    \n    def _app",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/config_manager.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 59,
          "context": "\"\"\"Get database connection URL\"\"\"\n        return f\"postgresql://{self.username}:{self.password}@{self.host}:{self.port}/{self.name}?sslmode={self.ssl_mode}\"\n\n\n@dataclass\nclass RedisConfig:\n    \"\"\"Redis conf",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/config_manager.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 74,
          "context": "\"rediss\" if self.ssl else \"redis\"\n        auth = f\":{self.password}@\" if self.password else \"\"\n        return f\"{protocol}://{auth}{self.host}:{",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_client.py",
          "pattern": "print\\s*\\(.*token",
          "line": 80,
          "context": "ult token authentication failed\")\n                print(f\"Vault client initialized with token: {self.vault_url}\")\n            else:",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_client.py",
          "pattern": "print\\s*\\(.*key",
          "line": 317,
          "context": "it.rotate_key(name=\"jwt-signing\")\n                print(\"\u2705 JWT signing key rotated successfully\")\n                return Tru",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_client.py",
          "pattern": "print\\s*\\(.*key",
          "line": 320,
          "context": "return True\n            else:\n                print(\"\u26a0\ufe0f  Vault not available, skipping key rotation\")\n                return False",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_client.py",
          "pattern": "print\\s*\\(.*key",
          "line": 324,
          "context": "except Exception as e:\n            print(f\"\u274c JWT key rotation failed: {e}\")\n            return False",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 143,
          "context": "except Exception as e:\n            print(f\"Failed to get secret {path}: {e}\")\n            # Return environment fa",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 340,
          "context": "except Exception as e:\n            print(f\"Failed to get secret version {path}@{version}: {e}\")\n            retur",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 353,
          "context": "except Exception as e:\n            print(f\"Failed to list secrets: {e}\")\n            return {\"keys\": []}\n\n    asyn",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 359,
          "context": "NT\", \"development\") != \"development\":\n            print(\"\u274c Secret backup only allowed in development environment\")",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 385,
          "context": "ackup_data, f, indent=2)\n            \n            print(f\"\u2705 Secrets backed up to {output_file}\")\n            return",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_client.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 389,
          "context": "except Exception as e:\n            print(f\"\u274c Secret backup failed: {e}\")\n            return False\n\n\n#",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/vault_client.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 40,
          "context": "nv(\"POSTGRES_DATABASE\", \"xorb_db\")\n        return f\"postgresql://{self.username}:{self.password}@{host}:{port}/{database}\"\n    \n    @property\n    def is_expired(self) -> bo",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/centralized_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 311,
          "context": "e\", {}).update(db_creds)\n            \n            logger.info(\"Loaded secrets from Vault\")\n            return vault_config",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/centralized_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 315,
          "context": "except Exception as e:\n            logger.warning(f\"Failed to load secrets from Vault: {e}\")\n            return {}\n    \n    def _parse_databa",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/centralized_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 377,
          "context": "\"\"\"\n        if not self.vault_client:\n            logger.warning(\"No Vault client configured, cannot refresh secrets\")\n            return\n        \n        try:",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/centralized_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 391,
          "context": "ig_cache = merged_config\n            \n            logger.info(\"Configuration secrets refreshed from Vault\")\n            \n        except Exception as e:",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/centralized_config.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 394,
          "context": "except Exception as e:\n            logger.error(f\"Failed to refresh secrets: {e}\")\n    \n    def validate_configuration(self) -> Lis",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/centralized_config.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 61,
          "context": "tr:\n        \"\"\"Get database URL\"\"\"\n        return f\"postgresql://{self.username}:{self.password}@{self.host}:{self.port}/{self.name}\"\n\nclass RedisConfig(BaseModel):\n    \"\"\"Redis confi",
          "severity": "HIGH"
        },
        {
          "file": "packages/common/centralized_config.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 74,
          "context": "> str:\n        \"\"\"Get Redis URL\"\"\"\n        auth = f\":{self.password}@\" if self.password else \"\"\n        return f\"redis://{auth}{self.host}:{self.",
          "severity": "HIGH"
        },
        {
          "file": "tests/performance/benchmark_unified_services.py",
          "pattern": "print\\s*\\(.*password",
          "line": 69,
          "context": "Benchmark password hashing performance\"\"\"\n        print(f\"\ud83d\udd10 Benchmarking password hashing ({iterations} iterations)...\")",
          "severity": "HIGH"
        },
        {
          "file": "tests/fixtures/secure_credentials.py",
          "pattern": "print\\s*\\(.*password",
          "line": 184,
          "context": "s:\")\n    print(f\"Username: {creds.username}\")\n    print(f\"Password length: {len(creds.password)}\")\n    print(f\"JWT secret length: {len(creds.jwt",
          "severity": "HIGH"
        },
        {
          "file": "tests/fixtures/secure_credentials.py",
          "pattern": "print\\s*\\(.*key",
          "line": 186,
          "context": "\"JWT secret length: {len(creds.jwt_secret)}\")\n    print(f\"API key length: {len(creds.api_key)}\")\n    print(f\"Security validation: {validate_cr",
          "severity": "HIGH"
        },
        {
          "file": "tests/fixtures/secure_credentials.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 185,
          "context": "nt(f\"Password length: {len(creds.password)}\")\n    print(f\"JWT secret length: {len(creds.jwt_secret)}\")\n    print(f\"API key length: {len(creds.api_ke",
          "severity": "HIGH"
        },
        {
          "file": "tests/fixtures/secure_credentials.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 152,
          "context": "sword = _generator.generate_password()\n    return f\"postgresql://test_user:{db_password}@localhost:5432/xorb_test\"\n\n\ndef get_test_redis_url() -> str:\n    \"\"\"Get tes",
          "severity": "HIGH"
        },
        {
          "file": "tests/fixtures/secure_credentials.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 158,
          "context": "sword = _generator.generate_password()\n    return f\"redis://:{redis_password}@localhost:6379/1\"\n\n\ndef validate_credential_security(credentials: T",
          "severity": "HIGH"
        },
        {
          "file": "tests/fixtures/secure_credentials.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 184,
          "context": "print(f\"Username: {creds.username}\")\n    print(f\"Password length: {len(creds.password)}\")\n    print(f\"JWT secret length: {len(creds.jwt_se",
          "severity": "HIGH"
        },
        {
          "file": "tests/e2e/test_complete_workflows.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 238,
          "context": "# Step 1: Login and authentication\n        login_response = api_client.post('/auth/token', data={\n            'username': 'security_analyst",
          "severity": "HIGH"
        },
        {
          "file": "tests/integration/test_enhanced_components.py",
          "pattern": "print\\s*\\(.*key",
          "line": 183,
          "context": "t(\"  1. Run: python run_xorb_supreme.py\")\n        print(\"  2. Configure API keys in config.json\")\n        print(\"  3. Start monit",
          "severity": "HIGH"
        },
        {
          "file": "tests/integration/test_llm_integration.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 156,
          "context": "\"\u2705 LLM vulnerability analysis completed\")\n        logger.info(f\"  Analysis keys: {list(analysis.keys())}\")\n\n        logger.info(\"\ud83d\udccb Test 6: System Statistic",
          "severity": "HIGH"
        },
        {
          "file": "tests/integration/fixtures/jwt.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 56,
          "context": "es a test ES256 key pair for signing JWTs.\"\"\"\n    logger.info(\"Generating test ES256 key pair for JWTs...\")\n    private_pem, public_pem = _generate_test_es2",
          "severity": "HIGH"
        },
        {
          "file": "tests/integration/fixtures/jwt.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 58,
          "context": ", public_pem = _generate_test_es256_keypair()\n    logger.info(\"Test ES256 key pair generated.\")\n    return private_pem, public_pem\n\n# --- JWT Fa",
          "severity": "HIGH"
        },
        {
          "file": "tests/integration/fixtures/certs.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 161,
          "context": ") as f:\n            f.write(ca_cert_pem)\n\n        logger.debug(f\"Test cert/key files created: {cert_path}, {key_path}\")\n        # Yield paths including the CA cert path",
          "severity": "HIGH"
        },
        {
          "file": "tests/integration/fixtures/certs.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 164,
          "context": "yield cert_path, key_path, ca_cert_path\n    logger.debug(\"Test cert/key files cleaned up.\")\n\n# --- Trusted CA Path for Clients ---\n@pytest.f",
          "severity": "HIGH"
        },
        {
          "file": "wargame-enterprise/ai-orchestrators/nvidia_scenario_orchestrator.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 77,
          "context": "\"\n        if not self.nvidia_api_key:\n            logger.warning(\"NVIDIA_API_KEY not found, using OpenAI as fallback\")\n            # Fallback to OpenAI with NVIDIA-com",
          "severity": "HIGH"
        },
        {
          "file": "wargame-enterprise/replay-store/schemas/metrics_schema.py",
          "pattern": "print\\s*\\(.*key",
          "line": 537,
          "context": "late KPIs\n    kpis = metrics.calculate_kpis()\n    print(f\"KPIs calculated: {list(kpis.keys())}\")\n    \n    # Check thresholds\n    alerts = m",
          "severity": "HIGH"
        },
        {
          "file": "services/infrastructure/security/incident-response-orchestrator.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 542,
          "context": "user_id\")\n            if user_id:\n                logger.info(f\"Resetting password for user {user_id} for incident {incident_id}\")\n                \n                # Generate secu",
          "severity": "HIGH"
        },
        {
          "file": "services/infrastructure/security/incident-response-orchestrator.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 555,
          "context": "except Exception as e:\n            logger.error(f\"Password reset error: {e}\")\n            return False\n    \n    async def _esc",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/security/ci_integration.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 130,
          "context": "]:\n        \"\"\"Run secret scanning\"\"\"\n        self.logger.info(\"Running secret scanning...\")\n        # In a real implementation, this would e",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/middleware/rate_limiting.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 419,
          "context": "state\n        except Exception as e:\n            logger.error(f\"Failed to get rate limit state for {key}: {e}\")\n            \n        # Return new state",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/middleware/rate_limiting.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 456,
          "context": ")\n        except Exception as e:\n            logger.error(f\"Failed to save rate limit state for {state.key}: {e}\")\n            \n    async def _apply_token_bucket(s",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/app/jobs/queue.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 63,
          "context": ")\n            if existing_job_id:\n                logger.info(f\"Job with idempotency key {job_def.idempotency_key} already exists\")\n                # Return existing job execution",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/app/storage/s3.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 243,
          "context": "d_at = datetime.utcnow()\n            \n            logger.info(f\"Uploaded file to S3: {object_key}\")\n            return metadata",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/app/storage/s3.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 247,
          "context": "except Exception as e:\n            logger.error(f\"Failed to upload file to S3 {object_key}: {e}\")\n            metadata.status = FileStatus.ERROR",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/enterprise_performance.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 142,
          "context": "except Exception as e:\n                    logger.error(f\"Redis get error for {key}: {e}\")\n                    continue\n        \n        se",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/enterprise_performance.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 163,
          "context": "except Exception as e:\n                    logger.error(f\"Redis set error for {key}: {e}\")\n            \n            return success_count >",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/app/infrastructure/enterprise_performance.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 183,
          "context": "except Exception as e:\n                    logger.error(f\"Redis delete error for {key}: {e}\")\n        \n        return True\n    \n    async def",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/app/services/base_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 277,
          "context": "if key not in self.config:\n                self.logger.error(f\"Missing required configuration key: {key}\")\n                return False\n        \n        re",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/app/services/consolidated_auth_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 406,
          "context": "JWTError, ValueError, KeyError) as e:\n            logger.warning(f\"Token validation failed: {e}\")\n            return None\n        except Exception",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/app/services/consolidated_auth_service.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 409,
          "context": "n None\n        except Exception as e:\n            logger.error(f\"Token validation error: {e}\")\n            return None\n    \n    # =============",
          "severity": "HIGH"
        },
        {
          "file": "services/xorb-core/api/app/services/consolidated_auth_service.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 359,
          "context": "except Exception as e:\n            logger.error(f\"API key authentication error: {e}\")\n            return AuthenticationResult(",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_enhanced_capabilities.py",
          "pattern": "print\\s*\\(.*key",
          "line": 111,
          "context": "# Simulated quantum crypto operations\n    print(\"\ud83d\udd11 Generating quantum-safe key pairs...\")\n    await asyncio.sleep(1)\n    \n    qu",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_enhanced_capabilities.py",
          "pattern": "print\\s*\\(.*key",
          "line": 148,
          "context": "print(f\"\u2705 Quantum Security Operations:\")\n    print(f\"   \ud83d\udd10 Algorithm: {quantum_operations['key_generation']['algorithm']}\")\n    print(f\"   \u26a1 Key",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_enhanced_capabilities.py",
          "pattern": "print\\s*\\(.*key",
          "line": 149,
          "context": "_operations['key_generation']['algorithm']}\")\n    print(f\"   \u26a1 Key Gen Time: {quantum_operations['key_generation']['generation_time_ms']}ms\")\n    print",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_enhanced_capabilities.py",
          "pattern": "print\\s*\\(.*key",
          "line": 150,
          "context": "['key_generation']['generation_time_ms']}ms\")\n    print(f\"   \ud83d\udee1\ufe0f Security Level: {quantum_operations['key_generation']['security_level']}\")\n    print(f\"",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_enhanced_capabilities.py",
          "pattern": "print\\s*\\(.*key",
          "line": 344,
          "context": "advantage'].replace('_', ' ').title()}\")\n    \n    print(\"\\n\ud83c\udfaf Key Achievements:\")\n    print(\"   \u2705 Advanced AI threa",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/deploy_xorb_enterprise_platform.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 319,
          "context": "await asyncio.sleep(0.8)\n            \n            logger.info(\"\ud83d\udd10 Setting up key rotation\")\n            await asyncio.sleep(0.5)",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_unified_intelligence_platform.py",
          "pattern": "print\\s*\\(.*key",
          "line": 1163,
          "context": ")}{Colors.ENDC}\")\n    \n    # Key Achievements\n    print(f\"\\n{Colors.BOLD}\ud83c\udfc6 KEY ACHIEVEMENTS{Colors.ENDC}\")\n    for achievement i",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_strategic_enhancements.py",
          "pattern": "print\\s*\\(.*key",
          "line": 156,
          "context": "# Post-Quantum Cryptography\n            print(\"\ud83d\udd11 Demonstrating Post-Quantum Key Generation...\")\n            pq_crypto_results = a",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_strategic_enhancements.py",
          "pattern": "print\\s*\\(.*key",
          "line": 458,
          "context": "Kyber\", \"CRYSTALS-Dilithium\", \"SPHINCS+\"]\n        print(f\"   \ud83d\udd11 Generated post-quantum keys using {len(algorithms)} algorithms\")\n        pri",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_strategic_enhancements.py",
          "pattern": "print\\s*\\(.*key",
          "line": 693,
          "context": ").total_seconds():.1f} seconds\")\n        \n        print(f\"\\n\ud83d\ude80 KEY ACHIEVEMENTS:\")\n        print(\"   \u2705 Advanced AI O",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_production_red_team_capabilities.py",
          "pattern": "print\\s*\\(.*key",
          "line": 1041,
          "context": "rt_time).total_seconds():.1f}s\")\n        \n        print(f\"\\n\ud83d\ude80 Key Capabilities Demonstrated:\")\n        \n        # A",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demo_enhanced_ptaas_agent.py",
          "pattern": "print\\s*\\(.*token",
          "line": 349,
          "context": "\")\n            if not api_token:\n                print(\"\u274c API token required for real mode\")\n                return",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_principal_auditor_platform_assessment.py",
          "pattern": "print\\s*\\(.*key",
          "line": 735,
          "context": "nent.title()}: {score:.1f}/100\")\n        \n        print(f\"\\n\ud83d\udca1 Key Recommendations:\")\n        for rec in results.get",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_enhanced_autonomous_capabilities.py",
          "pattern": "print\\s*\\(.*key",
          "line": 619,
          "context": "await asyncio.sleep(2)\n        \n        print(\"\\n\ud83e\udde0 Key Features Demonstrated (Simulated):\")\n        prin",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_sophisticated_red_team_agent.py",
          "pattern": "print\\s*\\(.*key",
          "line": 532,
          "context": "if key_findings:\n                        print(f\"      \u2022 Key findings: {len(key_findings)}\")\n                        for finding",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_autonomous_red_team_production.py",
          "pattern": "print\\s*\\(.*key",
          "line": 939,
          "context": "O'}\")\n        \n        # Key Achievements\n        print(f\"\\n\ud83c\udfaf Key Achievements:\")\n        print(f\"   \u2705 Enterprise-g",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/deploy_enhanced_xorb_platform.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 369,
          "context": "\"\"\"Generate security keys and secrets\"\"\"\n        logger.info(\"\ud83d\udd11 Generating security keys...\")\n        \n        import secrets",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/deploy_enhanced_xorb_platform.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 394,
          "context": "crets_dir / \"JWT_SECRET\", 0o600)\n        \n        logger.info(\"\u2705 Security keys generated and stored\")\n    \n    async def _setup_quantum_safe_security(",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_principal_auditor_strategic_enhancements.py",
          "pattern": "print\\s*\\(.*key",
          "line": 253,
          "context": "mulated BB84 protocol\"\n        }\n        \n        print(\"\u2705 Kyber-768 key encapsulation: OPERATIONAL\")\n        print(\"\u2705 Dil",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_principal_auditor_strategic_enhancements.py",
          "pattern": "print\\s*\\(.*key",
          "line": 256,
          "context": "on-1024 compact signatures: OPERATIONAL\")\n        print(\"\u2705 Quantum key distribution simulation: ACTIVE\")",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_principal_auditor_strategic_enhancements.py",
          "pattern": "print\\s*\\(.*key",
          "line": 261,
          "context": "ical + Post-quantum encryption: ENABLED\")\n        print(\"\u2705 Quantum-safe key exchange: IMPLEMENTED\")\n        print(\"\u2705 Future-p",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_principal_auditor_strategic_enhancements.py",
          "pattern": "print\\s*\\(.*key",
          "line": 431,
          "context": "l_security_score\": 9.2\n        }\n        \n        print(\"\ud83c\udfaf Key Performance Indicators:\")\n        print(f\"\ud83d\udd0d Threa",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/principal_auditor_bug_fix_implementation.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 891,
          "context": "\"\"\"Fix secret exposure issues\"\"\"\n        logger.info(\"\ud83d\udd10 6.1 Fixing Secret Exposure\")\n        \n        try:\n            # Check for ha",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/principal_auditor_bug_fix_implementation.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 903,
          "context": "# Scan would happen here\n            logger.info(\"\ud83d\udd0d Scanning for hardcoded secrets\")\n            \n            fix = {",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/principal_auditor_bug_fix_implementation.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 913,
          "context": "except Exception as e:\n            logger.error(f\"\u274c Secret exposure fix failed: {e}\")\n    \n    async def fix_sql_injection(self):",
          "severity": "HIGH"
        },
        {
          "file": "demo/scripts/demonstrate_principal_auditor_enhancements.py",
          "pattern": "print\\s*\\(.*key",
          "line": 867,
          "context": "nt(f\"   \u2022 {capability}\")\n            \n            print(\"\\n\ud83d\udcc8 Key Performance Indicators:\")\n            if 'overall",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/simple_api_test.py",
          "pattern": "print\\s*\\(.*key",
          "line": 239,
          "context": "S PASSED! XORB API is fully functional.\")\n        print(\"\\n\ud83d\ude80 Key Features Validated:\")\n        print(\"  \u2705 Health m",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/real_api_test.py",
          "pattern": "print\\s*\\(.*token",
          "line": 68,
          "context": "roles=[Role.ADMIN]\n        )\n        print(\"\u2705 Authentication token generated\")\n        \n    def make_request(self, m",
          "severity": "HIGH"
        },
        {
          "file": "tools/utilities/run_ptaas.py",
          "pattern": "print\\s*\\(.*key",
          "line": 6,
          "context": "B PTaaS Engine\")\n    print(\"===============\")\n    print(f\"NVIDIA_API_KEY: {settings.NVIDIA_API_KEY[:5]}...\")\n    print(f\"OPENROUTER_API_KEY: {settin",
          "severity": "HIGH"
        },
        {
          "file": "tools/utilities/run_ptaas.py",
          "pattern": "print\\s*\\(.*key",
          "line": 7,
          "context": "A_API_KEY: {settings.NVIDIA_API_KEY[:5]}...\")\n    print(f\"OPENROUTER_API_KEY: {settings.OPENROUTER_API_KEY[:5]}...\")\n\nif __name__ == \"__main__\":\n    main()",
          "severity": "HIGH"
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "log.*\\..*[\"\\'].*password.*[\"\\']",
          "line": 82,
          "context": "dangerous_patterns = [\n                r'log.*\\..*[\"\\'].*password.*[\"\\']',\n                r'log.*\\..*[\"\\'].*token.*[\"\\']',",
          "severity": "HIGH"
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 83,
          "context": "g.*\\..*[\"\\'].*password.*[\"\\']',\n                r'log.*\\..*[\"\\'].*token.*[\"\\']',\n                r'log.*\\..*[\"\\'].*key.*[\"\\']',",
          "severity": "HIGH"
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 84,
          "context": "'log.*\\..*[\"\\'].*token.*[\"\\']',\n                r'log.*\\..*[\"\\'].*key.*[\"\\']',\n                r'log.*\\..*[\"\\'].*secret.*[\"\\']'",
          "severity": "HIGH"
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 85,
          "context": "r'log.*\\..*[\"\\'].*key.*[\"\\']',\n                r'log.*\\..*[\"\\'].*secret.*[\"\\']',\n                r'print\\s*\\(.*password',",
          "severity": "HIGH"
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 438,
          "context": "y_data['summary']['github_actions_issues']}\")\n    print(f\"  Potential secrets: {security_data['summary']['potential_secrets']}\")",
          "severity": "HIGH"
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "log.*\\..*\\{.*password.*\\}",
          "line": 90,
          "context": "r'print\\s*\\(.*secret',\n                r'log.*\\..*\\{.*password.*\\}',\n                r'f\".*{.*password.*}.*\"',",
          "severity": "HIGH"
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "f\".*{.*password.*}.*\"",
          "line": 91,
          "context": "r'log.*\\..*\\{.*password.*\\}',\n                r'f\".*{.*password.*}.*\"',\n                r'logger.*debug.*password',",
          "severity": "HIGH"
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "logger.*debug.*password",
          "line": 92,
          "context": "r'f\".*{.*password.*}.*\"',\n                r'logger.*debug.*password',\n                r'logger.*info.*token'",
          "severity": "HIGH"
        },
        {
          "file": "tools/audit/security_scanner.py",
          "pattern": "logger.*info.*token",
          "line": 93,
          "context": "r'logger.*debug.*password',\n                r'logger.*info.*token'\n            ]\n            \n            for patte",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts-archive/activate_attack_simulation.py",
          "pattern": "print\\s*\\(.*password",
          "line": 936,
          "context": "Internet-facing server (SERVER-DMZ-01)\")\n        print(\"   \ud83d\udd13 Credential: admin/Password123!\")\n        print(\"   \u2705 Status: SUCCESSFUL BREA",
          "severity": "HIGH"
        },
        {
          "file": "tools/validation/test_deduplication.py",
          "pattern": "print\\s*\\(.*password",
          "line": 17,
          "context": "that password contexts are now centralized\"\"\"\n    print(\"Testing password context consolidation...\")\n    \n    try:",
          "severity": "HIGH"
        },
        {
          "file": "tools/validation/test_deduplication.py",
          "pattern": "print\\s*\\(.*password",
          "line": 28,
          "context": "_password(test_password, hashed)\n        \n        print(f\"\u2705 Password hashing works: {verified}\")\n        \n        # Te",
          "severity": "HIGH"
        },
        {
          "file": "tools/validation/test_deduplication.py",
          "pattern": "print\\s*\\(.*password",
          "line": 32,
          "context": "validate_password_strength(test_password)\n        print(f\"\u2705 Password strength validation: {strength['strength']}\")",
          "severity": "HIGH"
        },
        {
          "file": "tools/validation/test_deduplication.py",
          "pattern": "print\\s*\\(.*password",
          "line": 37,
          "context": "True\n        \n    except Exception as e:\n        print(f\"\u274c Password context test failed: {e}\")\n        return False",
          "severity": "HIGH"
        },
        {
          "file": "tools/validation/validate_production_database_implementation.py",
          "pattern": "print\\s*\\(.*token",
          "line": 279,
          "context": "repository operations\"\"\"\n        try:\n            print(\"   Testing Auth Token Repository...\")\n            \n            # Create",
          "severity": "HIGH"
        },
        {
          "file": "tools/validation/validate_production_database_implementation.py",
          "pattern": "print\\s*\\(.*token",
          "line": 303,
          "context": "assert revoked is True\n            \n            print(\"   \u2705 Auth Token Repository - All operations successful\")",
          "severity": "HIGH"
        },
        {
          "file": "tools/validation/validate_production_database_implementation.py",
          "pattern": "print\\s*\\(.*token",
          "line": 307,
          "context": "except Exception as e:\n            print(f\"   \u274c Auth Token Repository error: {e}\")\n    \n    async def _test_",
          "severity": "HIGH"
        },
        {
          "file": "tools/validation/test_containers.py",
          "pattern": "print\\s*\\(.*key",
          "line": 107,
          "context": "if exposed_ports:\n                    print(f\"  \u2705 {service}: Exposes ports {list(exposed_ports.keys())}\")\n                \n                # Check l",
          "severity": "HIGH"
        },
        {
          "file": "tools/validation/test_config_management.py",
          "pattern": "print\\s*\\(.*key",
          "line": 182,
          "context": "onfiguration export works correctly\")\n            print(f\"  JSON keys: {len(json_data.keys())}\")\n            print(f\"  ENV vars: {len(env_e",
          "severity": "HIGH"
        },
        {
          "file": "tools/validation/test_config_management.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 213,
          "context": "config = manager.get_config()\n            print(\"  \u2705 Production configuration loaded (secrets available)\")\n        except Exception as e:",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/orchestration/enterprise_deployment_orchestrator.py",
          "pattern": "log.*\\..*[\"\\'].*secret.*[\"\\']",
          "line": 1388,
          "context": "y Vault cluster for secrets management\"\"\"\n        logger.info(\"\ud83d\udd10 Deploying Vault secrets management cluster\")\n        # Implementation would go here\n        r",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/deployment/deploy_rl_enhanced_xorb_platform.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 576,
          "context": "sub_status in status.items():\n                    logger.info(f\"    {sub_key}: {sub_status}\")\n            else:\n                logger.info(f\"",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/generate_secrets.py",
          "pattern": "print\\s*\\(.*password",
          "line": 137,
          "context": "print(\"\\n\ud83c\udfaf Security Hardening Summary:\")\n    print(\"   \u2705 Strong passwords generated (32+ character complexity)\")\n    print",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/generate_secrets.py",
          "pattern": "print\\s*\\(.*key",
          "line": 139,
          "context": "rint(\"   \u2705 JWT secrets with 64-byte entropy\")\n    print(\"   \u2705 Fernet encryption keys for data protection\")\n    print(\"   \u2705 Separate c",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/generate_secrets.py",
          "pattern": "print\\s*\\(.*key",
          "line": 145,
          "context": "onment file\")\n\n    print(\"\\n\u26a0\ufe0f  Next Steps:\")\n    print(\"   1. Replace placeholder API keys with real values\")\n    print(\"   2. Generate TLS",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/generate_secrets.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 109,
          "context": "ml\", \"w\") as f:\n        f.write(k8s_secrets)\n\n    print(\"\u2705 Kubernetes secrets written to kubernetes/secrets/production-secrets.yaml\")\n\ndef write_docker_env(secrets_config) ->",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/generate_secrets.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 124,
          "context": "\"Generate and write all production secrets\"\"\"\n    print(\"\ud83d\udd12 Generating production-grade secrets...\")\n\n    # Create directories\n    os.makedirs(\"",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/generate_secrets.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 138,
          "context": "swords generated (32+ character complexity)\")\n    print(\"   \u2705 JWT secrets with 64-byte entropy\")\n    print(\"   \u2705 Fernet en",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/generate_secrets.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 141,
          "context": "\"   \u2705 Separate credentials for each service\")\n    print(\"   \u2705 Production Kubernetes secrets manifest\")\n    print(\"   \u2705 Secure Docker environ",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/generate_secrets.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 147,
          "context": "2. Generate TLS certificates for Temporal\")\n    print(\"   3. Apply secrets to Kubernetes cluster\")\n    print(\"   4. Update",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_security_hardening.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 500,
          "context": "except Exception as e:\n            logger.error(f\"Failed to create access token: {e}\")\n            raise e\n    \n    async def validate_",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_security_hardening.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 537,
          "context": "except jwt.ExpiredSignatureError:\n            logger.warning(\"Token expired\")\n            return None\n        except jwt.Inval",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_security_hardening.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 540,
          "context": "except jwt.InvalidTokenError:\n            logger.warning(\"Invalid token\")\n            return None\n        except Exception",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_security_hardening.py",
          "pattern": "log.*\\..*[\"\\'].*token.*[\"\\']",
          "line": 543,
          "context": "n None\n        except Exception as e:\n            logger.error(f\"Token validation failed: {e}\")\n            return None\n    \n    async def autho",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_security_hardening.py",
          "pattern": "print\\s*\\(.*token",
          "line": 1106,
          "context": ")\n        \n        if admin_token:\n            print(f\"\u2705 Admin authenticated: {admin_token.token_id}\")\n            \n            # Test authorizati",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_security_hardening.py",
          "pattern": "print\\s*\\(.*token",
          "line": 1114,
          "context": "if validated_principal:\n                print(\"\u2705 Token validated\")\n                \n                # Te",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_security_hardening.py",
          "pattern": "print\\s*\\(.*token",
          "line": 1150,
          "context": "cipals: {status['principals']['total']}\")\n        print(f\"- Active Tokens: {status['authentication']['active_tokens']}\")\n        print(f\"- Security Policies: {statu",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/final-deployment-status.py",
          "pattern": "print\\s*\\(.*key",
          "line": 279,
          "context": "replace('_', ' ').title()}: {endpoint}\")\n    \n    print(f\"\\n\ud83c\udfc6 Key Achievements:\")\n    for achievement in summary['k",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/security_config_validator.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 243,
          "context": "potentially exposed secrets using git\"\"\"\n        print(\"\ud83d\udd75\ufe0f Checking for exposed secrets...\")\n        \n        try:\n            # Use git",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/post_quantum_cryptography_integration.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 434,
          "context": "prehensive post-quantum key management\"\"\"\n        logger.info(\"\ud83d\udd11 Implementing Key Management System...\")\n        \n        key_management = {",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/post_quantum_cryptography_integration.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 509,
          "context": "y': 0.89\n            }\n        }\n        \n        logger.info(f\"  \ud83d\udd11 Key management system managing {key_management['key_management_metrics']['total_keys_managed']} quantum keys\")\n        return key_management\n    \n    async def",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/post_quantum_cryptography_integration.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 1146,
          "context": "oyment Duration: {duration:.1f} seconds\")\n        logger.info(f\"\ud83d\udd10 Quantum Key Pairs: {len(self.key_store)}\")\n        logger.info(f\"\ud83d\udd17 Hybrid Operations: {len(",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_performance_optimizer.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 588,
          "context": "ze_bytes / (1024 * 1024)\n            \n            logger.debug(f\"Cached value for key: {key}\")\n            \n        except Exception as e:",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_performance_optimizer.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 608,
          "context": "evictions'] += 1\n                \n                logger.debug(f\"Evicted cache entry: {oldest_key}\")\n                \n        except Exception as e:",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_enhanced_audit_system.py",
          "pattern": "print\\s*\\(.*key",
          "line": 875,
          "context": "if isinstance(value, dict):\n                print(f\"  {key}:\")\n                for k, v in value.items():",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_enhanced_audit_system.py",
          "pattern": "print\\s*\\(.*key",
          "line": 879,
          "context": "\"    {k}: {v}\")\n            else:\n                print(f\"  {key}: {value}\")\n        \n        # System shutdown",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_ptaas_ai_enhanced_engine.py",
          "pattern": "print\\s*\\(.*key",
          "line": 1311,
          "context": "key findings\n        if scan_results:\n            print(\"\\n\ud83d\udea8 KEY FINDINGS:\")\n            critical_findings = [f fo",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/demo_learning_integration.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 373,
          "context": "\")\n        \n        # Display key metrics\n        logger.info(\"\ud83d\udcca Key Performance Metrics:\")\n        logger.info(f\"  \ud83e\udd16 Active Agents: {report",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/website_launch_orchestrator.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 645,
          "context": ": '340%'\n            }\n        }\n        \n        logger.info(f\"  \ud83d\udd0d SEO optimization targeting {seo_optimization['seo_metrics']['target_keywords']} keywords\")\n        return seo_optimization\n    \n    async d",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/risk_analysis_mitigation_plan.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 740,
          "context": "isplay key findings\n    logger.info(\"=\" * 90)\n    logger.info(\"\ud83d\udccb KEY RISK ANALYSIS FINDINGS:\")\n    logger.info(f\"  \ud83c\udfaf Total Risk Categories: {le",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_enhanced_monitoring.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 378,
          "context": "full_metric_name, value)\n            \n            logger.debug(f\"Added custom metric: {custom_key} = {value}\")\n            \n        except Exception as e:",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_enhanced_monitoring.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 700,
          "context": "if not self.grafana_api_key:\n                logger.warning(\"Grafana API key not configured\")\n                return False",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/quantum_resistant_cryptography.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 88,
          "context": "\"\"\"Generate master cryptographic keys\"\"\"\n        logger.info(\"\ud83d\udd11 Generating master cryptographic keys...\")\n        \n        # Generate post-quantum key pai",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/quantum_resistant_cryptography.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 101,
          "context": "rs[\"master_hybrid\"] = hybrid_key\n        \n        logger.info(f\"\u2705 Generated {len(self.key_pairs)} master key pairs\")\n        \n    async def _generate_pq_key_pair(sel",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/quantum_resistant_cryptography.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 589,
          "context": "\"Setup automatic key rotation schedule\"\"\"\n        logger.info(\"\ud83d\udd04 Setting up key rotation schedule...\")\n        \n        # Schedule key rotation based o",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/quantum_resistant_cryptography.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 601,
          "context": "elf.rotation_schedule = rotation_schedule\n        logger.info(\"\u2705 Key rotation schedule configured\")\n        \n    async def rotate_keys(self):",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/quantum_resistant_cryptography.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 605,
          "context": "\"\"\"Perform automatic key rotation\"\"\"\n        logger.info(\"\ud83d\udd04 Performing key rotation...\")\n        \n        rotated_count = 0\n        curre",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/quantum_resistant_cryptography.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 631,
          "context": "rotated_count += 1\n                logger.info(f\"\ud83d\udd04 Rotated key: {old_key_id} -> {new_key_id}\")\n                \n        logger.info(f\"\u2705 Key rot",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/quantum_resistant_cryptography.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 633,
          "context": "ey_id} -> {new_key_id}\")\n                \n        logger.info(f\"\u2705 Key rotation complete: {rotated_count} keys rotated\")\n        return rotated_count\n\n# FastAPI applicat",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/quantum_resistant_cryptography.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 837,
          "context": "keys()\n        except Exception as e:\n            logger.error(f\"Background key rotation error: {e}\")\n\nif __name__ == \"__main__\":\n    print(\"\ud83d\udd10 XORB Qu",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/quantum_resistant_cryptography.py",
          "pattern": "print\\s*\\(.*key",
          "line": 842,
          "context": "uantum cryptographic algorithms initialized\")\n    print(\"\ud83d\udd04 Automatic key rotation and hybrid encryption ready\")\n    print(",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/advanced_ml_performance_tuner.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 664,
          "context": "Tuning Duration: {duration:.1f} seconds\")\n        logger.info(f\"\ud83c\udfaf Optimization Categories: {len([k for k in tuning_plan.keys() if k not in ['tuning_id', 'performance_impact']])}\")\n        logger.info(f\"\ud83d\ude80 Deployment Strategy: {le",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_ethical_redteam_simulator.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 430,
          "context": "aints)\n            }, f, indent=2)\n\n        audit_logger.info(f\"QWEN3_MODULES_DEPLOYED: {list(qwen3_modules.keys())}\")\n        logger.info(\"\u2705 Qwen3 modules deployed wi",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/gameday_orchestrator.py",
          "pattern": "print\\s*\\(.*key",
          "line": 621,
          "context": "if report[\"lessons_learned\"]:\n            print(\"\\n\ud83d\udca1 Key Lessons Learned:\")\n            for lesson in repo",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/advanced_security_hardening.py",
          "pattern": "print\\s*\\(.*key",
          "line": 1169,
          "context": "Admin Key\", [\"admin\", \"assess\", \"remediate\"])\n    print(f\"Admin API Key: {admin_key['api_key']}\")\n    \n    uvicorn.run(app, host=\"0.0.0.0\", po",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/test_llm_agent_integration.py",
          "pattern": "print\\s*\\(.*key",
          "line": 146,
          "context": "successfully\"))\n            else:\n                print(f\"      \u274c Missing metrics keys: {missing_keys}\")\n                self.test_results.append((\"ll",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/test_llm_agent_integration.py",
          "pattern": "print\\s*\\(.*key",
          "line": 398,
          "context": "s successful\"))\n            else:\n                print(f\"      \u274c Missing specialized metrics: {missing_keys}\")\n                self.test_results.append((\"se",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_resilience_unified_deployment.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 497,
          "context": "else:\n                        logger.warning(f\"Skipping steps with unsatisfied dependencies: {list(remaining_steps.keys())}\")\n                        # Mark remaining steps a",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_automated_recovery_system.py",
          "pattern": "print\\s*\\(.*key",
          "line": 987,
          "context": "for key, value in stats.items():\n            print(f\"  {key}: {value}\")\n        \n        print(\"\\n\u2705 Recovery",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_error_handling_framework.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 423,
          "context": ".current_half_open_calls = 0\n                self.logger.info(f\"Circuit breaker transitioning to HALF_OPEN: {service_key}\")\n            else:\n                # Circuit is o",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_error_handling_framework.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 443,
          "context": "cb.failure_count = 0\n                    self.logger.info(f\"Circuit breaker closed: {service_key}\")\n                \n                return True",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_error_handling_framework.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 462,
          "context": "cs[\"circuit_breaker_trips\"] += 1\n            self.logger.warning(f\"Circuit breaker opened: {service_key}\")\n\n    def _enable_graceful_degradation(self, acti",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_error_handling_framework.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 472,
          "context": "= action.handler(error_context)\n            self.logger.info(f\"Graceful degradation enabled: {degradation_key}\")\n            return result\n        except Excepti",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_error_handling_framework.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 496,
          "context": "Threshold for pattern detection\n            self.logger.warning(f\"Recurring error pattern detected: {pattern_key}\")\n            # Could trigger additional monitorin",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_error_handling_framework.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 541,
          "context": "rent_half_open_calls = 0\n                    self.logger.info(f\"Circuit breaker auto-transitioning to HALF_OPEN: {service_key}\")\n\n    def get_error_summary(self) -> Dict[str, An",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/xorb_error_handling_framework.py",
          "pattern": "log.*\\..*[\"\\'].*key.*[\"\\']",
          "line": 574,
          "context": "ve_degradations[degradation_key]\n            self.logger.info(f\"Degradation cleared: {degradation_key}\")\n\n# Decorator for automatic error handling\ndef xo",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/qwen3_ultimate_enhancement_suite.py",
          "pattern": "print\\s*\\(.*key",
          "line": 522,
          "context": "ndswith(\"_rate\"):\n                                print(f\"   {key.replace('_', ' ').title()}: {value:.1%}\")",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/qwen3_ultimate_enhancement_suite.py",
          "pattern": "print\\s*\\(.*key",
          "line": 524,
          "context": "else:\n                                print(f\"   {key.replace('_', ' ').title()}: {value:.3f}\")",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/qwen3_ultimate_enhancement_suite.py",
          "pattern": "print\\s*\\(.*key",
          "line": 526,
          "context": "else:\n                            print(f\"   {key.replace('_', ' ').title()}: {value}\")\n\n        pr",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/qwen3_enhancement_showcase.py",
          "pattern": "print\\s*\\(.*key",
          "line": 223,
          "context": "isinstance(value, list):\n                        print(f\"   {key.title()}: {', '.join(value)}\")",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/qwen3_enhancement_showcase.py",
          "pattern": "print\\s*\\(.*key",
          "line": 225,
          "context": "else:\n                        print(f\"   {key.title()}: {value}\")\n\n            await asyncio.sl",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/import_enhanced_dashboards.py",
          "pattern": "print\\s*\\(.*password",
          "line": 151,
          "context": "s:\")\n        print(f\"   Username: admin\")\n        print(f\"   Password: xorb_rl_admin_2025\")\n        print()",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/security_scanner.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 31,
          "context": "for hardcoded secrets and credentials\"\"\"\n        print(\"\ud83d\udd0d Scanning for hardcoded secrets...\")\n\n        findings = []\n\n        # Patterns",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/security_scanner.py",
          "pattern": "print\\s*\\(.*secret",
          "line": 82,
          "context": "\"  \u26a0\ufe0f  Error scanning {file_path}: {e}\")\n\n        print(f\"  Found {len(findings)} potential secrets\")\n        return findings\n\n    def scan_insecure",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/security_hardening_system.py",
          "pattern": "print\\s*\\(.*key",
          "line": 823,
          "context": "print(f\"\u2705 SSL Certificate: {cert_path}\")\n        print(f\"\u2705 Private Key: {key_path}\")\n    except Exception as e:\n        print(",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/llm_cognitive_cortex_service.py",
          "pattern": "print\\s*\\(.*key",
          "line": 61,
          "context": "ORB_AUDIT_KEY'] = 'xorb-default-key-2025'\n        print(\"Using default audit encryption key. Set XORB_AUDIT_KEY for production.\")\n\n\nasync def health_check_loop()",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/demo_agent_orchestration.py",
          "pattern": "print\\s*\\(.*key",
          "line": 444,
          "context": "onitoring and observability integrated\")\n\n        print(\"\\n\ud83c\udfaf Key Features Showcased:\")\n        print(\"   \ud83e\udd16 Agent T",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/test_llm_cortex_integration.py",
          "pattern": "print\\s*\\(.*key",
          "line": 405,
          "context": "if not os.getenv('OPENROUTER_API_KEY'):\n        print(\"\u26a0\ufe0f  OPENROUTER_API_KEY not set - some tests may fail\")\n    \n    if not o",
          "severity": "HIGH"
        },
        {
          "file": "tools/scripts/utilities/test_llm_cortex_integration.py",
          "pattern": "print\\s*\\(.*key",
          "line": 408,
          "context": "if not os.getenv('NVIDIA_API_KEY'):\n        print(\"\u26a0\ufe0f  NVIDIA_API_KEY not set - some tests may fail\")\n    \n    tester =",
          "severity": "HIGH"
        }
      ],
      "compliance_status": "FAIL"
    }
  },
  "static_analysis": {
    "bandit": {
      "error": "Bandit scan failed or not available",
      "results": []
    },
    "ruff": []
  },
  "infrastructure_security": {
    "dockerfile_issues": [
      {
        "file": "Dockerfile.unified",
        "line": 105,
        "issue": "Running as root user - security risk",
        "severity": "HIGH",
        "pattern": "USER\\s+root",
        "context": "FROM development as security\n\nUSER root\n\n# Install security scanning"
      },
      {
        "file": "devops/best-practices/Dockerfile.multi-stage",
        "line": 104,
        "issue": "Running as root user - security risk",
        "severity": "HIGH",
        "pattern": "USER\\s+root",
        "context": "stall security scanning tools\nUSER root\nRUN pip install --no-cache-di"
      },
      {
        "file": "infra/red-team/Dockerfile",
        "line": 1,
        "issue": "Using :latest tag - should pin specific versions",
        "severity": "MEDIUM",
        "pattern": "FROM.*:latest",
        "context": "FROM kalilinux/kali-rolling:latest\n\n# Install real penetration t"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.unified-api",
        "line": 88,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "redis_password = os.getenv('REDIS_PASSWORD', 'xorb_redis_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.unified-api",
        "line": 102,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "postgres_password = os.getenv('POSTGRES_PASSWORD', 'xorb_secure_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.researcher-api",
        "line": 58,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "redis_password = os.getenv('REDIS_PASSWORD', 'xorb_redis_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.researcher-api",
        "line": 72,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "postgres_password = os.getenv('POSTGRES_PASSWORD', 'xorb_secure_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.researcher-api",
        "line": 88,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "neo4j_password = os.getenv('NEO4J_PASSWORD', 'xorb_graph_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.company-api",
        "line": 58,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "redis_password = os.getenv('REDIS_PASSWORD', 'xorb_redis_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.company-api",
        "line": 72,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "postgres_password = os.getenv('POSTGRES_PASSWORD', 'xorb_secure_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.company-api",
        "line": 88,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "neo4j_password = os.getenv('NEO4J_PASSWORD', 'xorb_graph_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.ptaas-core",
        "line": 57,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "redis_password = os.getenv('REDIS_PASSWORD', 'xorb_redis_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.ptaas-core",
        "line": 71,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "postgres_password = os.getenv('POSTGRES_PASSWORD', 'xorb_secure_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.ptaas-core",
        "line": 87,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "neo4j_password = os.getenv('NEO4J_PASSWORD', 'xorb_graph_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.analytics",
        "line": 54,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "redis_password = os.getenv('REDIS_PASSWORD', 'xorb_redis_2024')"
      },
      {
        "file": "infra/dockerfiles/Dockerfile.analytics",
        "line": 68,
        "issue": "Hardcoded password in environment - security risk",
        "severity": "HIGH",
        "pattern": "ENV.*PASSWORD",
        "context": "postgres_password = os.getenv('POSTGRES_PASSWORD', 'xorb_secure_2024')"
      }
    ],
    "github_actions": [
      {
        "file": ".github/workflows/security-scan.yml",
        "line": 271,
        "issue": "Using @master branch - should pin to specific SHA or tag",
        "severity": "MEDIUM",
        "context": "- name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: ${{ env.REGIST"
      },
      {
        "file": ".github/workflows/security-scan.yml",
        "line": 284,
        "issue": "Using @master branch - should pin to specific SHA or tag",
        "severity": "MEDIUM",
        "context": "- name: Run Trivy config scan\n        uses: aquasecurity/trivy-action@master\n        with:\n          scan-type: 'config'"
      },
      {
        "file": ".github/workflows/security-scan.yml",
        "line": 48,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "ction@v2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          config-path: .gitleaks"
      },
      {
        "file": ".github/workflows/security-scan.yml",
        "line": 92,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "xss\n        env:\n          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}\n      \n      # License compliance\n      - name"
      },
      {
        "file": ".github/workflows/security-scan.yml",
        "line": 227,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "name: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      \n      - name: Extract metadata"
      },
      {
        "file": ".github/workflows/production-security-pipeline.yml",
        "line": 170,
        "issue": "Using @master branch - should pin to specific SHA or tag",
        "severity": "MEDIUM",
        "context": "- name: Run Snyk vulnerability scan\n        uses: snyk/actions/node@master\n        if: hashFiles('services/ptaas/web/package"
      },
      {
        "file": ".github/workflows/production-security-pipeline.yml",
        "line": 173,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "on') != ''\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --json-file-outp"
      },
      {
        "file": ".github/workflows/ci.yml",
        "line": 146,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "ction@v2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: Check ADR-002 compliance"
      },
      {
        "file": ".github/workflows/devsecops-pipeline.yml",
        "line": 207,
        "issue": "Using @master branch - should pin to specific SHA or tag",
        "severity": "MEDIUM",
        "context": "- name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: 'xorb-api:scan"
      },
      {
        "file": ".github/workflows/devsecops-pipeline.yml",
        "line": 433,
        "issue": "Potential code injection via expression",
        "severity": "HIGH",
        "context": "y\" > security-summary.md\n          echo \"Pipeline run: ${{ github.run_id }}\" >> security-summary.md\n          echo \"Commit: $"
      },
      {
        "file": ".github/workflows/devsecops-pipeline.yml",
        "line": 60,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "me == 'push'\n        with:\n          api-key: ${{ secrets.FOSSA_API_KEY }}\n        continue-on-error: true\n      \n      #"
      },
      {
        "file": ".github/workflows/devsecops-pipeline.yml",
        "line": 189,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "name: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      \n      - name: Build container for scann"
      },
      {
        "file": ".github/workflows/infrastructure-security.yml",
        "line": 32,
        "issue": "Using @master branch - should pin to specific SHA or tag",
        "severity": "MEDIUM",
        "context": "ing\n      - name: Run Checkov IaC scanner\n        uses: bridgecrewio/checkov-action@master\n        with:\n          directory: infra/"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 77,
        "issue": "Using @master branch - should pin to specific SHA or tag",
        "severity": "MEDIUM",
        "context": "t\n\n      - name: Security Dependency Scan\n        uses: snyk/actions/node@master\n        continue-on-error: true\n        env:"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 104,
        "issue": "Using @master branch - should pin to specific SHA or tag",
        "severity": "MEDIUM",
        "context": "analyze@v2\n\n      - name: SonarCloud Scan\n        uses: SonarSource/sonarcloud-github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets."
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 315,
        "issue": "Using @master branch - should pin to specific SHA or tag",
        "severity": "MEDIUM",
        "context": "- name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: 'ptaas-test:${"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 80,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "rror: true\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-thres"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 106,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "n@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 107,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "ecrets.GITHUB_TOKEN }}\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n        with:\n          projectBaseDir: PTaaS"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 370,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "name: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: me"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 476,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.A"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 477,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "SS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-west-2\n\n      - name:"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 510,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "ul'\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n\n  # Production Deployment\n  deploy-production"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 531,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}\n          aws-secret-access-key: ${{ secrets.A"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 532,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "Y_ID_PROD }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}\n          aws-region: us-west-2\n\n      - name:"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 577,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "POST \\\n            -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Content-Type: application/j"
      },
      {
        "file": ".github/workflows/enterprise-cicd.yml",
        "line": 593,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "om'\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n\n  # Security Compliance Report\n  compliance-r"
      },
      {
        "file": ".github/workflows/security-push-protection.yml",
        "line": 15,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "ction@v2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          args: detect --source"
      },
      {
        "file": ".github/workflows/best-practices-cicd.yml",
        "line": 48,
        "issue": "Using @master branch - should pin to specific SHA or tag",
        "severity": "MEDIUM",
        "context": "- name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          scan-type: 'fs'"
      },
      {
        "file": ".github/workflows/best-practices-cicd.yml",
        "line": 332,
        "issue": "Using @master branch - should pin to specific SHA or tag",
        "severity": "MEDIUM",
        "context": "Run Trivy vulnerability scanner on image\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: ${{ env.REGIST"
      },
      {
        "file": ".github/workflows/best-practices-cicd.yml",
        "line": 306,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "name: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: me"
      },
      {
        "file": ".github/workflows/enterprise-deployment.yml",
        "line": 197,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "name: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: me"
      },
      {
        "file": ".github/workflows/enterprise-deployment.yml",
        "line": 270,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.A"
      },
      {
        "file": ".github/workflows/enterprise-deployment.yml",
        "line": 271,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "SS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n\n      - name:"
      },
      {
        "file": ".github/workflows/enterprise-deployment.yml",
        "line": 352,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.A"
      },
      {
        "file": ".github/workflows/enterprise-deployment.yml",
        "line": 353,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "SS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n\n      - name:"
      },
      {
        "file": ".github/workflows/enterprise-deployment.yml",
        "line": 417,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "ly'\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n\n  post-deployment:\n    name: Post-Deployment"
      },
      {
        "file": ".github/workflows/enterprise-deployment.yml",
        "line": 429,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "h new deployment info\n          curl -X POST \"${{ secrets.GRAFANA_URL }}/api/dashboards/db\" \\\n            -H \"Authoriza"
      },
      {
        "file": ".github/workflows/enterprise-deployment.yml",
        "line": 430,
        "issue": "Direct secret usage - ensure proper handling",
        "severity": "LOW",
        "context": "s/db\" \\\n            -H \"Authorization: Bearer ${{ secrets.GRAFANA_TOKEN }}\" \\\n            -H \"Content-Type: application/j"
      }
    ]
  },
  "supply_chain": [
    {
      "file": "requirements.txt",
      "line": 141,
      "issue": "Unpinned dependency: catboost",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements.txt",
      "line": 181,
      "issue": "Unpinned dependency: torchaudio",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements.txt",
      "line": 188,
      "issue": "Unpinned dependency: xorb-platform",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements.txt",
      "line": 115,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "requirements.txt",
      "line": 116,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "requirements.txt",
      "line": 117,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "requirements.txt",
      "line": 118,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "requirements-security.txt",
      "line": 1,
      "issue": "Unpinned dependency: nmap",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements-security.txt",
      "line": 2,
      "issue": "Unpinned dependency: python-metasploit",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements-security.txt",
      "line": 3,
      "issue": "Unpinned dependency: sqlmap",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements-security.txt",
      "line": 4,
      "issue": "Unpinned dependency: nikto",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements-security.txt",
      "line": 5,
      "issue": "Unpinned dependency: hydra",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements-security.txt",
      "line": 6,
      "issue": "Unpinned dependency: openvas-lib",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements-security.txt",
      "line": 7,
      "issue": "Unpinned dependency: aws-prowler",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements-security.txt",
      "line": 8,
      "issue": "Unpinned dependency: faraday-client",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-execution.txt",
      "line": 1,
      "issue": "Unpinned dependency: aiofiles",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-execution.txt",
      "line": 2,
      "issue": "Unpinned dependency: aioredis",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-execution.txt",
      "line": 3,
      "issue": "Unpinned dependency: aiohttp",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-execution.txt",
      "line": 4,
      "issue": "Unpinned dependency: playwright",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-execution.txt",
      "line": 5,
      "issue": "Unpinned dependency: requests",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-execution.txt",
      "line": 6,
      "issue": "Unpinned dependency: lxml",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-execution.txt",
      "line": 7,
      "issue": "Unpinned dependency: beautifulsoup4",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 1,
      "issue": "Unpinned dependency: numpy",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 2,
      "issue": "Unpinned dependency: pandas",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 3,
      "issue": "Unpinned dependency: scikit-learn",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 4,
      "issue": "Unpinned dependency: scipy",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 5,
      "issue": "Unpinned dependency: torch",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 6,
      "issue": "Unpinned dependency: torchvision",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 7,
      "issue": "Unpinned dependency: torchaudio",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 8,
      "issue": "Unpinned dependency: transformers",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 9,
      "issue": "Unpinned dependency: openai",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 10,
      "issue": "Unpinned dependency: xgboost",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 11,
      "issue": "Unpinned dependency: lightgbm",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 12,
      "issue": "Unpinned dependency: catboost",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 13,
      "issue": "Unpinned dependency: optuna",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "requirements/requirements-ml.txt",
      "line": 14,
      "issue": "Unpinned dependency: mlflow",
      "severity": "MEDIUM",
      "type": "supply_chain"
    },
    {
      "file": "infrastructure/cyber-range/orchestrator/requirements.txt",
      "line": 46,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "infrastructure/cyber-range/orchestrator/requirements.txt",
      "line": 47,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "infrastructure/cyber-range/orchestrator/requirements.txt",
      "line": 48,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "pyproject.toml",
      "line": 119,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "pyproject.toml",
      "line": 120,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "pyproject.toml",
      "line": 121,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "pyproject.toml",
      "line": 122,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "pyproject.toml",
      "line": 210,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "src/api/pyproject.toml",
      "line": 66,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "src/api/pyproject.toml",
      "line": 67,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "src/api/pyproject.toml",
      "line": 68,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "src/api/pyproject.toml",
      "line": 79,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "src/api/pyproject.toml",
      "line": 80,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "src/api/pyproject.toml",
      "line": 81,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "src/api/pyproject.toml",
      "line": 199,
      "issue": "Development dependency in production: Pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "src/api/pyproject.toml",
      "line": 200,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "src/api/pyproject.toml",
      "line": 239,
      "issue": "Development dependency in production: debug",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "src/api/pyproject.toml",
      "line": 240,
      "issue": "Development dependency in production: DEBUG",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "services/xorb-core/api/pyproject.toml",
      "line": 66,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "services/xorb-core/api/pyproject.toml",
      "line": 67,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "services/xorb-core/api/pyproject.toml",
      "line": 68,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "services/xorb-core/api/pyproject.toml",
      "line": 79,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "services/xorb-core/api/pyproject.toml",
      "line": 80,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "services/xorb-core/api/pyproject.toml",
      "line": 81,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "services/xorb-core/api/pyproject.toml",
      "line": 199,
      "issue": "Development dependency in production: Pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "services/xorb-core/api/pyproject.toml",
      "line": 200,
      "issue": "Development dependency in production: pytest",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "services/xorb-core/api/pyproject.toml",
      "line": 239,
      "issue": "Development dependency in production: debug",
      "severity": "LOW",
      "type": "supply_chain"
    },
    {
      "file": "services/xorb-core/api/pyproject.toml",
      "line": 240,
      "issue": "Development dependency in production: DEBUG",
      "severity": "LOW",
      "type": "supply_chain"
    }
  ],
  "secrets_scan": [
    {
      "file": "conftest.py",
      "line": 207,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password\": \"SecureAdminPassword123!\""
    },
    {
      "file": "src/api/tests/test_security_enhancements.py",
      "line": 97,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"SecurePassword123!\""
    },
    {
      "file": "src/api/tests/test_security_enhancements.py",
      "line": 112,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"SecurePassword123!\""
    },
    {
      "file": "src/api/tests/test_security_enhancements.py",
      "line": 128,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"SecurePassword123!\""
    },
    {
      "file": "src/api/tests/test_security_enhancements.py",
      "line": 129,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"WrongPassword456!\""
    },
    {
      "file": "src/api/tests/test_security_enhancements.py",
      "line": 173,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"password123\""
    },
    {
      "file": "src/api/tests/test_security_enhancements.py",
      "line": 174,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"SecureP@ssw0rd2024!\""
    },
    {
      "file": "src/api/tests/test_security_enhancements.py",
      "line": 566,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"SecurePassword123!\""
    },
    {
      "file": "src/api/tests/test_production_security.py",
      "line": 69,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password=\"correct_password\""
    },
    {
      "file": "src/api/tests/test_production_security.py",
      "line": 99,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password=\"wrong_password\""
    },
    {
      "file": "src/api/tests/test_production_security.py",
      "line": 121,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password=\"any_password\""
    },
    {
      "file": "src/api/app/integrations/enterprise_connector.py",
      "line": 680,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password\": \"your-password\""
    },
    {
      "file": "src/api/app/core/production_config.py",
      "line": 215,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password\": \"DATABASE_PASSWORD\""
    },
    {
      "file": "src/api/app/core/production_config.py",
      "line": 216,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password\": \"REDIS_PASSWORD\""
    },
    {
      "file": "src/api/app/services/production_security_scanner_service.py",
      "line": 1069,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password\": \"password\""
    },
    {
      "file": "src/api/app/services/production_security_scanner_service.py",
      "line": 1070,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password\": \"anonymous\""
    },
    {
      "file": "src/api/app/services/production_security_scanner_service.py",
      "line": 1072,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password\": \"postgres\""
    },
    {
      "file": "src/api/app/services/secure_authentication_service.py",
      "line": 628,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"DevPassword123\""
    },
    {
      "file": "src/api/app/services/production_authentication_service.py",
      "line": 35,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD = \"password\""
    },
    {
      "file": "src/api/app/services/incident_response_service.py",
      "line": 67,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD = \"reset_password\""
    },
    {
      "file": "src/api/app/services/incident_response_automation.py",
      "line": 59,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD = \"reset_password\""
    },
    {
      "file": "src/xorb/simulation/controlled_environment_framework.py",
      "line": 886,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"password\""
    },
    {
      "file": "docs/audit/catalog/services.json",
      "line": 14,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"${POSTGRES_PASSWORD:-secure_password}\""
    },
    {
      "file": "docs/audit/catalog/services.json",
      "line": 923,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"dev_password_123\""
    },
    {
      "file": "docs/audit/catalog/services.json",
      "line": 1256,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"xorb_secure_pass\""
    },
    {
      "file": "docs/audit/catalog/services.json",
      "line": 1677,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"SecureAdminPass123!\""
    },
    {
      "file": "docs/audit/catalog/services.json",
      "line": 1710,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"${POSTGRES_PASSWORD:?POSTGRES_PASSWORD..."
    },
    {
      "file": "docs/audit/catalog/services.json",
      "line": 1972,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"${GRAFANA_ADMIN_PASSWORD:?GRAFANA_ADMI..."
    },
    {
      "file": "docs/audit/catalog/services.json",
      "line": 2478,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"${POSTGRES_PASSWORD:-secure_password}\""
    },
    {
      "file": "docs/audit/catalog/services.json",
      "line": 3266,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"${DATABASE_PASSWORD}\""
    },
    {
      "file": "docs/audit/catalog/orchestrator_map.json",
      "line": 85076,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password=\"\n    },\n    {\n      \""
    },
    {
      "file": "wargame/purple/environment_state.json",
      "line": 179,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password\": \"password123\""
    },
    {
      "file": "wargame/purple/environment_state.json",
      "line": 197,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password\": \"BackupPass2024!\""
    },
    {
      "file": "wargame/reports/purple/final_wargame_report.json",
      "line": 206,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password\": \"password123\""
    },
    {
      "file": "wargame/reports/purple/final_wargame_report.json",
      "line": 224,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password\": \"BackupPass2024!\""
    },
    {
      "file": "tests/security/test_security_controls.py",
      "line": 210,
      "type": "Password",
      "severity": "HIGH",
      "preview": "'password': 'secret123'"
    },
    {
      "file": "tests/security/security_test_framework.py",
      "line": 222,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"CorrectPassword123!\""
    },
    {
      "file": "tests/security/security_test_framework.py",
      "line": 223,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"WrongPassword123!\""
    },
    {
      "file": "tests/integration/test_api_endpoints.py",
      "line": 21,
      "type": "Password",
      "severity": "HIGH",
      "preview": "'password': 'password123'"
    },
    {
      "file": "tests/integration/test_api_endpoints.py",
      "line": 39,
      "type": "Password",
      "severity": "HIGH",
      "preview": "'password': 'badpassword'"
    },
    {
      "file": "tests/integration/test_unified_auth_integration.py",
      "line": 327,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"SecurePassword123!\""
    },
    {
      "file": "infrastructure/cyber-range/monitoring/alertmanager-config.yaml",
      "line": 15,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password: 'alert_password'"
    },
    {
      "file": "infrastructure/cyber-range/monitoring/alertmanager-config.yaml",
      "line": 103,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password: 'webhook_password'"
    },
    {
      "file": "infrastructure/cyber-range/monitoring/alertmanager-config.yaml",
      "line": 157,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password: 'red_team_password'"
    },
    {
      "file": "infrastructure/cyber-range/monitoring/alertmanager-config.yaml",
      "line": 175,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password: 'blue_team_password'"
    },
    {
      "file": "deploy/kubernetes/secrets.yaml",
      "line": 13,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD: \"CHANGE_ME_IN_PRODUCTION\""
    },
    {
      "file": "deploy/kubernetes/secrets.yaml",
      "line": 17,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD: \"CHANGE_ME_IN_PRODUCTION\""
    },
    {
      "file": "deploy/kubernetes/secrets.yaml",
      "line": 33,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD: \"CONFIGURE_IN_PRODUCTION\""
    },
    {
      "file": "deploy/kubernetes/secrets.yaml",
      "line": 53,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD: \"CHANGE_ME_IN_PRODUCTION\""
    },
    {
      "file": "deploy/kubernetes/secrets.yaml",
      "line": 55,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD: \"CHANGE_ME_IN_PRODUCTION\""
    },
    {
      "file": "deploy/kubernetes/secrets.yaml",
      "line": 67,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD: \"CHANGE_ME_IN_PRODUCTION\""
    },
    {
      "file": "deploy/kubernetes/secrets.yaml",
      "line": 96,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD: \"CHANGE_ME_IN_PRODUCTION\""
    },
    {
      "file": "deploy/kubernetes/secrets.yaml",
      "line": 97,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD: \"CHANGE_ME_IN_PRODUCTION\""
    },
    {
      "file": "infra/monitoring/alertmanager.yml",
      "line": 6,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password: '${SMTP_PASSWORD}'"
    },
    {
      "file": "services/infrastructure/monitoring/alertmanager.yml",
      "line": 6,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password: '${SMTP_PASSWORD}'"
    },
    {
      "file": "services/infrastructure/security/incident-response-orchestrator.py",
      "line": 46,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD = \"reset_password\""
    },
    {
      "file": "services/infrastructure/security/incident-response-orchestrator.py",
      "line": 244,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password\": \"secure_password\""
    },
    {
      "file": "services/xorb-core/api/tests/test_security_enhancements.py",
      "line": 97,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"SecurePassword123!\""
    },
    {
      "file": "services/xorb-core/api/tests/test_security_enhancements.py",
      "line": 112,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"SecurePassword123!\""
    },
    {
      "file": "services/xorb-core/api/tests/test_security_enhancements.py",
      "line": 128,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"SecurePassword123!\""
    },
    {
      "file": "services/xorb-core/api/tests/test_security_enhancements.py",
      "line": 129,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"WrongPassword456!\""
    },
    {
      "file": "services/xorb-core/api/tests/test_security_enhancements.py",
      "line": 173,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"password123\""
    },
    {
      "file": "services/xorb-core/api/tests/test_security_enhancements.py",
      "line": 174,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"SecureP@ssw0rd2024!\""
    },
    {
      "file": "services/xorb-core/api/tests/test_security_enhancements.py",
      "line": 566,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password = \"SecurePassword123!\""
    },
    {
      "file": "demo/scripts/principal_auditor_bug_fix_implementation.py",
      "line": 896,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password=\",\n                \""
    },
    {
      "file": "tools/scripts/orchestration/enterprise_deployment_orchestrator.py",
      "line": 211,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password\": \"admin123\""
    },
    {
      "file": "tools/scripts/orchestration/concrete_deployment_plan.py",
      "line": 293,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password=\"xorb_redis_2024\""
    },
    {
      "file": "tools/scripts/deployment/deploy_ptaas_platform.py",
      "line": 502,
      "type": "Password",
      "severity": "HIGH",
      "preview": "\"password\": \"xorb_rl_admin_2025\""
    },
    {
      "file": "tools/scripts/deployment/deploy_autonomous_orchestration_platform.py",
      "line": 136,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"xorb_autonomous_2024\""
    },
    {
      "file": "tools/scripts/deployment/deploy_autonomous_orchestration_platform.py",
      "line": 236,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"xorb_autonomous_admin_2024\""
    },
    {
      "file": "tools/scripts/deployment/deploy_xorb_enterprise.py",
      "line": 139,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password': 'auto-generated'"
    },
    {
      "file": "tools/scripts/deployment/deploy_full_ecosystem.py",
      "line": 225,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"xorb_admin_2024\""
    },
    {
      "file": "tools/scripts/deployment/deploy_full_ecosystem.py",
      "line": 465,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"xorb_secure_2024\""
    },
    {
      "file": "tools/scripts/deployment/deploy_quantum_orchestration_platform.py",
      "line": 142,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"xorb_quantum_2024\""
    },
    {
      "file": "tools/scripts/deployment/deploy_quantum_orchestration_platform.py",
      "line": 252,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD\": \"xorb_quantum_admin_2024\""
    },
    {
      "file": "tools/scripts/utilities/generate_secrets.py",
      "line": 74,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD: \"{secrets_config['"
    },
    {
      "file": "tools/scripts/utilities/generate_secrets.py",
      "line": 77,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD: \"{secrets_config['"
    },
    {
      "file": "tools/scripts/utilities/generate_secrets.py",
      "line": 78,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD: \"{secrets_config['"
    },
    {
      "file": "tools/scripts/utilities/xorb_resilience_security_hardening.py",
      "line": 1101,
      "type": "Password",
      "severity": "HIGH",
      "preview": "'password': 'admin_password'"
    },
    {
      "file": "tools/scripts/utilities/integrate_multi_adversary_platform.py",
      "line": 160,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD': 'xorb_secure_2024'"
    },
    {
      "file": "tools/scripts/utilities/integrate_multi_adversary_platform.py",
      "line": 485,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD': 'xorb_admin_2024'"
    },
    {
      "file": "tools/scripts/utilities/integrate_multi_adversary_platform.py",
      "line": 573,
      "type": "Password",
      "severity": "HIGH",
      "preview": "'password': 'xorb_secure_2024'"
    },
    {
      "file": "tools/scripts/utilities/integrate_multi_adversary_platform.py",
      "line": 579,
      "type": "Password",
      "severity": "HIGH",
      "preview": "'password': 'xorb_graph_2024'"
    },
    {
      "file": "tools/scripts/utilities/integrate_multi_adversary_platform.py",
      "line": 584,
      "type": "Password",
      "severity": "HIGH",
      "preview": "'password': 'xorb_redis_2024'"
    },
    {
      "file": "tools/scripts/utilities/xorb_ecosystem_manager.py",
      "line": 423,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password=\"xorb_secure_2024\""
    },
    {
      "file": "tools/scripts/utilities/security-hardening.py",
      "line": 126,
      "type": "Password",
      "severity": "HIGH",
      "preview": "'password': 'Use environment variables or encrypte..."
    },
    {
      "file": "tools/scripts/utilities/security-hardening.py",
      "line": 229,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password\": \"your_secure_password\""
    },
    {
      "file": "tools/scripts/utilities/security-hardening.py",
      "line": 230,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password\": \"your_secure_password\""
    },
    {
      "file": "tools/scripts/utilities/security-hardening.py",
      "line": 241,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password\": \"your_secure_password\""
    },
    {
      "file": "tools/scripts/utilities/security-hardening.py",
      "line": 254,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password: \"{{ vault.secret }}\""
    },
    {
      "file": "tools/scripts/utilities/security-hardening.py",
      "line": 255,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password: \"{{ vault.secret }}\""
    },
    {
      "file": "tools/scripts/utilities/security-hardening.py",
      "line": 311,
      "type": "Password",
      "severity": "HIGH",
      "preview": "'password=' in finding['"
    },
    {
      "file": "tools/scripts/utilities/xorb_resilience_unified_deployment.py",
      "line": 793,
      "type": "Password",
      "severity": "HIGH",
      "preview": "PASSWORD': 'xorb_secure_password'"
    },
    {
      "file": "tools/scripts/utilities/xorb_resilience_unified_deployment.py",
      "line": 1024,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password': 'xorb_admin_password'"
    },
    {
      "file": "tools/scripts/utilities/import_enhanced_dashboards.py",
      "line": 10,
      "type": "Password",
      "severity": "HIGH",
      "preview": "password=\"xorb_rl_admin_2025\""
    }
  ],
  "summary": {
    "adr_002_violations": 21,
    "adr_003_violations": 626,
    "bandit_issues": 0,
    "ruff_issues": 0,
    "dockerfile_issues": 16,
    "supply_chain_issues": 64,
    "github_actions_issues": 39,
    "potential_secrets": 95
  }
}
