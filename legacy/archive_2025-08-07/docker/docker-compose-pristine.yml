# TODO: LEGACY â€” archived unused docker configs on audit 2025-08-07
version: '3.8'

# XORB Pristine Architecture Deployment
# Advanced microservices with EPYC optimization, service mesh, and fault tolerance

networks:
  xorb-mesh:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  xorb-internal:
    driver: bridge
    internal: true

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  jaeger-data:

services:
  # ==============================
  # CORE TIER - Critical Business Logic
  # ==============================
  
  campaign-orchestrator:
    build:
      context: ..
      dockerfile: compose/Dockerfile.campaign-orchestrator
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: campaign-orchestrator
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8001:8001"
      - "9001:9090"  # Metrics
    environment:
      - SERVICE_NAME=campaign-orchestrator
      - SERVICE_TIER=core
      - EPYC_NUMA_NODE=0
      - EPYC_CCX_AFFINITY=0
      - CPU_CORES=4
      - MEMORY_LIMIT=8GB
      - POSTGRES_DSN=postgresql://xorb:xorb@postgres:5432/xorb
      - REDIS_URL=redis://redis:6379/0
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_ENDPOINT=http://prometheus:9090
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
      placement:
        constraints:
          - node.platform.arch == x86_64
    cpuset: "0-3"
    mem_limit: 8g
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - jaeger
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  target-registry:
    build:
      context: ..
      dockerfile: compose/Dockerfile.target-registry
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: target-registry
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8002:8002"
      - "9002:9090"  # Metrics
    environment:
      - SERVICE_NAME=target-registry
      - SERVICE_TIER=core
      - EPYC_NUMA_NODE=0
      - EPYC_CCX_AFFINITY=1
      - POSTGRES_DSN=postgresql://xorb:xorb@postgres:5432/xorb
      - REDIS_URL=redis://redis:6379/1
      - VECTOR_STORE_URL=http://vector-store:8080
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    cpuset: "4-5"
    mem_limit: 4g
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - vector-store

  agent-lifecycle:
    build:
      context: ..
      dockerfile: compose/Dockerfile.agent-lifecycle
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: agent-lifecycle
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8003:8003"
      - "9003:9090"  # Metrics
    environment:
      - SERVICE_NAME=agent-lifecycle
      - SERVICE_TIER=core
      - EPYC_NUMA_NODE=0
      - EPYC_CCX_AFFINITY=2
      - POSTGRES_DSN=postgresql://xorb:xorb@postgres:5432/xorb
      - TIME_SERIES_DB_URL=http://timescaledb:5432
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
    cpuset: "8-11"
    mem_limit: 8g
    restart: unless-stopped

  evidence-collector:
    build:
      context: ..
      dockerfile: compose/Dockerfile.evidence-collector
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: evidence-collector
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8004:8004"
      - "9004:9090"  # Metrics
    environment:
      - SERVICE_NAME=evidence-collector
      - SERVICE_TIER=core
      - EPYC_NUMA_NODE=1
      - EPYC_CCX_AFFINITY=3
      - POSTGRES_DSN=postgresql://xorb:xorb@postgres:5432/xorb
      - OBJECT_STORE_URL=http://minio:9000
      - SEARCH_ENGINE_URL=http://elasticsearch:9200
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 6G
    cpuset: "16-17"
    mem_limit: 6g
    restart: unless-stopped

  # ==============================
  # DOMAIN TIER - Domain-Specific Services
  # ==============================

  vulnerability-scanner:
    build:
      context: ..
      dockerfile: compose/Dockerfile.vulnerability-scanner
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: vulnerability-scanner
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8005:8005"
      - "9005:9090"  # Metrics
    environment:
      - SERVICE_NAME=vulnerability-scanner
      - SERVICE_TIER=domain
      - EPYC_NUMA_NODE=1
      - EPYC_CCX_AFFINITY=4
      - AI_GATEWAY_URL=http://ai-gateway:8010
      - THREAT_INTEL_URL=http://threat-intelligence:8011
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 6G
    cpuset: "16-19"
    mem_limit: 6g
    restart: unless-stopped

  exploitation-engine:
    build:
      context: ..
      dockerfile: compose/Dockerfile.exploitation-engine
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: exploitation-engine
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8006:8006"
      - "9006:9090"  # Metrics
    environment:
      - SERVICE_NAME=exploitation-engine
      - SERVICE_TIER=domain
      - EPYC_NUMA_NODE=1
      - EPYC_CCX_AFFINITY=5
      - PAYLOAD_GENERATOR_URL=http://payload-generator:8012
      - STEALTH_MANAGER_URL=http://stealth-manager:8013
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
    cpuset: "20-23"
    mem_limit: 8g
    restart: unless-stopped

  stealth-manager:
    build:
      context: ..
      dockerfile: compose/Dockerfile.stealth-manager
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: stealth-manager
    ports:
      - "8013:8013"
      - "9013:9090"  # Metrics
    networks:
      - xorb-mesh
      - xorb-internal
    environment:
      - SERVICE_NAME=stealth-manager
      - SERVICE_TIER=domain
      - EPYC_NUMA_NODE=1
      - EPYC_CCX_AFFINITY=6
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    cpuset: "24-25"
    mem_limit: 4g
    restart: unless-stopped

  ai-gateway:
    build:
      context: ..
      dockerfile: compose/Dockerfile.ai-gateway
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: ai-gateway
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8010:8010"
      - "9010:9090"  # Metrics
    environment:
      - SERVICE_NAME=ai-gateway
      - SERVICE_TIER=domain
      - EPYC_NUMA_NODE=0
      - EPYC_CCX_AFFINITY=7
      - NVIDIA_API_KEY=${NVIDIA_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - MODEL_REGISTRY_URL=http://model-registry:8014
      - INFERENCE_PIPELINE_URL=http://inference-pipeline:8015
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 12G
    cpuset: "28-31"
    mem_limit: 12g
    restart: unless-stopped

  threat-intelligence:
    build:
      context: ..
      dockerfile: compose/Dockerfile.threat-intelligence
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: threat-intelligence
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8011:8011"
      - "9011:9090"  # Metrics
    environment:
      - SERVICE_NAME=threat-intelligence
      - SERVICE_TIER=domain
      - EPYC_NUMA_NODE=0
      - POSTGRES_DSN=postgresql://xorb:xorb@postgres:5432/xorb
      - VECTOR_STORE_URL=http://vector-store:8080
      - SEARCH_ENGINE_URL=http://elasticsearch:9200
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 6G
    restart: unless-stopped

  # ==============================
  # PLATFORM TIER - Infrastructure Services
  # ==============================

  api-gateway:
    build:
      context: ..
      dockerfile: compose/Dockerfile.api-gateway
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: api-gateway
    networks:
      - xorb-mesh
    ports:
      - "8000:8000"  # Public API
      - "8080:8080"  # Partner API
      - "9000:9090"  # Metrics
    environment:
      - SERVICE_NAME=api-gateway
      - SERVICE_TIER=platform
      - AUTH_SERVICE_URL=http://auth-service:8020
      - RATE_LIMITER_URL=http://rate-limiter:8021
      - METRICS_COLLECTOR_URL=http://metrics-collector:8022
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    cpuset: "4-7"
    mem_limit: 4g
    restart: unless-stopped
    depends_on:
      - auth-service
      - rate-limiter

  auth-service:
    build:
      context: ..
      dockerfile: compose/Dockerfile.auth-service
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: auth-service
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8020:8020"
      - "9020:9090"  # Metrics
    environment:
      - SERVICE_NAME=auth-service
      - SERVICE_TIER=platform
      - POSTGRES_DSN=postgresql://xorb:xorb@postgres:5432/xorb
      - REDIS_URL=redis://redis:6379/2
      - JWT_SECRET=${JWT_SECRET:-xorb-secret-key}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  metrics-collector:
    build:
      context: ..
      dockerfile: compose/Dockerfile.metrics-collector
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: metrics-collector
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8022:8022"
      - "9022:9090"  # Metrics
    environment:
      - SERVICE_NAME=metrics-collector
      - SERVICE_TIER=platform
      - TIME_SERIES_DB_URL=http://timescaledb:5432
      - ALERT_MANAGER_URL=http://alertmanager:9093
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    restart: unless-stopped

  # ==============================
  # EDGE TIER - External-Facing Services
  # ==============================

  web-interface:
    build:
      context: ..
      dockerfile: compose/Dockerfile.web-interface
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: web-interface
    networks:
      - xorb-mesh
    ports:
      - "3000:3000"
    environment:
      - SERVICE_NAME=web-interface
      - SERVICE_TIER=edge
      - API_GATEWAY_URL=http://api-gateway:8000
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped
    depends_on:
      - api-gateway

  external-integrations:
    build:
      context: ..
      dockerfile: compose/Dockerfile.external-integrations
      args:
        EPYC_OPTIMIZATION: "true"
    hostname: external-integrations
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8030:8030"
      - "9030:9090"  # Metrics
    environment:
      - SERVICE_NAME=external-integrations
      - SERVICE_TIER=edge
      - API_GATEWAY_URL=http://api-gateway:8000
      - AUTH_SERVICE_URL=http://auth-service:8020
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped

  # ==============================
  # DATA STORES
  # ==============================

  postgres:
    image: ankane/pgvector:v0.5.1
    hostname: postgres
    networks:
      - xorb-internal
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=xorb
      - POSTGRES_USER=xorb
      - POSTGRES_PASSWORD=xorb
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xorb -d xorb"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    hostname: redis
    networks:
      - xorb-internal
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 4gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    hostname: timescaledb
    networks:
      - xorb-internal
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=xorb_metrics
      - POSTGRES_USER=xorb
      - POSTGRES_PASSWORD=xorb
    volumes:
      - timescale-data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    restart: unless-stopped

  vector-store:
    image: qdrant/qdrant:latest
    hostname: vector-store
    networks:
      - xorb-internal
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data:/qdrant/storage
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    restart: unless-stopped

  # ==============================
  # SERVICE MESH & OBSERVABILITY
  # ==============================

  istio-proxy:
    image: istio/proxyv2:1.18.0
    hostname: istio-proxy
    networks:
      - xorb-mesh
    ports:
      - "15000:15000"  # Admin interface
    environment:
      - PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION=true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.47
    hostname: jaeger
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "6831:6831/udp"  # Agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
    volumes:
      - jaeger-data:/tmp
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.45.0
    hostname: prometheus
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ../config/prometheus-pristine.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.0
    hostname: grafana
    networks:
      - xorb-mesh
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=xorb-admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ../config/grafana/provisioning:/etc/grafana/provisioning
      - ../config/grafana/dashboards:/var/lib/grafana/dashboards
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:v0.25.0
    hostname: alertmanager
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "9093:9093"
    volumes:
      - ../config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    restart: unless-stopped

  # ==============================
  # ADDITIONAL SERVICES
  # ==============================

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    hostname: elasticsearch
    networks:
      - xorb-internal
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    hostname: minio
    networks:
      - xorb-internal
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=xorb
      - MINIO_ROOT_PASSWORD=xorb-storage
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped

  # ==============================
  # FAULT TOLERANCE SERVICES
  # ==============================

  circuit-breaker-manager:
    build:
      context: ..
      dockerfile: compose/Dockerfile.fault-tolerance
      args:
        SERVICE_TYPE: "circuit-breaker"
    hostname: circuit-breaker-manager
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8100:8100"
    environment:
      - SERVICE_NAME=circuit-breaker-manager
      - REDIS_URL=redis://redis:6379/3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped
    depends_on:
      - redis

  bulkhead-manager:
    build:
      context: ..
      dockerfile: compose/Dockerfile.fault-tolerance
      args:
        SERVICE_TYPE: "bulkhead"
    hostname: bulkhead-manager
    networks:
      - xorb-mesh
      - xorb-internal
    ports:
      - "8101:8101"
    environment:
      - SERVICE_NAME=bulkhead-manager
      - REDIS_URL=redis://redis:6379/4
      - EPYC_OPTIMIZATION=true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  timescale-data:
  qdrant-data:
  jaeger-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  minio-data: