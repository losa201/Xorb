apiVersion: apps/v1
kind: Deployment
metadata:
  name: xorb-api
  labels:
    app.kubernetes.io/name: xorb-api
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: xorb
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: xorb-api
      app.kubernetes.io/component: api
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
      labels:
        app.kubernetes.io/name: xorb-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: xorb
    spec:
      serviceAccountName: xorb-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: xorb/api:2.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        env:
        - name: XORB_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: xorb-config
              key: XORB_ENVIRONMENT
        - name: XORB_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: xorb-config
              key: XORB_LOG_LEVEL
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: xorb-secrets
              key: DATABASE_URL
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "1"
            memory: "1Gi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}