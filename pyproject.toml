[build-system]
requires = ["setuptools>=65.0", "wheel>=0.38.0"]
build-backend = "setuptools.build_meta"

[project]
name = "xorb-platform"
version = "3.2.0"
description = "XORB Cybersecurity Platform - Enterprise Autonomous Security"
readme = "README.md"
license = {text = "Proprietary"}
authors = [
    {name = "XORB Platform Team", email = "platform@xorb.ai"}
]
maintainers = [
    {name = "XORB Platform Team", email = "platform@xorb.ai"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Information Technology",
    "Topic :: Security",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11"
keywords = ["cybersecurity", "ai", "threat-hunting", "forensics", "platform"]

# Core runtime dependencies
dependencies = [
    # Core Framework
    "fastapi==0.115.0",
    "uvicorn[standard]==0.30.6", 
    "pydantic==2.9.2",
    "pydantic-settings==2.5.2",
    
    # Async Runtime
    "asyncio-mqtt==0.15.0",
    "httpx==0.28.0",
    "aiohttp==3.9.1", 
    "aiofiles==23.2.0",
    
    # Database & Caching
    "asyncpg==0.30.0",
    "redis[hiredis]==5.1.0",
    "aioredis==2.0.1",
    "alembic==1.13.1",
    "sqlalchemy==2.0.23",
    
    # Security & Authentication
    "passlib[argon2]==1.7.4",
    "argon2-cffi==23.1.0",
    "python-jose[cryptography]==3.3.0",
    "cryptography==42.0.1",
    "authlib==1.3.1",
    "pyotp==2.9.0",
    "qrcode[pil]==7.4.2",
    "bleach==6.1.0",
    
    # Workflow Orchestration
    "temporalio==1.6.0",
    
    # Observability
    "prometheus-client==0.21.0", 
    "prometheus-fastapi-instrumentator==7.0.0",
    "structlog==23.2.0",
    "opentelemetry-api==1.22.0",
    "opentelemetry-sdk==1.22.0",
    "opentelemetry-instrumentation-fastapi==0.43b0",
    
    # Utilities
    "python-dotenv==1.1.0",
    "python-multipart==0.0.7",
    "python-dateutil==2.8.2",
    "jsonschema==4.20.0",
    "click==8.1.7",
    "rich==13.7.0",
    
    # Security Intelligence
    "nvdlib==0.8.0",
    
    # Production
    "gunicorn==21.2.0",
    "psutil==5.9.6",
]

# Optional dependency groups
[project.optional-dependencies]
# Machine Learning & AI capabilities
ml = [
    "numpy==1.26.3",
    "pandas==2.2.0", 
    "scikit-learn==1.4.0",
    "scipy==1.12.0",
    "torch==2.1.2",
    "torchvision==0.16.2",
    "transformers==4.36.2",
    "openai==1.7.2",
    "xgboost==2.0.3",
    "lightgbm==4.2.0",
    "optuna==3.5.0",
    "mlflow==2.9.2",
]

# Web scraping and data extraction
scraping = [
    "playwright==1.40.0",
    "requests==2.31.0",
    "lxml==5.1.0", 
    "beautifulsoup4==4.12.2",
    "python-magic==0.4.27",
]

# Development and testing
dev = [
    # Testing
    "pytest==7.4.3",
    "pytest-asyncio==0.23.2",
    "pytest-cov==4.1.0", 
    "pytest-mock==3.12.0",
    
    # Code Quality
    "black==23.12.1",
    "isort==5.13.2",
    "mypy==1.8.0",
    "flake8==6.1.0",
    "bandit==1.7.5",
    "pre-commit==3.6.0",
]

# Full observability stack
observability = [
    "opentelemetry-instrumentation==0.43b0",
    "opentelemetry-instrumentation-asyncpg==0.43b0", 
    "opentelemetry-instrumentation-redis==0.43b0",
    "opentelemetry-exporter-prometheus==1.12.0rc1",
    "opentelemetry-exporter-jaeger==1.21.0",
]

# All optional dependencies
all = ["xorb-platform[ml,scraping,dev,observability]"]

[project.scripts]
xorb-api = "app.main:main"
xorb-orchestrator = "orchestrator.main:main"
xorb-worker = "services.worker.main:main"

[project.urls]
Homepage = "https://xorb.ai"
Documentation = "https://docs.xorb.ai" 
Repository = "https://github.com/xorb-ai/platform"
Issues = "https://github.com/xorb-ai/platform/issues"

# Tool Configurations
[tool.setuptools]
packages = ["app", "src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  migrations/
  | venv/
  | .venv/
  | build/
  | dist/
)
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.2.0"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "temporalio.*",
    "nvdlib.*",
    "redis.*",
    "playwright.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "3.2.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=70",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests", 
    "security: Security tests",
    "performance: Performance tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["src", "app"]
omit = [
    "*/tests/*",
    "*/migrations/*", 
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report] 
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations", "venv"]
skips = ["B101", "B601"]  # Skip assert_used and paramiko_calls

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [".git", "__pycache__", "venv", ".venv", "migrations"]
per-file-ignores = [
    "__init__.py:F401",
    "settings.py:E501",
]