apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: xorb_platform
  labels:
    app: postgres
    component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: xorb_platform
  labels:
    app: postgres
    component: database
    tier: data
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
        tier: data
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: ankane/pgvector:v0.5.1
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        command:
        - postgres
        - -c
        - config_file=/etc/postgresql/postgresql.conf
        - -c
        - shared_preload_libraries=vector
        - -c
        - max_connections=500
        - -c
        - shared_buffers=1GB
        - -c
        - effective_cache_size=4GB
        - -c
        - maintenance_work_mem=512MB
        - -c
        - checkpoint_completion_target=0.9
        - -c
        - wal_buffers=32MB
        - -c
        - default_statistics_target=100
        - -c
        - random_page_cost=1.1
        - -c
        - effective_io_concurrency=200
        - -c
        - work_mem=64MB
        - -c
        - min_wal_size=4GB
        - -c
        - max_wal_size=16GB
        - -c
        - max_worker_processes=16
        - -c
        - max_parallel_workers_per_gather=8
        - -c
        - max_parallel_workers=16
        - -c
        - max_parallel_maintenance_workers=8
        - -c
        - log_min_duration_statement=1000
        - -c
        - log_statement=mod
        - -c
        - log_lock_waits=on
        - -c
        - log_temp_files=0
        - -c
        - log_checkpoints=on
        - -c
        - log_autovacuum_min_duration=0
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.15.0
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_DB
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: postgres-init
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: xorb_platform
  labels:
    app: postgres
    component: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  - port: 9187
    targetPort: 9187
    protocol: TCP
    name: metrics
  selector:
    app: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: xorb_platform
  labels:
    app: postgres
    component: config
data:
  postgresql.conf: |
    # XORB Production PostgreSQL Configuration

    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 500
    superuser_reserved_connections = 3

    # Memory Settings
    shared_buffers = 1GB
    effective_cache_size = 4GB
    maintenance_work_mem = 512MB
    work_mem = 64MB

    # Checkpoint Settings
    checkpoint_completion_target = 0.9
    checkpoint_timeout = 10min
    checkpoint_warning = 30s

    # WAL Settings
    wal_buffers = 32MB
    min_wal_size = 4GB
    max_wal_size = 16GB
    wal_level = replica

    # Query Planner
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200

    # Parallel Query
    max_worker_processes = 16
    max_parallel_workers_per_gather = 8
    max_parallel_workers = 16
    max_parallel_maintenance_workers = 8

    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_min_duration_statement = 1000
    log_statement = 'mod'
    log_lock_waits = on
    log_temp_files = 0
    log_checkpoints = on
    log_autovacuum_min_duration = 0

    # Autovacuum
    autovacuum = on
    autovacuum_max_workers = 4
    autovacuum_naptime = 15s
    autovacuum_vacuum_threshold = 50
    autovacuum_analyze_threshold = 50

    # Security
    ssl = off
    password_encryption = scram-sha-256
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: xorb_platform
  labels:
    app: postgres
    component: init
data:
  01-init-extensions.sql: |
    -- XORB Database Initialization Script

    -- Create vector extension for AI operations
    CREATE EXTENSION IF NOT EXISTS vector;

    -- Create additional useful extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    CREATE EXTENSION IF NOT EXISTS "btree_gist";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";

    -- Create application database user with limited privileges
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'xorb_app') THEN
            CREATE ROLE xorb_app WITH LOGIN PASSWORD 'CHANGE_ME_IN_PRODUCTION';
        END IF;
    END
    $$;

    -- Grant necessary permissions
    GRANT CONNECT ON DATABASE xorb_prod TO xorb_app;
    GRANT USAGE ON SCHEMA public TO xorb_app;
    GRANT CREATE ON SCHEMA public TO xorb_app;

    -- Create monitoring user for metrics
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'postgres_exporter') THEN
            CREATE ROLE postgres_exporter WITH LOGIN PASSWORD 'CHANGE_ME_IN_PRODUCTION';
        END IF;
    END
    $$;

    GRANT pg_monitor TO postgres_exporter;

  02-init-tables.sql: |
    -- XORB Core Tables

    -- Tenants table for multi-tenancy
    CREATE TABLE IF NOT EXISTS tenants (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(255) NOT NULL,
        slug VARCHAR(100) UNIQUE NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        is_active BOOLEAN DEFAULT TRUE,
        settings JSONB DEFAULT '{}'::JSONB
    );

    -- Users table
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
        email VARCHAR(255) UNIQUE NOT NULL,
        username VARCHAR(100) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        is_verified BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        last_login TIMESTAMP WITH TIME ZONE,
        metadata JSONB DEFAULT '{}'::JSONB
    );

    -- PTaaS scan sessions
    CREATE TABLE IF NOT EXISTS ptaas_sessions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
        user_id UUID REFERENCES users(id) ON DELETE SET NULL,
        session_name VARCHAR(255),
        scan_type VARCHAR(100) NOT NULL,
        status VARCHAR(50) DEFAULT 'created',
        targets JSONB NOT NULL,
        results JSONB,
        metadata JSONB DEFAULT '{}'::JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        started_at TIMESTAMP WITH TIME ZONE,
        completed_at TIMESTAMP WITH TIME ZONE
    );

    -- Threat intelligence indicators
    CREATE TABLE IF NOT EXISTS threat_indicators (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
        indicator_type VARCHAR(50) NOT NULL,
        indicator_value TEXT NOT NULL,
        confidence_score FLOAT DEFAULT 0.0,
        threat_level VARCHAR(20) DEFAULT 'unknown',
        source VARCHAR(100),
        first_seen TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        last_seen TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        metadata JSONB DEFAULT '{}'::JSONB,
        embedding VECTOR(1536) -- For AI similarity search
    );

    -- Create indexes for performance
    CREATE INDEX IF NOT EXISTS idx_tenants_slug ON tenants(slug);
    CREATE INDEX IF NOT EXISTS idx_users_tenant_id ON users(tenant_id);
    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
    CREATE INDEX IF NOT EXISTS idx_ptaas_sessions_tenant_id ON ptaas_sessions(tenant_id);
    CREATE INDEX IF NOT EXISTS idx_ptaas_sessions_status ON ptaas_sessions(status);
    CREATE INDEX IF NOT EXISTS idx_threat_indicators_tenant_id ON threat_indicators(tenant_id);
    CREATE INDEX IF NOT EXISTS idx_threat_indicators_type ON threat_indicators(indicator_type);
    CREATE INDEX IF NOT EXISTS idx_threat_indicators_embedding ON threat_indicators USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

    -- Row Level Security (RLS) for multi-tenancy
    ALTER TABLE users ENABLE ROW LEVEL SECURITY;
    ALTER TABLE ptaas_sessions ENABLE ROW LEVEL SECURITY;
    ALTER TABLE threat_indicators ENABLE ROW LEVEL SECURITY;

    -- RLS Policies
    CREATE POLICY tenant_isolation_users ON users
        FOR ALL TO xorb_app
        USING (tenant_id = current_setting('app.current_tenant_id')::UUID);

    CREATE POLICY tenant_isolation_ptaas_sessions ON ptaas_sessions
        FOR ALL TO xorb_app
        USING (tenant_id = current_setting('app.current_tenant_id')::UUID);

    CREATE POLICY tenant_isolation_threat_indicators ON threat_indicators
        FOR ALL TO xorb_app
        USING (tenant_id = current_setting('app.current_tenant_id')::UUID);
