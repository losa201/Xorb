apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "pgvector.fullname" . }}
  labels:
    {{- include "pgvector.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "pgvector.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "pgvector.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "pgvector.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
      - name: init-db
        image: "{{ .Values.postgresql.image.registry }}/{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
        command:
        - sh
        - -c
        - |
          psql -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }} -c "CREATE EXTENSION IF NOT EXISTS vector;"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "pgvector.fullname" . }}
              key: postgres-password
      containers:
      - name: postgresql
        image: "{{ .Values.postgresql.image.registry }}/{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
        env:
        - name: POSTGRES_DB
          value: {{ .Values.postgresql.auth.database }}
        - name: POSTGRES_USER
          value: {{ .Values.postgresql.auth.username }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "pgvector.fullname" . }}
              key: postgres-password
        ports:
        - name: postgresql
          containerPort: 5432
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.postgresql.persistence.size }}
