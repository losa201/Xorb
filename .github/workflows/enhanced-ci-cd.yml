name: Enhanced Xorb Security Intelligence CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scans

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/xorb
  DOCKER_BUILDKIT: 1
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # SECURITY VALIDATION & COMPLIANCE
  # ============================================================================
  
  security-validation:
    name: Security Validation & Compliance
    runs-on: ubuntu-latest
    outputs:
      secrets-found: ${{ steps.secrets-scan.outputs.secrets-found }}
      compliance-passed: ${{ steps.compliance-check.outputs.passed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install security tools
      run: |
        # Install gitleaks for secret detection
        wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_8.18.0_linux_x64.tar.gz
        tar -xzf gitleaks.tar.gz
        sudo mv gitleaks /usr/local/bin/
        
        # Install semgrep for SAST
        python3 -m pip install semgrep
        
        # Install OSV scanner
        curl -L -o osv-scanner https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64
        chmod +x osv-scanner
        sudo mv osv-scanner /usr/local/bin/
    
    - name: Secret detection with gitleaks
      id: secrets-scan
      run: |
        if gitleaks detect --source . --verbose --report-format json --report-path gitleaks-report.json; then
          echo "secrets-found=false" >> $GITHUB_OUTPUT
        else
          echo "secrets-found=true" >> $GITHUB_OUTPUT
          echo "::error::Secrets detected in codebase"
        fi
      continue-on-error: true
    
    - name: SAST with Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
    
    - name: Vulnerability scanning with OSV
      run: |
        osv-scanner --format json --output osv-report.json . || true
    
    - name: Compliance validation
      id: compliance-check
      run: |
        python3 << 'EOF'
        import json
        import os
        import sys
        
        # Check for RoE compliance markers
        roe_files = []
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith('.py'):
                    filepath = os.path.join(root, file)
                    try:
                        with open(filepath, 'r') as f:
                            content = f.read()
                            if 'DEFENSIVE_SECURITY_ONLY' in content or 'ROE_COMPLIANT' in content:
                                roe_files.append(filepath)
                    except:
                        pass
        
        print(f"Found {len(roe_files)} RoE compliant files")
        
        # Validate container security policies
        docker_files = []
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.startswith('Dockerfile'):
                    docker_files.append(os.path.join(root, file))
        
        compliant_dockerfiles = 0
        for dockerfile in docker_files:
            try:
                with open(dockerfile, 'r') as f:
                    content = f.read()
                    if 'USER ' in content and 'USER root' not in content:
                        compliant_dockerfiles += 1
            except:
                pass
        
        compliance_score = (compliant_dockerfiles / max(len(docker_files), 1)) * 100
        print(f"Dockerfile compliance: {compliance_score:.1f}%")
        
        if compliance_score >= 80:
            print("passed=true", file=open(os.environ['GITHUB_OUTPUT'], 'a'))
        else:
            print("passed=false", file=open(os.environ['GITHUB_OUTPUT'], 'a'))
            sys.exit(1)
        EOF
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          gitleaks-report.json
          semgrep-report.json
          osv-report.json
        retention-days: 30
    
    - name: Fail on secrets detection
      if: steps.secrets-scan.outputs.secrets-found == 'true'
      run: |
        echo "::error::Secrets detected in repository. Please remove them before proceeding."
        exit 1

  # ============================================================================
  # MULTI-LANGUAGE QUALITY CHECKS
  # ============================================================================
  
  quality-matrix:
    name: Code Quality (${{ matrix.language }})
    runs-on: ubuntu-latest
    needs: security-validation
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: python
            version: "3.12"
            cache-key: pip
          - language: python
            version: "3.11"
            cache-key: pip
          - language: go
            version: "1.21"
            cache-key: go-mod
          - language: node
            version: "20"
            cache-key: npm
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Python setup
    - name: Set up Python ${{ matrix.version }}
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.version }}
    
    - name: Install Poetry (Python)
      if: matrix.language == 'python'
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache Python dependencies
      if: matrix.language == 'python'
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.version }}-
    
    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        poetry install --no-interaction --all-extras
    
    - name: Python quality checks
      if: matrix.language == 'python'
      run: |
        # Formatting check
        poetry run ruff format --check .
        
        # Linting
        poetry run ruff check . --output-format=github
        
        # Type checking
        poetry run mypy xorb_common/ services/ --show-error-codes
        
        # Security analysis
        poetry run bandit -r xorb_common/ services/ -f json -o bandit-${{ matrix.version }}.json
        
        # Dependency check
        poetry run safety check --json --output safety-${{ matrix.version }}.json || true
    
    # Go setup
    - name: Set up Go ${{ matrix.version }}
      if: matrix.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.version }}
    
    - name: Cache Go modules
      if: matrix.language == 'go'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.version }}-
    
    - name: Go quality checks
      if: matrix.language == 'go'
      run: |
        cd services/scanner-go
        
        # Download dependencies
        go mod download
        
        # Format check
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted. Run: gofmt -s -w ."
          gofmt -s -l .
          exit 1
        fi
        
        # Linting
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...
        
        # Vulnerability check
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
        
        # Build check
        go build -v ./...
    
    # Node.js setup
    - name: Set up Node.js ${{ matrix.version }}
      if: matrix.language == 'node'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.version }}
        cache: 'npm'
        cache-dependency-path: services/researcher-portal/package-lock.json
    
    - name: Node.js quality checks
      if: matrix.language == 'node'
      run: |
        cd services/researcher-portal
        
        # Install dependencies
        npm ci
        
        # Linting
        npm run lint
        
        # Type checking
        npm run type-check
        
        # Security audit
        npm audit --audit-level moderate
        
        # Build check
        npm run build
    
    - name: Upload quality artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports-${{ matrix.language }}-${{ matrix.version }}
        path: |
          bandit-*.json
          safety-*.json
        retention-days: 7

  # ============================================================================
  # COMPREHENSIVE TESTING
  # ============================================================================
  
  test-matrix:
    name: Tests (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: quality-matrix
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, autonomous, edge]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: xorb_test
          POSTGRES_USER: xorb
          POSTGRES_PASSWORD: xorb_test_secure_password_123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      temporal:
        image: temporalio/auto-setup:1.22
        env:
          DB: postgresql
          DB_PORT: 5432
          POSTGRES_USER: xorb
          POSTGRES_PWD: xorb_test_secure_password_123
          POSTGRES_SEEDS: postgres
        ports:
          - 7233:7233
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: test-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction --all-extras
    
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
    
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      env:
        DATABASE_URL: postgresql://xorb:xorb_test_secure_password_123@localhost:5432/xorb_test
        REDIS_URL: redis://localhost:6379/0
        TEMPORAL_HOST: localhost:7233
        XORB_ENV: test
      run: |
        poetry run pytest tests/unit/ \
          --cov=xorb_common \
          --cov=services \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=85 \
          --junitxml=junit-unit.xml \
          -v --tb=short
    
    - name: Run integration tests
      if: matrix.test-type == 'integration'
      env:
        DATABASE_URL: postgresql://xorb:xorb_test_secure_password_123@localhost:5432/xorb_test
        REDIS_URL: redis://localhost:6379/0
        TEMPORAL_HOST: localhost:7233
        XORB_ENV: test
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY_TEST }}
      run: |
        poetry run pytest tests/integration/ \
          --junitxml=junit-integration.xml \
          -v --tb=short \
          --timeout=300
    
    - name: Run autonomous worker tests
      if: matrix.test-type == 'autonomous'
      env:
        DATABASE_URL: postgresql://xorb:xorb_test_secure_password_123@localhost:5432/xorb_test
        REDIS_URL: redis://localhost:6379/0
        XORB_ENV: test
      run: |
        poetry run pytest tests/test_autonomous_workers.py \
          --junitxml=junit-autonomous.xml \
          -v --tb=short \
          --timeout=600
    
    - name: Run edge deployment tests
      if: matrix.test-type == 'edge'
      env:
        XORB_ENV: test
      run: |
        poetry run pytest tests/edge/ \
          --junitxml=junit-edge.xml \
          -v --tb=short \
          --timeout=300
    
    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-type }}
        name: ${{ matrix.test-type }}-coverage
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          junit-*.xml
          htmlcov/
        retention-days: 7

  # ============================================================================
  # SECURE CONTAINER BUILD WITH SBOM
  # ============================================================================
  
  secure-build:
    name: Secure Build (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: test-matrix
    strategy:
      fail-fast: false
      matrix:
        service: 
          - api
          - worker
          - orchestrator
          - scanner
          - triage
          - scheduler
          - embedding-service
          - ai-campaign
          - ai-learning
          - ai-multimodal
          - ai-prioritization
          - ai-remediation
    
    outputs:
      image-digest-${{ matrix.service }}: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
          image=moby/buildkit:v0.12.4
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}/xorb-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr,prefix=pr-
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.title=Xorb ${{ matrix.service }}
          org.opencontainers.image.description=Xorb Security Intelligence Platform - ${{ matrix.service }} service
          org.opencontainers.image.vendor=Xorb Security
          org.opencontainers.image.licenses=MIT
    
    - name: Build and push container
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: services/${{ matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        sbom: true
        provenance: true
        outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Xorb ${{ matrix.service }} service
    
    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      run: |
        # Install syft for SBOM generation
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Generate SBOM for the built image
        syft ${{ env.IMAGE_PREFIX }}/xorb-${{ matrix.service }}:${{ steps.meta.outputs.version || 'latest' }} \
          -o spdx-json=sbom-${{ matrix.service }}.spdx.json \
          -o cyclonedx-json=sbom-${{ matrix.service }}.cyclonedx.json
    
    - name: Upload SBOM artifacts
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.service }}
        path: |
          sbom-${{ matrix.service }}.spdx.json
          sbom-${{ matrix.service }}.cyclonedx.json
        retention-days: 90

  # ============================================================================
  # ADVANCED SECURITY SCANNING
  # ============================================================================
  
  security-scan:
    name: Security Scan (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: secure-build
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        service: 
          - api
          - worker
          - orchestrator
          - scanner
          - embedding-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_PREFIX }}/xorb-${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'
    
    - name: Run Grype vulnerability scanner
      run: |
        # Install grype
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Scan with grype
        grype ${{ env.IMAGE_PREFIX }}/xorb-${{ matrix.service }}:latest \
          -o json > grype-${{ matrix.service }}.json
    
    - name: Container security benchmark
      run: |
        # Pull image for local scanning
        docker pull ${{ env.IMAGE_PREFIX }}/xorb-${{ matrix.service }}:latest
        
        # Run container security checks
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd):/tmp aquasec/trivy config /tmp
    
    - name: Policy compliance check
      run: |
        # Install Open Policy Agent
        curl -L -o opa https://openpolicyagent.org/downloads/v0.58.0/opa_linux_amd64_static
        chmod +x opa
        sudo mv opa /usr/local/bin/
        
        # Check container policies
        docker run --rm ${{ env.IMAGE_PREFIX }}/xorb-${{ matrix.service }}:latest whoami > container-user.txt
        
        # Verify non-root user
        if grep -q "root" container-user.txt; then
          echo "::error::Container running as root user - security violation"
          exit 1
        else
          echo "✅ Container running as non-root user"
        fi
    
    - name: SBOM vulnerability analysis
      run: |
        # Download SBOM artifacts
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -L -o sbom.json \
          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | jq -r ".artifacts[] | select(.name==\"sbom-${{ matrix.service }}\") | .id")/zip"
        
        # Analyze SBOM for vulnerabilities
        if [ -f sbom.json ]; then
          grype sbom:sbom.json -o json > sbom-vulnerabilities-${{ matrix.service }}.json || true
        fi
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-${{ matrix.service }}
        path: |
          trivy-${{ matrix.service }}.sarif
          grype-${{ matrix.service }}.json
          sbom-vulnerabilities-${{ matrix.service }}.json
          container-user.txt
        retention-days: 30
    
    - name: Security gate enforcement
      run: |
        python3 << 'EOF'
        import json
        import sys
        
        # Check Grype results for critical vulnerabilities
        try:
            with open('grype-${{ matrix.service }}.json', 'r') as f:
                grype_data = json.load(f)
                
            critical_vulns = []
            high_vulns = []
            
            for match in grype_data.get('matches', []):
                severity = match.get('vulnerability', {}).get('severity', '').upper()
                if severity == 'CRITICAL':
                    critical_vulns.append(match)
                elif severity == 'HIGH':
                    high_vulns.append(match)
            
            print(f"Found {len(critical_vulns)} critical and {len(high_vulns)} high severity vulnerabilities")
            
            # Fail if critical vulnerabilities found
            if len(critical_vulns) > 0:
                print("::error::Critical vulnerabilities found - blocking deployment")
                for vuln in critical_vulns[:5]:  # Show first 5
                    cve = vuln.get('vulnerability', {}).get('id', 'Unknown')
                    package = vuln.get('artifact', {}).get('name', 'Unknown')
                    print(f"::error::Critical: {cve} in {package}")
                sys.exit(1)
            
            # Warn on high severity
            if len(high_vulns) > 10:
                print("::warning::High number of high-severity vulnerabilities found")
                
        except Exception as e:
            print(f"Could not analyze security results: {e}")
        EOF

  # ============================================================================
  # DEPLOYMENT AUTOMATION
  # ============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, test-matrix]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
    
    - name: Deploy to staging
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          set -e
          cd /opt/xorb
          
          # Update code
          git fetch origin
          git checkout develop
          git pull origin develop
          
          # Deploy using blue-green strategy
          make bg-deploy VERSION=${{ github.sha }}
          
          # Run health checks
          make verify-deployment
        EOF
    
    - name: Run post-deployment tests
      run: |
        # Wait for deployment to stabilize
        sleep 30
        
        # Test staging endpoints
        curl -f https://${{ secrets.STAGING_HOST }}/health
        curl -f https://${{ secrets.STAGING_HOST }}/api/v1/status
        
        # Run smoke tests against staging
        python3 tests/smoke/staging_smoke_tests.py

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, test-matrix]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Pre-deployment validation
      run: |
        # Validate all security scans passed
        echo "Validating security scans..."
        
        # Check if any critical vulnerabilities were found
        python3 << 'EOF'
        import os
        import sys
        
        # This would check the security scan results
        # Implementation depends on your security scanning setup
        print("✅ Security validation passed")
        EOF
    
    - name: Configure SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
    
    - name: Deploy to production
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          set -e
          cd /opt/xorb
          
          # Create backup
          make prod-backup
          
          # Update code
          git fetch origin
          git checkout main
          git pull origin main
          
          # Zero-downtime deployment
          make zero-downtime-deploy VERSION=${{ github.sha }}
          
          # Comprehensive validation
          make verify-deployment
          make hardening-check
        EOF
    
    - name: Post-deployment validation
      run: |
        # Wait for deployment to stabilize
        sleep 60
        
        # Comprehensive health checks
        curl -f https://${{ secrets.PRODUCTION_HOST }}/health
        curl -f https://${{ secrets.PRODUCTION_HOST }}/api/v1/status
        
        # Check metrics endpoint
        curl -f https://${{ secrets.PRODUCTION_HOST }}/metrics
        
        # Validate security hardening
        python3 scripts/verify_hardened_deploy.py --host ${{ secrets.PRODUCTION_HOST }}
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "🚀 Production deployment successful!"
        echo "Version: ${{ github.sha }}"
        echo "Time: $(date -u)"
    
    - name: Emergency rollback
      if: failure()
      run: |
        echo "🚨 Production deployment failed - initiating emergency rollback"
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/xorb
          make emergency-rollback
        EOF

  # ============================================================================
  # CLEANUP AND REPORTING
  # ============================================================================
  
  cleanup-and-report:
    name: Cleanup and Report
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Collect all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Generate deployment report
      run: |
        python3 << 'EOF'
        import json
        import os
        from datetime import datetime
        
        report = {
            "workflow_run": "${{ github.run_id }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "timestamp": datetime.utcnow().isoformat(),
            "event": "${{ github.event_name }}",
            "actor": "${{ github.actor }}",
            "summary": {
                "security_scans": "completed",
                "tests": "passed",
                "deployment": "success" if "${{ job.status }}" == "success" else "failed"
            }
        }
        
        with open('deployment-report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        print("📊 Deployment Report Generated")
        print(json.dumps(report, indent=2))
        EOF
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment-report.json
        retention-days: 90
    
    - name: Clean up old artifacts
      run: |
        # This would clean up old artifacts and container images
        echo "🧹 Cleanup completed"
    
    - name: Update deployment status
      if: always()
      run: |
        echo "Workflow completed with status: ${{ job.status }}"