# XORB Platform - Unified Docker Compose Configuration
# Supports development, staging, and production environments
version: '3.8'

x-common-environment: &common-environment
  ENVIRONMENT: ${ENVIRONMENT:-development}
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  DATABASE_URL: postgresql://xorb:${DB_PASSWORD:-xorb_password}@postgres:5432/${DB_NAME:-xorb}
  REDIS_URL: redis://redis:6379/0
  JWT_SECRET: ${JWT_SECRET:-dev-secret-change-in-production}
  TEMPORAL_HOST: temporal:7233

x-common-volumes: &common-volumes
  - ./logs:/app/logs
  - ./data:/app/data

services:
  # PostgreSQL Database
  postgres:
    image: ankane/pgvector:v0.5.1
    environment:
      POSTGRES_DB: ${DB_NAME:-xorb}
      POSTGRES_USER: xorb
      POSTGRES_PASSWORD: ${DB_PASSWORD:-xorb_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xorb -d ${DB_NAME:-xorb}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Temporal Workflow Engine
  temporal:
    image: temporalio/temporal:1.22.4
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=xorb
      - POSTGRES_PWD=${DB_PASSWORD:-xorb_password}
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    volumes:
      - ./infra/temporal:/etc/temporal/config/dynamicconfig
    ports:
      - "7233:7233"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Temporal Web UI
  temporal-ui:
    image: temporalio/ui:2.21.3
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    ports:
      - "8233:8080"
    depends_on:
      - temporal
    restart: unless-stopped

  # XORB API Service
  api:
    build:
      context: .
      target: ${BUILD_TARGET:-development}
    environment:
      <<: *common-environment
      API_HOST: 0.0.0.0
      API_PORT: 8000
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
    volumes: *common-volumes
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # XORB Orchestrator Service
  orchestrator:
    build:
      context: .
      dockerfile: src/orchestrator/Dockerfile
    environment:
      <<: *common-environment
      SERVICE_NAME: orchestrator
    volumes: *common-volumes
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # XORB Worker Service
  worker:
    build:
      context: .
      dockerfile: src/services/worker/Dockerfile
    environment:
      <<: *common-environment
      SERVICE_NAME: worker
      WORKER_ID: ${WORKER_ID:-worker-001}
    volumes: *common-volumes
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # Monitoring Stack (optional)
  prometheus:
    image: prom/prometheus:v2.45.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    profiles: ["monitoring"]
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.0
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana/:/etc/grafana/provisioning/
    ports:
      - "3000:3000"
    profiles: ["monitoring"]
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
