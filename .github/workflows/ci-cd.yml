name: Xorb PTaaS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_lowercase }}

jobs:
  # Code quality and security checks
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Code formatting check (Ruff)
      run: poetry run ruff format --check .

    - name: Linting (Ruff)
      run: poetry run ruff check .

    - name: Type checking (MyPy)
      run: poetry run mypy xorb_common/ services/

    - name: Security scan (Bandit)
      run: poetry run bandit -r xorb_common/ services/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

  # Run tests
  test:
    runs-on: ubuntu-latest
    needs: quality-check
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: xorb_test
          POSTGRES_USER: xorb
          POSTGRES_PASSWORD: xorb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://xorb:xorb_test@localhost:5432/xorb_test
        REDIS_URL: redis://localhost:6379/0
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
      run: |
        poetry run pytest \
          --cov=xorb_common \
          --cov=services \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80 \
          -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  # Build and scan Docker images
  build-and-scan:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [api, worker, orchestrator, scanner, triage, payments, scheduler, researcher-portal]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create remote Pi builder
      if: secrets.PI_IP != ''
      env:
        PI_IP: ${{ secrets.PI_IP }}
      run: |
        # Create remote builder for ARM64 builds on Pi
        docker buildx create tcp://$PI_IP:2376 --name remote-pi --driver-opt network=host || true
        docker buildx use remote-pi || docker buildx use default

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}/xorb-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: compose/Dockerfile.${{ matrix.service }}
        push: false
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/xorb-${{ matrix.service }}.tar

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        input: /tmp/xorb-${{ matrix.service }}.tar
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'

    - name: Load image for runtime security scan
      run: docker load --input /tmp/xorb-${{ matrix.service }}.tar

    - name: Run container security benchmark
      run: |
        # Install docker-bench-security
        git clone https://github.com/docker/docker-bench-security.git
        cd docker-bench-security
        ./docker-bench-security.sh -c container_images
      continue-on-error: true

    - name: Push image on main branch
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: compose/Dockerfile.${{ matrix.service }}
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment
      run: |
        cp compose/.env.example compose/.env
        # Generate JWT keys for testing
        python compose/security/jwt-config.py >> compose/.env
        
        # Set test values
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_TEST }}" >> compose/.env
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY_TEST }}" >> compose/.env
        echo "JWT_SECRET_KEY=test_secret_key_minimum_32_characters_long" >> compose/.env

    - name: Generate TLS certificates
      run: |
        cd compose/security
        ./generate-certs.sh

    - name: Start services
      run: |
        cd compose
        docker-compose up -d
        
        # Wait for services to be ready
        timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:8001/health; do sleep 5; done'

    - name: Run integration tests
      run: |
        cd compose
        docker-compose exec -T api pytest tests/integration/ -v

    - name: Run end-to-end tests
      run: |
        # Test the full PTaaS workflow
        python scripts/e2e-test.py

    - name: Collect service logs
      if: failure()
      run: |
        cd compose
        docker-compose logs > integration-test-logs.txt

    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-logs
        path: compose/integration-test-logs.txt

    - name: Cleanup
      if: always()
      run: |
        cd compose
        docker-compose down -v

  # Deploy to staging/production
  deploy:
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Deploy to production server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          set -e
          
          # Update repository
          cd /opt/xorb
          git pull origin main
          
          # Apply EPYC optimizations
          sudo tuned-adm profile throughput-performance
          
          # Update environment configuration
          cp compose/.env.example compose/.env
          
          # Regenerate certificates if needed
          if [ ! -f compose/security/certs/xorb-ca.crt ]; then
            cd compose/security
            ./generate-certs.sh
            cd ../..
          fi
          
          # Deploy with zero downtime
          cd compose
          docker-compose pull
          docker-compose up -d
          
          # Wait for health checks
          timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
          
          # Run post-deployment tests
          docker-compose exec -T api python -m pytest tests/smoke/ -v
          
          # Clean up old images
          docker image prune -f
        EOF

    - name: Verify deployment
      run: |
        # Test production endpoints
        curl -f https://${{ secrets.DEPLOY_HOST }}/health
        curl -f https://${{ secrets.DEPLOY_HOST }}:3000/health

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Deployment successful to production"
        # Add Slack/Discord notification here if needed

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Deployment failed"
        # Add failure notification here