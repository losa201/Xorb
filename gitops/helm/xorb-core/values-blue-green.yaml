# Blue-Green Deployment Values for Xorb Security Intelligence Platform

global:
  xorb:
    environment: production
    blueGreen:
      enabled: true
      activeColor: blue  # Will be overridden by deployment script
      strategy: automatic
    version: "2.0.0"
    registry: ghcr.io/xorb
    imagePullSecrets:
      - name: ghcr-secret
    
  security:
    podSecurityPolicy:
      enabled: true
    networkPolicy:
      enabled: true
      ingress:
        enabled: true
        allowedNamespaces:
          - istio-system
          - ingress-nginx
      egress:
        enabled: true
        allowedPorts:
          - 443  # HTTPS
          - 53   # DNS
          - 6379 # Redis
          - 5432 # PostgreSQL

# API Service Configuration
api:
  enabled: true
  replicaCount: 3
  image:
    repository: ghcr.io/xorb/xorb-api
    tag: "" # Will be overridden by deployment script
    pullPolicy: Always
  
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 2
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8000
    name: xorb-api
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - host: api.xorb.internal
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: xorb-api-tls
        hosts:
          - api.xorb.internal
  
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
        - type: Percent
          value: 25
          periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 30
        policies:
        - type: Percent
          value: 50
          periodSeconds: 30
  
  health:
    livenessProbe:
      httpGet:
        path: /health
        port: 8000
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      httpGet:
        path: /ready
        port: 8000
        scheme: HTTP
      initialDelaySeconds: 15
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 2
      successThreshold: 1
    startupProbe:
      httpGet:
        path: /startup
        port: 8000
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 10
      successThreshold: 1

# Worker Service Configuration
worker:
  enabled: true
  replicaCount: 2
  image:
    repository: ghcr.io/xorb/xorb-worker
    tag: "" # Will be overridden by deployment script
    pullPolicy: Always
  
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  
  resources:
    requests:
      cpu: 300m
      memory: 512Mi
    limits:
      cpu: 2000m
      memory: 2Gi
  
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 8
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 85
  
  nodeSelector:
    xorb.io/worker-node: "true"
  
  tolerations:
    - key: "xorb.io/worker"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"

# Orchestrator Service Configuration
orchestrator:
  enabled: true
  replicaCount: 2
  image:
    repository: ghcr.io/xorb/xorb-orchestrator
    tag: "" # Will be overridden by deployment script
    pullPolicy: Always
  
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
    name: xorb-orchestrator
  
  resources:
    requests:
      cpu: 400m
      memory: 512Mi
    limits:
      cpu: 2000m
      memory: 2Gi
  
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - xorb-orchestrator
          topologyKey: kubernetes.io/hostname

# Embedding Service Configuration
embedding:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/xorb/xorb-embedding
    tag: "" # Will be overridden by deployment script
    pullPolicy: Always
  
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2000m
      memory: 4Gi
  
  pdb:
    enabled: true
    minAvailable: 1

# Configuration Management
configMap:
  enabled: true
  data:
    # Application Configuration
    LOG_LEVEL: "INFO"
    ENVIRONMENT: "production"
    DEBUG: "false"
    
    # Blue-Green Configuration
    BLUE_GREEN_MODE: "true"
    DEPLOYMENT_STRATEGY: "blue-green"
    HEALTH_CHECK_INTERVAL: "30"
    READINESS_CHECK_TIMEOUT: "5"
    
    # Redis Configuration
    REDIS_HOST: "redis-master"
    REDIS_PORT: "6379"
    REDIS_SSL: "false"
    REDIS_SENTINEL_ENABLED: "false"
    
    # Database Configuration
    DATABASE_POOL_SIZE: "20"
    DATABASE_MAX_OVERFLOW: "10"
    DATABASE_POOL_TIMEOUT: "30"
    DATABASE_POOL_RECYCLE: "3600"
    
    # Security Configuration
    CORS_ORIGINS: "[]"
    CSRF_PROTECTION: "true"
    RATE_LIMITING: "true"
    
    # Monitoring Configuration
    METRICS_ENABLED: "true"
    TRACING_ENABLED: "true"
    PROMETHEUS_METRICS_PATH: "/metrics"
    
    # Performance Configuration
    WORKER_CONCURRENCY: "4"
    MAX_CONCURRENT_REQUESTS: "100"
    REQUEST_TIMEOUT: "300"

# Secrets Configuration
secrets:
  enabled: true
  data:
    # Database credentials
    database-url: ""  # Set in production-secrets.yaml
    
    # API Keys
    openrouter-api-key: ""  # Set in production-secrets.yaml
    nvidia-api-key: ""  # Set in production-secrets.yaml
    hackerone-api-key: ""  # Set in production-secrets.yaml
    
    # JWT Configuration
    jwt-secret-key: ""  # Set in production-secrets.yaml
    
    # Redis credentials
    redis-password: ""  # Set in production-secrets.yaml

# Service Monitor for Prometheus
serviceMonitor:
  enabled: true
  namespace: xorb-monitoring
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  labels:
    prometheus: kube-prometheus
  honorLabels: true

# Network Policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  
  ingress:
    rules:
      - from:
        - namespaceSelector:
            matchLabels:
              name: istio-system
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - podSelector:
            matchLabels:
              app.kubernetes.io/part-of: xorb
        ports:
        - protocol: TCP
          port: 8000
        - protocol: TCP
          port: 8080
  
  egress:
    rules:
      - to: []
        ports:
        - protocol: TCP
          port: 443  # HTTPS
        - protocol: TCP
          port: 53   # DNS
        - protocol: UDP
          port: 53   # DNS
      - to:
        - namespaceSelector:
            matchLabels:
              name: xorb-system
        ports:
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 5432  # PostgreSQL

# Pod Disruption Budgets
podDisruptionBudget:
  api:
    enabled: true
    minAvailable: 1
  worker:
    enabled: true
    minAvailable: 1
  orchestrator:
    enabled: true
    minAvailable: 1

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  fsGroupChangePolicy: "OnRootMismatch"
  seccompProfile:
    type: RuntimeDefault

containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault

# Persistent Volumes
persistence:
  enabled: true
  storageClass: "ssd"
  accessMode: ReadWriteOnce
  size: 10Gi
  
  # Temporary directories
  tmp:
    enabled: true
    sizeLimit: 1Gi
  var:
    enabled: true
    sizeLimit: 2Gi

# Deployment Annotations
deploymentAnnotations:
  deployment.kubernetes.io/revision: "1"
  meta.helm.sh/release-name: "xorb-core"
  meta.helm.sh/release-namespace: "xorb-system"

# Pod Annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"
  prometheus.io/path: "/metrics"
  sidecar.istio.io/inject: "false"  # Disable if using Istio

# Node Selection
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity Rules
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/part-of
            operator: In
            values:
            - xorb
        topologyKey: kubernetes.io/hostname

# Resource Quotas
resourceQuota:
  enabled: true
  hard:
    requests.cpu: "4"
    requests.memory: "8Gi"
    limits.cpu: "16"
    limits.memory: "32Gi"
    persistentvolumeclaims: "10"
    services: "10"
    secrets: "20"
    configmaps: "20"

# Blue-Green Specific Settings
blueGreen:
  # Validation Settings
  validation:
    healthCheck:
      enabled: true
      timeout: 30
      retries: 3
    smokeTests:
      enabled: true
      timeout: 300
    loadTest:
      enabled: false  # Enable for critical deployments
      duration: 60
  
  # Traffic Splitting
  traffic:
    strategy: "switch"  # Options: switch, canary, gradual
    canaryPercentage: 10
    gradualSteps: [10, 25, 50, 75, 100]
    stepDuration: 300  # 5 minutes per step
  
  # Rollback Settings
  rollback:
    automatic: true
    triggers:
      healthCheckFailures: 3
      errorRateThreshold: 0.05  # 5%
      responseTimeThreshold: 2000  # 2 seconds
  
  # Cleanup Settings
  cleanup:
    automatic: true
    delay: 1800  # 30 minutes after successful deployment
    keepPrevious: false

# Monitoring and Alerting
monitoring:
  enabled: true
  
  # Grafana Dashboard
  dashboard:
    enabled: true
    title: "Xorb Blue-Green Deployment"
    tags:
      - xorb
      - blue-green
      - deployment
  
  # Prometheus Rules
  prometheusRules:
    enabled: true
    rules:
      - alert: BlueGreenDeploymentFailed
        expr: xorb_deployment_status{status="failed"} > 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Blue-Green deployment failed"
          description: "Blue-Green deployment for {{ $labels.service }} has failed"
      
      - alert: HighErrorRateDuringDeployment
        expr: rate(xorb_http_requests_total{status=~"5.."}[5m]) > 0.05
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High error rate during deployment"
          description: "Error rate is {{ $value }} for {{ $labels.service }}"