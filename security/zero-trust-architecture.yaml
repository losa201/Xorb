---
# Zero Trust Network Architecture for Xorb 2.0
# Implements "never trust, always verify" security model

apiVersion: v1
kind: Namespace
metadata:
  name: xorb-zero-trust
  labels:
    security-model: "zero-trust"
    istio-injection: enabled

---
# Zero Trust Gateway
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: xorb-zero-trust-gateway
  namespace: xorb-zero-trust
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: xorb-tls-cert
    hosts:
    - api.xorb.ai
    - admin.xorb.ai
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - api.xorb.ai
    - admin.xorb.ai
    redirect:
      httpsRedirect: true

---
# mTLS Configuration for Service-to-Service Communication
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: xorb-system
spec:
  mtls:
    mode: STRICT

---
# Identity-Based Access Control
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: xorb-api-access-control
  namespace: xorb-system
spec:
  selector:
    matchLabels:
      app: xorb-api
  rules:
  # Allow authenticated users with valid JWT
  - from:
    - source:
        requestPrinciples: ["cluster.local/ns/xorb-system/sa/xorb-api"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/v1/*", "/health", "/metrics"]
    when:
    - key: request.auth.claims[role]
      values: ["user", "admin"]
    - key: request.headers[authorization]
      notValues: [""]

  # Admin-only endpoints
  - from:
    - source:
        requestPrinciples: ["cluster.local/ns/xorb-system/sa/xorb-admin"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/admin/*"]
    when:
    - key: request.auth.claims[role]
      values: ["admin"]

  # Public health check (restricted)
  - from:
    - source: {}
    to:
    - operation:
        methods: ["GET"]
        paths: ["/health"]

---
# Worker Service Access Control
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: xorb-worker-access-control
  namespace: xorb-system
spec:
  selector:
    matchLabels:
      app: xorb-worker
  rules:
  # Only orchestrator can communicate with workers
  - from:
    - source:
        principals: ["cluster.local/ns/xorb-system/sa/xorb-orchestrator"]
    to:
    - operation:
        methods: ["POST"]
        paths: ["/execute", "/status"]

  # Metrics access for monitoring
  - from:
    - source:
        principals: ["cluster.local/ns/xorb-monitoring/sa/prometheus"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/metrics"]

---
# Database Access Control
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: database-access-control
  namespace: xorb-system
spec:
  selector:
    matchLabels:
      app: postgres
  rules:
  # Only API and Worker can access database
  - from:
    - source:
        principals: 
        - "cluster.local/ns/xorb-system/sa/xorb-api"
        - "cluster.local/ns/xorb-system/sa/xorb-worker"
    to:
    - operation:
        ports: ["5432"]

---
# Redis Access Control
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: redis-access-control
  namespace: xorb-system
spec:
  selector:
    matchLabels:
      app: redis
  rules:
  # API and Worker can access Redis
  - from:
    - source:
        principals: 
        - "cluster.local/ns/xorb-system/sa/xorb-api"
        - "cluster.local/ns/xorb-system/sa/xorb-worker"
    to:
    - operation:
        ports: ["6379"]

---
# Device Identity and Certificate Management
apiVersion: v1
kind: ConfigMap
metadata:
  name: zero-trust-config
  namespace: xorb-zero-trust
data:
  config.yaml: |
    zero_trust:
      device_identity:
        enabled: true
        certificate_rotation: "24h"
        trust_store: "/etc/ssl/certs/ca-certificates.crt"
        
      identity_verification:
        jwt_validation:
          issuer: "https://xorb.ai/auth"
          audience: "xorb-api"
          algorithms: ["RS256"]
          
        device_certificates:
          enabled: true
          ca_bundle: "/etc/ssl/device-ca/ca.crt"
          validation_mode: "strict"
          
      network_segmentation:
        microsegmentation: true
        default_deny: true
        log_all_denied: true
        
      continuous_monitoring:
        enabled: true
        behavioral_analysis: true
        anomaly_detection: true
        threat_scoring: true

---
# JWT Authentication Policy
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: jwt-authentication
  namespace: xorb-system
spec:
  selector:
    matchLabels:
      app: xorb-api
  jwtRules:
  - issuer: "https://xorb.ai/auth"
    audiences:
    - "xorb-api"
    jwksUri: "https://xorb.ai/auth/.well-known/jwks.json"
    forwardOriginalToken: true

---
# Device Certificate Authentication
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: device-cert-authentication
  namespace: xorb-system
spec:
  selector:
    matchLabels:
      app: xorb-api
  jwtRules:
  - issuer: "device-ca.xorb.ai"
    audiences:
    - "xorb-devices"
    jwksUri: "https://device-ca.xorb.ai/.well-known/jwks.json"

---
# Network Segmentation Policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: zero-trust-network-segmentation
  namespace: xorb-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  
  # Default deny all
  ingress: []
  egress: []

---
# API Tier Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-tier-policy
  namespace: xorb-system
spec:
  podSelector:
    matchLabels:
      tier: api
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow from ingress gateway
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 8000
      
  # Allow from monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: xorb-monitoring
    ports:
    - protocol: TCP
      port: 8000
      
  egress:
  # Allow to data tier
  - to:
    - podSelector:
        matchLabels:
          tier: data
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
      
  # Allow external NVIDIA API
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Data Tier Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: data-tier-policy
  namespace: xorb-system
spec:
  podSelector:
    matchLabels:
      tier: data
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Only allow from API and Worker tiers
  - from:
    - podSelector:
        matchLabels:
          tier: api
    - podSelector:
        matchLabels:
          tier: worker
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
      
  egress:
  # Minimal egress for database operations
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Continuous Trust Evaluation Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trust-evaluator
  namespace: xorb-zero-trust
spec:
  replicas: 2
  selector:
    matchLabels:
      app: trust-evaluator
  template:
    metadata:
      labels:
        app: trust-evaluator
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: trust-evaluator-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      containers:
      - name: evaluator
        image: xorb/trust-evaluator:2.0.0
        ports:
        - containerPort: 8080
        - containerPort: 9090
        env:
        - name: EVALUATION_INTERVAL
          value: "30s"
        - name: TRUST_THRESHOLD
          value: "0.8"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: trust-evaluator-secrets
              key: redis-url
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10

---
# Trust Evaluator Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trust-evaluator-sa
  namespace: xorb-zero-trust

---
# Trust Evaluator RBAC
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: trust-evaluator
rules:
- apiGroups: ["security.istio.io"]
  resources: ["authorizationpolicies", "requestauthentications"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: trust-evaluator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: trust-evaluator
subjects:
- kind: ServiceAccount
  name: trust-evaluator-sa
  namespace: xorb-zero-trust

---
# Trust Evaluation Metrics
apiVersion: v1
kind: Service
metadata:
  name: trust-evaluator
  namespace: xorb-zero-trust
  labels:
    app: trust-evaluator
spec:
  ports:
  - port: 8080
    name: http
  - port: 9090
    name: metrics
  selector:
    app: trust-evaluator

---
# ServiceMonitor for Trust Evaluator
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: trust-evaluator-metrics
  namespace: xorb-zero-trust
spec:
  selector:
    matchLabels:
      app: trust-evaluator
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics