version: '3.8'

services:
  # PostgreSQL Database with pgvector extension
  postgres-dev:
    image: ankane/pgvector:v0.5.1
    container_name: xorb-postgres-dev
    environment:
      POSTGRES_DB: xorb_dev
      POSTGRES_USER: xorb_dev
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: >
      postgres 
      -c shared_preload_libraries=vector
      -c log_statement=all
      -c log_duration=on
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c max_connections=200
      -c shared_buffers=128MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xorb_dev -d xorb_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Redis
  redis-dev:
    image: redis:7-alpine
    container_name: xorb-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Service
  api-dev:
    build:
      context: .
      dockerfile: src/api/Dockerfile
      target: development
      cache_from:
        - xorb/api:dev-cache
    container_name: xorb-api-dev
    environment:
      - XORB_ENV=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_HOST=postgres-dev
      - DATABASE_PORT=5432
      - DATABASE_NAME=xorb_dev
      - DATABASE_USERNAME=xorb_dev
      - DATABASE_PASSWORD=dev_password_123
      - REDIS_HOST=redis-dev
      - REDIS_PORT=6379
      - JWT_SECRET=dev_jwt_secret_key_very_long_for_development_only
      - ENCRYPTION_KEY=dev_encryption_key_32_chars_long!!
      - CORS_ALLOW_ORIGINS=http://localhost:3000,http://localhost:5173
      - SKIP_MIGRATIONS=false
    ports:
      - "8000:8000"
    volumes:
      - ./src/api:/app:ro
      - ./config:/app/config:ro
      - ./src/common:/app/src/common:ro
      - api_dev_logs:/app/logs
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-dev.rule=Host(`api-dev.xorb.local`)"
      - "traefik.http.services.api-dev.loadbalancer.server.port=8000"

  # Orchestrator Service
  orchestrator-dev:
    build:
      context: .
      dockerfile: src/orchestrator/Dockerfile
      target: development
      cache_from:
        - xorb/orchestrator:dev-cache
    container_name: xorb-orchestrator-dev
    environment:
      - XORB_ENV=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - TEMPORAL_HOST=temporal-dev:7233
      - DATABASE_HOST=postgres-dev
      - DATABASE_PORT=5432
      - DATABASE_NAME=xorb_dev
      - DATABASE_USERNAME=xorb_dev
      - DATABASE_PASSWORD=dev_password_123
      - REDIS_HOST=redis-dev
      - REDIS_PORT=6379
    ports:
      - "8001:8001"
    volumes:
      - ./src/orchestrator:/app:ro
      - ./config:/app/config:ro
      - ./src/common:/app/src/common:ro
      - orchestrator_dev_logs:/app/logs
    depends_on:
      temporal-dev:
        condition: service_healthy
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Worker Service
  worker-dev:
    build:
      context: .
      dockerfile: src/services/worker/Dockerfile
      target: development
      cache_from:
        - xorb/worker:dev-cache
    environment:
      - XORB_ENV=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_HOST=postgres-dev
      - DATABASE_PORT=5432
      - DATABASE_NAME=xorb_dev
      - DATABASE_USERNAME=xorb_dev
      - DATABASE_PASSWORD=dev_password_123
      - REDIS_HOST=redis-dev
      - REDIS_PORT=6379
      - WORKER_CONCURRENCY=4
      - WORKER_MAX_MEMORY=256m
    volumes:
      - ./src/services/worker:/app:ro
      - ./config:/app/config:ro
      - ./src/common:/app/src/common:ro
      - worker_dev_logs:/app/logs
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Temporal Development
  temporal-dev:
    image: temporalio/auto-setup:1.22.4
    container_name: xorb-temporal-dev
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=xorb_dev
      - POSTGRES_PWD=dev_password_123
      - POSTGRES_SEEDS=postgres-dev
      - POSTGRES_DB=temporal_dev
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    ports:
      - "7233:7233"
      - "8233:8233"
    volumes:
      - temporal_dev_data:/etc/temporal/config/dynamicconfig
    depends_on:
      postgres-dev:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal-dev:7233", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Monitoring Stack
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: xorb-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infra/monitoring/prometheus-rules.yml:/etc/prometheus/rules.yml
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana-dev:
    image: grafana/grafana:latest
    container_name: xorb-grafana-dev
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=dev_admin_123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - ./infra/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infra/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_dev_data:/var/lib/grafana

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  temporal_dev_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local
  api_dev_logs:
    driver: local
  orchestrator_dev_logs:
    driver: local
  worker_dev_logs:
    driver: local

networks:
  default:
    name: xorb-dev-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16