{
  "name": "Xorb Cost Monitoring Dashboard",
  "description": "Phase 5.3 - Real-time cost monitoring with GPT spend vs plan analysis",
  "version": 1,
  "creator_id": 1,
  "created_at": "2024-01-15T12:00:00Z",
  "cards": [
    {
      "id": 1,
      "name": "GPT Spend vs Plan Limits",
      "description": "Weekly GPT spending compared to plan limits",
      "display": "line",
      "dataset_query": {
        "type": "native",
        "native": {
          "query": "SELECT \n  DATE_TRUNC('week', ce.created_at) as week,\n  o.plan_type,\n  o.id as org_id,\n  SUM(ce.amount) as weekly_spend,\n  CASE \n    WHEN o.plan_type = 'Growth' THEN 50.0\n    WHEN o.plan_type = 'Pro' THEN 200.0\n    WHEN o.plan_type = 'Enterprise' THEN 1000.0\n    ELSE 50.0\n  END as plan_limit,\n  (SUM(ce.amount) / CASE \n    WHEN o.plan_type = 'Growth' THEN 50.0\n    WHEN o.plan_type = 'Pro' THEN 200.0\n    WHEN o.plan_type = 'Enterprise' THEN 1000.0\n    ELSE 50.0\n  END) * 100 as usage_percentage\nFROM cost_entries ce\nJOIN orgs o ON ce.organization_id = o.id\nWHERE ce.category = 'ai_services'\n  AND ce.created_at >= NOW() - INTERVAL '8 weeks'\nGROUP BY DATE_TRUNC('week', ce.created_at), o.plan_type, o.id\nORDER BY week DESC, plan_type"
        }
      },
      "visualization_settings": {
        "graph.dimensions": ["week", "plan_type"],
        "graph.metrics": ["weekly_spend", "plan_limit"],
        "graph.colors": {
          "weekly_spend": "#509EE3",
          "plan_limit": "#EF8C8C"
        },
        "graph.show_goal": true,
        "graph.goal_value": 100,
        "graph.goal_label": "Plan Limit"
      },
      "position": {
        "row": 0,
        "col": 0,
        "sizeX": 12,
        "sizeY": 6
      }
    },
    {
      "id": 2,
      "name": "Active Organizations by Plan",
      "description": "Distribution of organizations across plan types",
      "display": "pie",
      "dataset_query": {
        "type": "native",
        "native": {
          "query": "SELECT \n  plan_type,\n  COUNT(*) as org_count\nFROM orgs \nWHERE active = true\nGROUP BY plan_type\nORDER BY org_count DESC"
        }
      },
      "visualization_settings": {
        "pie.colors": {
          "Growth": "#A989C5",
          "Pro": "#EF8C8C", 
          "Enterprise": "#F9D45C"
        }
      },
      "position": {
        "row": 0,
        "col": 12,
        "sizeX": 6,
        "sizeY": 6
      }
    },
    {
      "id": 3,
      "name": "SaaS Gross Margin Analysis",
      "description": "Revenue vs costs for gross margin calculation",
      "display": "combo",
      "dataset_query": {
        "type": "native",
        "native": {
          "query": "WITH monthly_metrics as (\n  SELECT \n    DATE_TRUNC('month', created_at) as month,\n    SUM(amount) as total_costs\n  FROM cost_entries\n  WHERE created_at >= NOW() - INTERVAL '12 months'\n  GROUP BY DATE_TRUNC('month', created_at)\n),\nmonthly_revenue as (\n  SELECT \n    DATE_TRUNC('month', created_at) as month,\n    SUM(amount / 100.0) as total_revenue  -- Convert cents to dollars\n  FROM stripe_charges\n  WHERE status = 'succeeded'\n    AND created_at >= NOW() - INTERVAL '12 months'\n  GROUP BY DATE_TRUNC('month', created_at)\n)\nSELECT \n  COALESCE(mm.month, mr.month) as month,\n  COALESCE(mm.total_costs, 0) as costs,\n  COALESCE(mr.total_revenue, 0) as revenue,\n  COALESCE(mr.total_revenue, 0) - COALESCE(mm.total_costs, 0) as gross_profit,\n  CASE \n    WHEN COALESCE(mr.total_revenue, 0) > 0 THEN \n      ((COALESCE(mr.total_revenue, 0) - COALESCE(mm.total_costs, 0)) / COALESCE(mr.total_revenue, 0)) * 100\n    ELSE 0\n  END as gross_margin_percent\nFROM monthly_metrics mm\nFULL OUTER JOIN monthly_revenue mr ON mm.month = mr.month\nORDER BY month DESC"
        }
      },
      "visualization_settings": {
        "graph.dimensions": ["month"],
        "graph.metrics": ["costs", "revenue", "gross_margin_percent"],
        "combo.series_settings": {
          "gross_margin_percent": {
            "axis": "right",
            "display": "line"
          }
        }
      },
      "position": {
        "row": 6,
        "col": 0,
        "sizeX": 18,
        "sizeY": 6
      }
    },
    {
      "id": 4,
      "name": "Cost Breakdown by Service",
      "description": "Current month spending by service provider",
      "display": "bar",
      "dataset_query": {
        "type": "native",
        "native": {
          "query": "SELECT \n  service,\n  SUM(amount) as total_cost,\n  COUNT(*) as transaction_count\nFROM cost_entries\nWHERE created_at >= DATE_TRUNC('month', NOW())\nGROUP BY service\nORDER BY total_cost DESC"
        }
      },
      "visualization_settings": {
        "graph.dimensions": ["service"],
        "graph.metrics": ["total_cost"],
        "graph.colors": {
          "openai": "#00A86B",
          "anthropic": "#FF6B35",
          "stripe": "#635BFF",
          "aws": "#FF9900"
        }
      },
      "position": {
        "row": 12,
        "col": 0,
        "sizeX": 9,
        "sizeY": 6
      }
    },
    {
      "id": 5,
      "name": "Billing Overage Alerts",
      "description": "Recent billing overage alerts by organization",
      "display": "table",
      "dataset_query": {
        "type": "native",
        "native": {
          "query": "SELECT \n  ca.org_id,\n  o.name as org_name,\n  ca.plan_type,\n  ca.alert_type,\n  ca.message,\n  ca.triggered_at,\n  ca.resolved_at,\n  CASE WHEN ca.resolved_at IS NULL THEN 'Active' ELSE 'Resolved' END as status\nFROM cost_alerts ca\nJOIN orgs o ON ca.org_id = o.id\nWHERE ca.triggered_at >= NOW() - INTERVAL '30 days'\nORDER BY ca.triggered_at DESC\nLIMIT 50"
        }
      },
      "visualization_settings": {
        "table.columns": [
          {"name": "org_name", "display_name": "Organization", "width": 150},
          {"name": "plan_type", "display_name": "Plan", "width": 80},
          {"name": "alert_type", "display_name": "Alert Type", "width": 120},
          {"name": "message", "display_name": "Message", "width": 300},
          {"name": "status", "display_name": "Status", "width": 80},
          {"name": "triggered_at", "display_name": "Triggered", "width": 120}
        ]
      },
      "position": {
        "row": 12,
        "col": 9,
        "sizeX": 9,
        "sizeY": 6
      }
    },
    {
      "id": 6,
      "name": "OpenRouter Usage Tracking",
      "description": "OpenRouter API usage by model and organization",
      "display": "row",
      "dataset_query": {
        "type": "native",
        "native": {
          "query": "SELECT \n  ce.usage_data->>'model' as model,\n  ce.organization_id as org_id,\n  SUM((ce.usage_data->>'input_tokens')::int) as input_tokens,\n  SUM((ce.usage_data->>'output_tokens')::int) as output_tokens,\n  SUM(ce.amount) as total_cost,\n  COUNT(*) as request_count,\n  BOOL_OR((ce.usage_data->>'free_tier')::boolean) as is_free_tier\nFROM cost_entries ce\nWHERE ce.usage_data->>'provider' = 'openrouter'\n  AND ce.created_at >= NOW() - INTERVAL '7 days'\nGROUP BY ce.usage_data->>'model', ce.organization_id\nORDER BY input_tokens + output_tokens DESC\nLIMIT 20"
        }
      },
      "visualization_settings": {
        "table.columns": [
          {"name": "model", "display_name": "Model", "width": 200},
          {"name": "org_id", "display_name": "Org ID", "width": 100},
          {"name": "input_tokens", "display_name": "Input Tokens", "width": 100},
          {"name": "output_tokens", "display_name": "Output Tokens", "width": 100},
          {"name": "total_cost", "display_name": "Cost ($)", "width": 80},
          {"name": "request_count", "display_name": "Requests", "width": 80},
          {"name": "is_free_tier", "display_name": "Free Tier", "width": 80}
        ]
      },
      "position": {
        "row": 18,
        "col": 0,
        "sizeX": 18,
        "sizeY": 6
      }
    },
    {
      "id": 7,
      "name": "Plan Usage Ratios",
      "description": "Current usage vs plan limits across all organizations",
      "display": "gauge",
      "dataset_query": {
        "type": "native",
        "native": {
          "query": "WITH org_usage AS (\n  SELECT \n    o.id as org_id,\n    o.name as org_name,\n    o.plan_type,\n    -- GPT spending this week\n    COALESCE(SUM(ce.amount) FILTER (WHERE ce.category = 'ai_services' \n      AND ce.created_at >= DATE_TRUNC('week', NOW())), 0) as weekly_gpt_spend,\n    -- Asset count\n    (SELECT COUNT(*) FROM assets a WHERE a.org_id = o.id AND a.active = true) as asset_count\n  FROM orgs o\n  LEFT JOIN cost_entries ce ON ce.organization_id = o.id\n  WHERE o.active = true\n  GROUP BY o.id, o.name, o.plan_type\n)\nSELECT \n  org_name,\n  plan_type,\n  weekly_gpt_spend,\n  CASE \n    WHEN plan_type = 'Growth' THEN 50.0\n    WHEN plan_type = 'Pro' THEN 200.0\n    WHEN plan_type = 'Enterprise' THEN 1000.0\n    ELSE 50.0\n  END as gpt_limit,\n  (weekly_gpt_spend / CASE \n    WHEN plan_type = 'Growth' THEN 50.0\n    WHEN plan_type = 'Pro' THEN 200.0\n    WHEN plan_type = 'Enterprise' THEN 1000.0\n    ELSE 50.0\n  END) as gpt_usage_ratio,\n  asset_count,\n  CASE \n    WHEN plan_type = 'Growth' THEN 150\n    WHEN plan_type = 'Pro' THEN 500\n    WHEN plan_type = 'Enterprise' THEN 2000\n    ELSE 150\n  END as asset_limit,\n  (asset_count::float / CASE \n    WHEN plan_type = 'Growth' THEN 150\n    WHEN plan_type = 'Pro' THEN 500\n    WHEN plan_type = 'Enterprise' THEN 2000\n    ELSE 150\n  END) as asset_usage_ratio\nFROM org_usage\nORDER BY gpt_usage_ratio DESC"
        }
      },
      "visualization_settings": {
        "gauge.segments": [
          {"min": 0, "max": 0.7, "color": "#84BB4C"},
          {"min": 0.7, "max": 0.9, "color": "#F9CF48"},
          {"min": 0.9, "max": 1.0, "color": "#EF8C8C"},
          {"min": 1.0, "max": 2.0, "color": "#DC7350"}
        ]
      },
      "position": {
        "row": 24,
        "col": 0,
        "sizeX": 18,
        "sizeY": 8
      }
    },
    {
      "id": 8,
      "name": "Cost Trends - 90 Day View",
      "description": "Historical cost trends across all services",
      "display": "area",
      "dataset_query": {
        "type": "native",
        "native": {
          "query": "SELECT \n  DATE(created_at) as date,\n  service,\n  SUM(amount) as daily_cost\nFROM cost_entries\nWHERE created_at >= NOW() - INTERVAL '90 days'\nGROUP BY DATE(created_at), service\nORDER BY date, service"
        }
      },
      "visualization_settings": {
        "graph.dimensions": ["date"],
        "graph.metrics": ["daily_cost"],
        "graph.series_settings": {
          "daily_cost": {
            "display": "area"
          }
        },
        "stackable.stack_type": "stacked"
      },
      "position": {
        "row": 32,
        "col": 0,
        "sizeX": 18,
        "sizeY": 8
      }
    }
  ],
  "parameters": [
    {
      "id": "org_id_filter",
      "name": "Organization Filter",
      "type": "text",
      "default": null,
      "required": false
    },
    {
      "id": "date_range",
      "name": "Date Range",
      "type": "date/range",
      "default": "past30days",
      "required": false
    }
  ],
  "filters": [
    {
      "id": 1,
      "name": "Organization ID",
      "parameter_mappings": [
        {
          "parameter_id": "org_id_filter",
          "card_id": 1,
          "target": ["dimension", ["field-id", "organization_id"]]
        }
      ]
    }
  ],
  "auto_apply_filters": true,
  "cache_ttl": 300,
  "enable_embedding": false,
  "embedding_params": {},
  "collection_id": null,
  "public_uuid": null
}