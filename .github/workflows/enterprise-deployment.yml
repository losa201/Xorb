name: XORB Enterprise Deployment Pipeline

on:
  push:
    branches: [main, release/*]
    tags: [v*]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety semgrep
          docker pull aquasec/trivy:latest

      - name: Run Bandit security linter
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Run Safety dependency check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep SAST
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json || true
          semgrep --config=auto src/

      - name: Container security scan
        run: |
          docker build -t xorb-security-scan .
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image xorb-security-scan

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black mypy pytest-cov
          pip install -r requirements.lock

      - name: Run Black formatter check
        run: black --check --diff src/

      - name: Run Flake8 linting
        run: flake8 src/ --count --statistics

      - name: Run MyPy type checking
        run: mypy src/ --ignore-missing-imports

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    strategy:
      matrix:
        test-type: [unit, integration, security, performance]

    services:
      postgres:
        image: ankane/pgvector:v0.5.1
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: xorb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.lock
          pip install pytest pytest-asyncio pytest-cov pytest-xdist

      - name: Set up test environment
        run: |
          cp .env.template .env.test
          echo "DATABASE_URL=postgresql://postgres:test_password@localhost:5432/xorb_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "ENVIRONMENT=test" >> .env.test

      - name: Run ${{ matrix.test-type }} tests
        run: |
          export PYTHONPATH=$PWD/src:$PYTHONPATH
          pytest tests/${{ matrix.test-type }}/ -v --cov=src --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/xorb_test
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-type }}

  build-images:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push API image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Orchestrator image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/orchestrator/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-orchestrator
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/services/worker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-worker
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-suite, build-images]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name xorb-staging-cluster

      - name: Deploy with Helm
        run: |
          helm upgrade --install xorb-staging ./deploy/kubernetes/helm/xorb \
            --namespace xorb-staging \
            --create-namespace \
            --set image.tag=${{ needs.build-images.outputs.image-tag }} \
            --set environment=staging \
            --set ingress.hostname=staging.xorb-security.com \
            --values ./deploy/kubernetes/helm/xorb/values-staging.yaml \
            --wait --timeout=600s

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/xorb-api -n xorb-staging
          kubectl rollout status deployment/xorb-orchestrator -n xorb-staging
          kubectl rollout status deployment/xorb-worker -n xorb-staging

      - name: Run smoke tests
        run: |
          STAGING_URL="https://staging.xorb-security.com"
          curl -f $STAGING_URL/health || exit 1
          curl -f $STAGING_URL/readiness || exit 1

  security-compliance:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP scan
        run: |
          docker run --rm -v $(pwd):/zap/wrk:rw \
            owasp/zap2docker-stable zap-full-scan.py \
            -t https://staging.xorb-security.com \
            -r zap-report.html || true

      - name: Upload ZAP report
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: zap-report.html

      - name: Run compliance validation
        run: |
          python scripts/validate_compliance.py --environment=staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, security-compliance]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name xorb-production-cluster

      - name: Backup current deployment
        run: |
          kubectl get deployment xorb-api -n xorb-production -o yaml > backup-api.yaml
          kubectl get deployment xorb-orchestrator -n xorb-production -o yaml > backup-orchestrator.yaml

      - name: Deploy with blue-green strategy
        run: |
          # Deploy to green environment
          helm upgrade --install xorb-green ./deploy/kubernetes/helm/xorb \
            --namespace xorb-production \
            --set image.tag=${{ needs.build-images.outputs.image-tag }} \
            --set environment=production \
            --set deployment.strategy=green \
            --set ingress.hostname=api.xorb-security.com \
            --values ./deploy/kubernetes/helm/xorb/values-production.yaml \
            --wait --timeout=600s

      - name: Run production health checks
        run: |
          # Wait for green deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/xorb-api-green -n xorb-production

          # Health check green environment
          kubectl port-forward svc/xorb-api-green 8080:80 -n xorb-production &
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/readiness || exit 1

      - name: Switch traffic to green
        run: |
          # Update ingress to point to green
          kubectl patch ingress xorb-ingress -n xorb-production -p '{"spec":{"rules":[{"host":"api.xorb-security.com","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"xorb-api-green","port":{"number":80}}}}]}}]}}'

      - name: Monitor deployment
        run: |
          # Monitor for 5 minutes
          sleep 300

          # Check error rates
          ERROR_RATE=$(kubectl logs -l app=xorb-api-green -n xorb-production --since=5m | grep ERROR | wc -l)
          if [ $ERROR_RATE -gt 10 ]; then
            echo "High error rate detected, rolling back"
            exit 1
          fi

      - name: Clean up blue environment
        run: |
          # Remove old blue deployment
          helm uninstall xorb-blue -n xorb-production || true

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'XORB Production deployment completed successfully'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Update monitoring dashboards
        run: |
          # Update Grafana dashboards with new deployment info
          curl -X POST "${{ secrets.GRAFANA_URL }}/api/dashboards/db" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @monitoring/grafana-dashboard-production.json

      - name: Update documentation
        run: |
          # Update deployment documentation
          echo "Deployment completed at $(date)" >> DEPLOYMENT_LOG.md
          git add DEPLOYMENT_LOG.md
          git commit -m "Update deployment log" || true
          git push || true

      - name: Performance benchmark
        run: |
          # Run performance tests against production
          python scripts/performance_benchmark.py --environment=production
