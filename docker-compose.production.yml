version: '3.8'

services:
  # XORB API Service
  xorb-api:
    build:
      context: .
      dockerfile: Dockerfile.unified
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-3.2.0}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: xorb-api
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: false  # Set to true when app supports it
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1000:1000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://xorb_user:${POSTGRES_PASSWORD}@postgres:5432/xorb_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - PROMETHEUS_PORT=9090
      - API_WORKERS=4
      - CORS_ALLOW_ORIGINS=${CORS_ALLOW_ORIGINS:-https://app.xorb.enterprise}
      - TZ=UTC
    ports:
      - "127.0.0.1:8000:8000"  # Bind to localhost only
      - "127.0.0.1:9090:9090"  # Prometheus metrics
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
      - ./secrets:/app/secrets:ro
    networks:
      - xorb-backend  # API service in backend network
      - xorb-data     # Access to data layer
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
          pids: 200
        reservations:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: xorb-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=xorb_db
      - POSTGRES_USER=xorb_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-local=trust
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only for security
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - xorb-data  # Database in isolated data network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xorb_user -d xorb_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: xorb-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only for security
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - xorb-data  # Redis in isolated data network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # XORB Orchestrator Service
  xorb-orchestrator:
    build:
      context: .
      dockerfile: src/orchestrator/Dockerfile
    container_name: xorb-orchestrator
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://xorb_user:${POSTGRES_PASSWORD}@postgres:5432/xorb_db
      - REDIS_URL=redis://redis:6379/0
      - TEMPORAL_HOST=temporal:7233
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
      - temporal
    volumes:
      - ./logs:/app/logs
    networks:
      - xorb-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Temporal Workflow Engine
  temporal:
    image: temporalio/auto-setup:1.22.0
    container_name: xorb-temporal
    restart: unless-stopped
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=xorb_user
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=false
      - SKIP_SCHEMA_SETUP=false
    ports:
      - "7233:7233"
      - "8233:8233"  # Web UI
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./config/temporal:/etc/temporal/config/dynamicconfig
    networks:
      - xorb-network
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: xorb-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9092:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules.yml:/etc/prometheus/rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - xorb-network
    depends_on:
      - xorb-api
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: xorb-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3010:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - xorb-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: xorb-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - xorb-network
    depends_on:
      - xorb-api
      - grafana
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Log Aggregation (Optional)
  fluentd:
    image: fluentd:v1.16.2-debian-1.0
    container_name: xorb-fluentd
    restart: unless-stopped
    volumes:
      - ./config/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/fluentd/log
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - xorb-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  # Frontend network - external facing services
  xorb-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.1.0/24
    labels:
      - "network.security.zone=dmz"
  
  # Backend network - internal API services
  xorb-backend:
    driver: bridge
    internal: false  # Allow external access for API
    ipam:
      config:
        - subnet: 172.20.2.0/24
    labels:
      - "network.security.zone=backend"
  
  # Data network - database and cache services
  xorb-data:
    driver: bridge
    internal: true   # No external access
    ipam:
      config:
        - subnet: 172.20.3.0/24
    labels:
      - "network.security.zone=data"
  
  # Legacy network for compatibility
  xorb-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16