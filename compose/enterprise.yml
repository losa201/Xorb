version: '3.8'

services:
  # PTaaS Frontend Service
  ptaas-frontend:
    build:
      context: ./services/ptaas/web
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - REACT_APP_XORB_API_URL=http://xorb-api:8000
      - REACT_APP_XORB_WS_URL=ws://xorb-api:8000/ws
      - NODE_ENV=production
    depends_on:
      - xorb-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - xorb-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ptaas.rule=Host(`ptaas.localhost`)"
      - "traefik.http.services.ptaas.loadbalancer.server.port=8080"

  # XORB Core API Gateway
  xorb-api:
    build:
      context: ./services/xorb-core/api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://xorb_user:${POSTGRES_PASSWORD}@postgres:5432/xorb_db
      - REDIS_URL=redis://redis:6379/0
      - TEMPORAL_HOST=temporal:7233
      - VAULT_ADDR=http://vault:8200
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - JWT_SECRET_KEY=vault:secret/xorb/config#jwt_secret_key
      - RATE_LIMIT_PER_MINUTE=1000
      - RATE_LIMIT_PER_HOUR=50000
      - ENABLE_METRICS=true
    depends_on:
      - postgres
      - redis
      - temporal
      - vault
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - xorb-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

  # XORB Orchestrator Service
  xorb-orchestrator:
    build:
      context: ./services/xorb-core/orchestrator
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - TEMPORAL_HOST=temporal:7233
      - DATABASE_URL=postgresql://xorb_user:${POSTGRES_PASSWORD}@postgres:5432/xorb_db
      - REDIS_URL=redis://redis:6379/1
      - LOG_LEVEL=INFO
    depends_on:
      - temporal
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - xorb-network

  # Database Services
  postgres:
    image: ankane/pgvector:v0.5.1
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=xorb_db
      - POSTGRES_USER=xorb_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/infrastructure/databases/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xorb_user -d xorb_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - xorb-network

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - xorb-network

  # Temporal Workflow Engine
  temporal:
    image: temporalio/temporal-dev:latest
    ports:
      - "7233:7233"
      - "8233:8233"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=xorb_user
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgres
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "temporal", "server", "start-dev", "--headless"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - xorb-network

  # HashiCorp Vault
  vault:
    image: vault:1.15
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - ./services/infrastructure/vault/vault-config.hcl:/vault/config/vault-config.hcl
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - xorb-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9092:9090"
    volumes:
      - ./services/infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./services/infrastructure/monitoring/prometheus-rules.yml:/etc/prometheus/rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - xorb-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3010:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./services/infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./services/infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - xorb-network

  # Reverse Proxy and Load Balancer
  traefik:
    image: traefik:v2.10
    ports:
      - "80:80"
      - "8090:8080"  # Traefik dashboard
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--metrics.prometheus=true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - xorb-network
    labels:
      - "traefik.enable=true"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  vault_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  xorb-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Environment variables template
# Copy to .env and configure:
#
# POSTGRES_PASSWORD=secure_postgres_password_123
# REDIS_PASSWORD=secure_redis_password_123
# VAULT_ROOT_TOKEN=dev-only-token
# GRAFANA_ADMIN_PASSWORD=SecureAdminPass123!
# JWT_SECRET_KEY=your-jwt-secret-key-here
# ENCRYPTION_KEY=your-32-byte-encryption-key-here
