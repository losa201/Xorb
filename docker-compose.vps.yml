# Production VPS Deployment - Hardened Configuration
# Single 16 vCPU / 32 GiB EPYC VPS deployment
# All containers run as non-root with security hardening

version: '3.8'

x-common: &common
  restart: unless-stopped
  security_opt:
    - no-new-privileges:true
    - seccomp:unconfined
  read_only: true
  networks:
    - xorb-internal
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

x-app-common: &app-common
  <<: *common
  cap_drop:
    - ALL
  cap_add:
    - NET_BIND_SERVICE
  environment:
    - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
    - OTEL_RESOURCE_ATTRIBUTES=service.version=${XORB_VERSION:-2.0.0}
    - PYTHONUNBUFFERED=1
    - POSTGRES_URL=postgresql://xorb:${POSTGRES_PASSWORD}@postgres:5432/xorb
    - REDIS_URL=redis://redis:6379/0
    - NATS_URL=nats://nats:4222
    - NEO4J_URL=bolt://neo4j:7687
    - NEO4J_USER=neo4j
    - NEO4J_PASSWORD=${NEO4J_PASSWORD}

services:
  # API Service - FastAPI REST interface
  api:
    <<: *app-common
    image: ghcr.io/xorb/xorb-api:${XORB_VERSION:-2.0.0}
    user: "10101:10101"
    ports:
      - "8000:8000"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.version=${XORB_VERSION:-2.0.0}
      - PYTHONUNBUFFERED=1
      - POSTGRES_URL=postgresql://xorb:${POSTGRES_PASSWORD}@postgres:5432/xorb
      - REDIS_URL=redis://redis:6379/0
      - NATS_URL=nats://nats:4222
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - PUID=10101
      - PGID=10101
      - SERVICE_NAME=xorb-api
    volumes:
      - /tmp/xorb-api:/tmp:rw
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      embedding:
        condition: service_healthy

  # Worker Service - Background task processing
  worker:
    <<: *app-common
    image: ghcr.io/xorb/xorb-worker:${XORB_VERSION:-2.0.0}
    user: "10102:10102"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.version=${XORB_VERSION:-2.0.0}
      - PYTHONUNBUFFERED=1
      - POSTGRES_URL=postgresql://xorb:${POSTGRES_PASSWORD}@postgres:5432/xorb
      - REDIS_URL=redis://redis:6379/0
      - NATS_URL=nats://nats:4222
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - PUID=10102
      - PGID=10102
      - SERVICE_NAME=xorb-worker
      - EDGE_NODE=false
    volumes:
      - /tmp/xorb-worker:/tmp:rw
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import sys; sys.exit(0)'"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy

  # Embedding Service - NVIDIA API integration
  embedding:
    <<: *app-common
    image: ghcr.io/xorb/xorb-embedding:${XORB_VERSION:-2.0.0}
    user: "10103:10103"
    ports:
      - "50051:50051"  # gRPC port
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.version=${XORB_VERSION:-2.0.0}
      - PYTHONUNBUFFERED=1
      - POSTGRES_URL=postgresql://xorb:${POSTGRES_PASSWORD}@postgres:5432/xorb
      - REDIS_URL=redis://redis:6379/0
      - NATS_URL=nats://nats:4222
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - PUID=10103
      - PGID=10103
      - SERVICE_NAME=xorb-embedding
      - NVIDIA_API_KEY_FILE=/run/secrets/nvidia_api_key
    volumes:
      - /tmp/xorb-embedding:/tmp:rw
    secrets:
      - nvidia_api_key
    healthcheck:
      test: ["CMD-SHELL", "grpc_health_probe -addr=localhost:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy

  # PostgreSQL Database - Primary data store
  postgres:
    image: bitnami/postgresql:16
    user: "1001:1001"
    restart: unless-stopped
    environment:
      - POSTGRES_USER=xorb
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=xorb
      - POSTGRESQL_ENABLE_LDAP=no
      - POSTGRESQL_ENABLE_TLS=no
      - POSTGRESQL_LOG_HOSTNAME=yes
      - POSTGRESQL_LOG_CONNECTIONS=yes
      - POSTGRESQL_LOG_DISCONNECTIONS=yes
    volumes:
      - postgres_data:/bitnami/postgresql:Z
      - ./compose/postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - xorb-internal
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xorb -d xorb"]
      interval: 10s
      timeout: 5s
      retries: 5
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # Neo4j Graph Database - Knowledge relationships
  neo4j:
    image: neo4j:5-enterprise
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_server_memory_heap_initial__size=2G
      - NEO4J_server_memory_heap_max__size=4G
      - NEO4J_server_memory_pagecache_size=2G
      - NEO4J_server_config_strict__validation_enabled=false
    volumes:
      - neo4j_data:/data:Z
      - neo4j_logs:/logs:Z
    networks:
      - xorb-internal
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p ${NEO4J_PASSWORD} 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # Redis Cache - Hot storage and sessions
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data:Z
    networks:
      - xorb-internal
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m

  # NATS Streaming - Event messaging
  nats:
    image: nats:2.10-alpine
    restart: unless-stopped
    command: ["nats-server", "--jetstream", "--store_dir=/data", "--max_file_store=10GB"]
    volumes:
      - nats_data:/data:Z
    networks:
      - xorb-internal
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8222/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.52.0
    restart: unless-stopped
    user: "nobody:nobody"
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./compose/observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./compose/observability/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus:Z
    networks:
      - xorb-internal
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:11.1.0
    restart: unless-stopped
    user: "472:472"
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana:Z
      - ./compose/observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./compose/observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - xorb-internal
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - prometheus

  # Tempo - Distributed tracing
  tempo:
    image: grafana/tempo:2.4.2
    restart: unless-stopped
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./compose/observability/tempo/tempo.yaml:/etc/tempo.yaml:ro
      - tempo_data:/tmp/tempo:Z
    ports:
      - "3200:3200"  # Tempo HTTP
      - "4317:4317"  # OTLP gRPC
    networks:
      - xorb-internal
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3200/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alertmanager - Alert routing and notifications
  alertmanager:
    image: prom/alertmanager:v0.27.0
    restart: unless-stopped
    user: "nobody:nobody"
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./compose/observability/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager:Z
    networks:
      - xorb-internal
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9093/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  xorb-internal:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  tempo_data:
    driver: local
  alertmanager_data:
    driver: local

secrets:
  nvidia_api_key:
    file: .secrets/nvidia_api_key
  postgres_password:
    file: .secrets/postgres_password