# Xorb 2.0 EPYC-Optimized Platform - Enhanced Makefile
# Developer UX improvements with hot-reload, EPYC optimization, and comprehensive tooling

SHELL := /bin/bash
.DEFAULT_GOAL := help
.PHONY: help

# Project configuration
PROJECT_NAME := xorb
VERSION := 2.0.0
PYTHON_VERSION := 3.12

# Directories
SRC_DIR := packages/xorb_core
TESTS_DIR := tests
DOCS_DIR := docs
VENV_DIR := venv
RESULTS_DIR := optimization_results

# EPYC Configuration
EPYC_CORES := 64
NUMA_NODES := 2
EPYC_MODEL := 7702

# Kubernetes configuration
K8S_NAMESPACE := xorb-prod
KUBECTL := kubectl
HELM := helm

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
PURPLE := \033[0;35m
CYAN := \033[0;36m
WHITE := \033[0;37m
RESET := \033[0m

# ============================================================================
# Help System
# ============================================================================

help: ## Show this help message
	@echo "$(CYAN)Xorb 2.0 EPYC-Optimized Platform - Developer Tools$(RESET)"
	@echo "$(CYAN)=================================================$(RESET)"
	@echo ""
	@echo "$(YELLOW)üöÄ Development Commands:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "dev-|setup|install|clean" | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üîß EPYC Optimization:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "epyc-|numa-|optimize" | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üêõ Testing & Quality:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "test|lint|format|check" | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)‚ò∏Ô∏è  Kubernetes & Deployment:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "deploy|k8s-|helm-" | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üìä Monitoring & Analysis:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "monitor|metrics|benchmark|profile" | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üîê Security:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "security|audit|scan" | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'

# ============================================================================
# Development Environment Setup
# ============================================================================

setup: setup-python setup-deps setup-pre-commit setup-epyc ## Complete development environment setup
	@echo "$(GREEN)‚úÖ Development environment setup complete!$(RESET)"

setup-python: ## Set up Python virtual environment
	@echo "$(BLUE)üêç Setting up Python virtual environment...$(RESET)"
	@python3 -m venv $(VENV_DIR)
	@source $(VENV_DIR)/bin/activate && pip install --upgrade pip setuptools wheel

setup-deps: ## Install all dependencies
	@echo "$(BLUE)üì¶ Installing dependencies...$(RESET)"
	@source $(VENV_DIR)/bin/activate && pip install -r requirements.txt
	@source $(VENV_DIR)/bin/activate && pip install torch --index-url https://download.pytorch.org/whl/cpu
	@source $(VENV_DIR)/bin/activate && pip install cerebras-cloud-sdk optuna ray[tune] prometheus-client
	@source $(VENV_DIR)/bin/activate && pip install pytest pytest-asyncio pytest-cov black isort flake8 mypy
	@echo "$(GREEN)‚úÖ Dependencies installed$(RESET)"

setup-pre-commit: ## Set up pre-commit hooks
	@echo "$(BLUE)üîó Setting up pre-commit hooks...$(RESET)"
	@source $(VENV_DIR)/bin/activate && pip install pre-commit
	@source $(VENV_DIR)/bin/activate && pre-commit install
	@echo "$(GREEN)‚úÖ Pre-commit hooks installed$(RESET)"

setup-epyc: ## Configure EPYC-specific optimizations
	@echo "$(BLUE)‚ö° Configuring EPYC optimizations...$(RESET)"
	@mkdir -p $(RESULTS_DIR)
	@echo "EPYC_CORES=$(EPYC_CORES)" > .env
	@echo "NUMA_NODES=$(NUMA_NODES)" >> .env
	@echo "EPYC_MODEL=$(EPYC_MODEL)" >> .env
	@echo "$(GREEN)‚úÖ EPYC configuration saved to .env$(RESET)"

clean: ## Clean up development environment
	@echo "$(YELLOW)üßπ Cleaning up...$(RESET)"
	@rm -rf $(VENV_DIR)
	@rm -rf __pycache__ .pytest_cache .mypy_cache
	@rm -rf packages/xorb_core/xorb_core/__pycache__
	@rm -rf .coverage htmlcov/
	@rm -rf build/ dist/ *.egg-info/
	@echo "$(GREEN)‚úÖ Cleanup complete$(RESET)"

# ============================================================================
# Development Commands
# ============================================================================

dev-start: ## Start development environment with hot-reload
	@echo "$(BLUE)üöÄ Starting Xorb development environment...$(RESET)"
	@source $(VENV_DIR)/bin/activate && python -m watchdog.observers \
		--patterns="*.py" \
		--command="python packages/xorb_core/run_dev.py" \
		--directory=packages/xorb_core/xorb_core \
		--recursive

dev-shell: ## Start development shell with environment loaded
	@echo "$(BLUE)üêö Starting development shell...$(RESET)"
	@source $(VENV_DIR)/bin/activate && \
	export PYTHONPATH=$$PWD/$(SRC_DIR):$$PYTHONPATH && \
	export EPYC_CORES=$(EPYC_CORES) && \
	export NUMA_NODES=$(NUMA_NODES) && \
	bash --rcfile <(echo '. ~/.bashrc; echo "$(CYAN)Xorb 2.0 Development Environment$(RESET)"; echo "Python: $$(python --version)"; echo "EPYC Cores: $(EPYC_CORES)"; echo "NUMA Nodes: $(NUMA_NODES)"')

dev-reload: ## Reload development services
	@echo "$(BLUE)üîÑ Reloading development services...$(RESET)"
	@pkill -f "python.*xorb" || true
	@sleep 2
	@make dev-start

install: setup-deps ## Install package in development mode
	@echo "$(BLUE)üì¶ Installing Xorb in development mode...$(RESET)"
	@source $(VENV_DIR)/bin/activate && cd $(SRC_DIR) && pip install -e .
	@echo "$(GREEN)‚úÖ Package installed in development mode$(RESET)"

# ============================================================================
# EPYC Optimization Commands
# ============================================================================

epyc-info: ## Show EPYC processor information
	@echo "$(BLUE)‚ö° EPYC Processor Information:$(RESET)"
	@lscpu | grep -E "(Model name|Thread|Core|Socket|NUMA)" || echo "$(YELLOW)‚ö†Ô∏è  Run on EPYC system for detailed info$(RESET)"
	@echo ""
	@echo "$(CYAN)Configured EPYC Settings:$(RESET)"
	@echo "  Cores: $(EPYC_CORES)"
	@echo "  NUMA Nodes: $(NUMA_NODES)"
	@echo "  Model: EPYC $(EPYC_MODEL)"

numa-test: ## Test NUMA topology and optimization
	@echo "$(BLUE)üßÆ Testing NUMA topology...$(RESET)"
	@source $(VENV_DIR)/bin/activate && python -c "
import asyncio
import sys
sys.path.insert(0, '$(SRC_DIR)')
from xorb_core.orchestration.epyc_numa_optimizer import EPYCNUMAOptimizer

async def test_numa():
    optimizer = EPYCNUMAOptimizer()
    stats = await optimizer.get_numa_utilization_stats()
    print('$(CYAN)NUMA Status:$(RESET)')
    for key, value in stats.items():
        print(f'  {key}: {value}')

asyncio.run(test_numa())
"

optimize-hyperparams: ## Run hyperparameter optimization
	@echo "$(BLUE)üéØ Running hyperparameter optimization...$(RESET)"
	@mkdir -p $(RESULTS_DIR)
	@source $(VENV_DIR)/bin/activate && python -c "
import asyncio
import sys
sys.path.insert(0, '$(SRC_DIR)')
from xorb_core.optimization.hyperparameter_tuner import EPYCHyperparameterTuner

async def optimize():
    tuner = EPYCHyperparameterTuner(epyc_cores=$(EPYC_CORES), optimization_budget_minutes=30)
    best_params = await tuner.optimize_hyperparameters(n_trials=20)
    print('$(GREEN)‚úÖ Optimization completed$(RESET)')
    print(f'Best parameters saved to: {tuner.study_name}')

asyncio.run(optimize())
"

epyc-benchmark: ## Run EPYC-specific benchmarks
	@echo "$(BLUE)üìä Running EPYC benchmarks...$(RESET)"
	@source $(VENV_DIR)/bin/activate && python -c "
import time
import asyncio
import sys
sys.path.insert(0, '$(SRC_DIR)')
from xorb_core.orchestration.dqn_agent_selector import DQNAgentSelector
from xorb_core.orchestration.epyc_numa_optimizer import EPYCNUMAOptimizer

async def benchmark():
    print('$(CYAN)DQN Performance Test:$(RESET)')
    start = time.time()
    dqn = DQNAgentSelector(state_size=128, action_size=16, epyc_cores=$(EPYC_CORES))
    print(f'  Initialization: {time.time() - start:.3f}s')
    
    print('$(CYAN)NUMA Optimization Test:$(RESET)')
    start = time.time()
    numa_opt = EPYCNUMAOptimizer()
    stats = await numa_opt.get_numa_utilization_stats()
    print(f'  NUMA Stats: {time.time() - start:.3f}s')
    print(f'  NUMA Available: {stats[\"numa_available\"]}')

asyncio.run(benchmark())
"

# ============================================================================
# Testing & Quality Assurance
# ============================================================================

test: ## Run all tests
	@echo "$(BLUE)üß™ Running tests...$(RESET)"
	@source $(VENV_DIR)/bin/activate && python -m pytest $(TESTS_DIR) -v

test-coverage: ## Run tests with coverage report
	@echo "$(BLUE)üìä Running tests with coverage...$(RESET)"
	@source $(VENV_DIR)/bin/activate && python -m pytest $(TESTS_DIR) --cov=$(SRC_DIR) --cov-report=html --cov-report=term

test-components: ## Test core components
	@echo "$(BLUE)üîß Testing core components...$(RESET)"
	@source $(VENV_DIR)/bin/activate && python test_core_components.py

test-integration: ## Run integration tests
	@echo "$(BLUE)üîó Running integration tests...$(RESET)"
	@source $(VENV_DIR)/bin/activate && python validate_deployment.py

lint: ## Run code linting
	@echo "$(BLUE)üîç Linting code...$(RESET)"
	@source $(VENV_DIR)/bin/activate && flake8 $(SRC_DIR) --max-line-length=120 --ignore=E501,W503
	@source $(VENV_DIR)/bin/activate && mypy $(SRC_DIR) --ignore-missing-imports

format: ## Format code
	@echo "$(BLUE)‚ú® Formatting code...$(RESET)"
	@source $(VENV_DIR)/bin/activate && black $(SRC_DIR) --line-length=120
	@source $(VENV_DIR)/bin/activate && isort $(SRC_DIR) --profile=black

format-check: ## Check code formatting
	@echo "$(BLUE)üìã Checking code formatting...$(RESET)"
	@source $(VENV_DIR)/bin/activate && black $(SRC_DIR) --check --line-length=120
	@source $(VENV_DIR)/bin/activate && isort $(SRC_DIR) --check-only --profile=black

check-all: lint format-check test ## Run all quality checks
	@echo "$(GREEN)‚úÖ All quality checks completed$(RESET)"

# ============================================================================
# Kubernetes & Deployment
# ============================================================================

k8s-setup: ## Set up Kubernetes namespace and RBAC
	@echo "$(BLUE)‚ò∏Ô∏è  Setting up Kubernetes environment...$(RESET)"
	@$(KUBECTL) create namespace $(K8S_NAMESPACE) --dry-run=client -o yaml | $(KUBECTL) apply -f -
	@$(KUBECTL) label nodes --all node.kubernetes.io/cpu-family=EPYC --overwrite
	@$(KUBECTL) label nodes --all xorb.ai/optimized-for=epyc-$(EPYC_MODEL) --overwrite
	@echo "$(GREEN)‚úÖ Kubernetes environment ready$(RESET)"

deploy: ## Deploy Xorb to Kubernetes
	@echo "$(BLUE)üöÄ Deploying Xorb to Kubernetes...$(RESET)"
	@$(KUBECTL) apply -f gitops/overlays/production/
	@echo "$(GREEN)‚úÖ Deployment complete$(RESET)"

deploy-monitoring: ## Deploy monitoring stack
	@echo "$(BLUE)üìä Deploying monitoring stack...$(RESET)"
	@$(KUBECTL) apply -f gitops/monitoring/
	@echo "$(GREEN)‚úÖ Monitoring deployed$(RESET)"

deploy-security: ## Deploy security policies
	@echo "$(BLUE)üîê Deploying security policies...$(RESET)"
	@$(KUBECTL) apply -f gitops/security/
	@echo "$(GREEN)‚úÖ Security policies deployed$(RESET)"

k8s-status: ## Show Kubernetes deployment status
	@echo "$(BLUE)üìä Kubernetes Status:$(RESET)"
	@echo ""
	@echo "$(CYAN)Pods:$(RESET)"
	@$(KUBECTL) get pods -n $(K8S_NAMESPACE) -o wide
	@echo ""
	@echo "$(CYAN)Services:$(RESET)"
	@$(KUBECTL) get services -n $(K8S_NAMESPACE)
	@echo ""
	@echo "$(CYAN)EPYC CPU Governor:$(RESET)"
	@$(KUBECTL) get pods -n $(K8S_NAMESPACE) -l app.kubernetes.io/name=epyc-cpu-governor

k8s-logs: ## Show application logs
	@echo "$(BLUE)üìã Application Logs:$(RESET)"
	@$(KUBECTL) logs -n $(K8S_NAMESPACE) -l app.kubernetes.io/name=xorb --tail=50

k8s-epyc-logs: ## Show EPYC CPU governor logs
	@echo "$(BLUE)‚ö° EPYC CPU Governor Logs:$(RESET)"
	@$(KUBECTL) logs -n $(K8S_NAMESPACE) -l app.kubernetes.io/name=epyc-cpu-governor --tail=20

k8s-cleanup: ## Clean up Kubernetes resources
	@echo "$(YELLOW)üßπ Cleaning up Kubernetes resources...$(RESET)"
	@$(KUBECTL) delete namespace $(K8S_NAMESPACE) --ignore-not-found=true
	@echo "$(GREEN)‚úÖ Cleanup complete$(RESET)"

# ============================================================================
# Monitoring & Analysis
# ============================================================================

monitor-performance: ## Monitor system performance
	@echo "$(BLUE)üìä Monitoring performance...$(RESET)"
	@while true; do \
		clear; \
		echo "$(CYAN)Xorb 2.0 Performance Monitor$(RESET)"; \
		echo "$(CYAN)=============================$(RESET)"; \
		echo ""; \
		echo "$(YELLOW)CPU Usage:$(RESET)"; \
		top -bn1 | grep "Cpu(s)" | awk '{print $$2}' | sed 's/%us,//'; \
		echo ""; \
		echo "$(YELLOW)Memory Usage:$(RESET)"; \
		free -h | grep "Mem:"; \
		echo ""; \
		echo "$(YELLOW)NUMA Nodes:$(RESET)"; \
		numactl --show 2>/dev/null || echo "NUMA info not available"; \
		echo ""; \
		echo "Press Ctrl+C to exit"; \
		sleep 5; \
	done

metrics-dashboard: ## Open Grafana dashboard
	@echo "$(BLUE)üìä Opening metrics dashboard...$(RESET)"
	@$(KUBECTL) port-forward -n $(K8S_NAMESPACE) svc/grafana 3000:3000 &
	@sleep 2
	@echo "$(GREEN)‚úÖ Dashboard available at: http://localhost:3000$(RESET)"
	@echo "$(YELLOW)Use Ctrl+C to stop port forwarding$(RESET)"

benchmark-dqn: ## Benchmark DQN performance
	@echo "$(BLUE)üéØ Benchmarking DQN performance...$(RESET)"
	@source $(VENV_DIR)/bin/activate && python -c "
import time
import torch
import numpy as np
import sys
sys.path.insert(0, '$(SRC_DIR)')
from xorb_core.orchestration.dqn_agent_selector import DQNAgentSelector

print('$(CYAN)DQN Performance Benchmark$(RESET)')
print('$(CYAN)=========================$(RESET)')

# Initialize DQN
dqn = DQNAgentSelector(state_size=128, action_size=16, epyc_cores=$(EPYC_CORES))

# Benchmark inference
times = []
for i in range(100):
    start = time.time()
    state = np.random.randn(128).astype(np.float32)
    action = dqn.select_action(state, epsilon=0.1)
    times.append(time.time() - start)

avg_time = np.mean(times)
throughput = 1.0 / avg_time

print(f'Average inference time: {avg_time*1000:.2f}ms')
print(f'Throughput: {throughput:.0f} inferences/second')
print(f'EPYC optimization: $(GREEN)‚úÖ Enabled$(RESET)')
"

profile-memory: ## Profile memory usage
	@echo "$(BLUE)üß† Profiling memory usage...$(RESET)"
	@source $(VENV_DIR)/bin/activate && python -c "
import psutil
import sys
sys.path.insert(0, '$(SRC_DIR)')

print('$(CYAN)Memory Profile$(RESET)')
print('$(CYAN)==============$(RESET)')

# System memory
mem = psutil.virtual_memory()
print(f'Total Memory: {mem.total / (1024**3):.1f} GB')
print(f'Available Memory: {mem.available / (1024**3):.1f} GB')
print(f'Memory Usage: {mem.percent}%')

# NUMA information
try:
    with open('/proc/meminfo', 'r') as f:
        for line in f:
            if 'Huge' in line or 'Numa' in line:
                print(line.strip())
except:
    print('$(YELLOW)NUMA memory info not available$(RESET)')
"

# ============================================================================
# Security Commands
# ============================================================================

security-scan: ## Run security scans
	@echo "$(BLUE)üîê Running security scans...$(RESET)"
	@source $(VENV_DIR)/bin/activate && pip install safety bandit
	@source $(VENV_DIR)/bin/activate && safety check
	@source $(VENV_DIR)/bin/activate && bandit -r $(SRC_DIR) -f json -o security_report.json
	@echo "$(GREEN)‚úÖ Security scan complete, report saved to security_report.json$(RESET)"

audit-dependencies: ## Audit dependencies for vulnerabilities
	@echo "$(BLUE)üîç Auditing dependencies...$(RESET)"
	@source $(VENV_DIR)/bin/activate && pip audit
	@echo "$(GREEN)‚úÖ Dependency audit complete$(RESET)"

security-policies: ## Apply security policies
	@echo "$(BLUE)üõ°Ô∏è  Applying security policies...$(RESET)"
	@$(KUBECTL) apply -f gitops/security/pod-security-policies.yaml
	@$(KUBECTL) apply -f gitops/security/opa-gatekeeper-constraints.yaml
	@echo "$(GREEN)‚úÖ Security policies applied$(RESET)"

# ============================================================================
# Utility Commands
# ============================================================================

version: ## Show version information
	@echo "$(CYAN)Xorb 2.0 EPYC-Optimized Platform$(RESET)"
	@echo "Version: $(VERSION)"
	@echo "Python: $(shell python3 --version)"
	@echo "EPYC Cores: $(EPYC_CORES)"
	@echo "NUMA Nodes: $(NUMA_NODES)"
	@echo "Build Date: $(shell date)"

env-info: ## Show environment information
	@echo "$(BLUE)üåç Environment Information:$(RESET)"
	@echo "  Project: $(PROJECT_NAME)"
	@echo "  Version: $(VERSION)"
	@echo "  Python: $(PYTHON_VERSION)"
	@echo "  EPYC Cores: $(EPYC_CORES)"
	@echo "  NUMA Nodes: $(NUMA_NODES)"
	@echo "  Virtual Env: $(VENV_DIR)"
	@echo "  Kubernetes Namespace: $(K8S_NAMESPACE)"

quick-start: setup install test deploy ## Quick start - setup, install, test, and deploy
	@echo "$(GREEN)üéâ Quick start complete! Xorb 2.0 is ready for development.$(RESET)"

# ============================================================================
# Aliases for Common Commands
# ============================================================================

start: dev-start ## Alias for dev-start
run: dev-start ## Alias for dev-start
shell: dev-shell ## Alias for dev-shell
status: k8s-status ## Alias for k8s-status
logs: k8s-logs ## Alias for k8s-logs