# XORB Ecosystem Makefile
# Organized repository management and deployment

.PHONY: help setup deps dev test lint format clean bootstrap up down logs

# Default target
help: ## Show this help message
	@echo "XORB Ecosystem - Organized Repository Management"
	@echo "Available targets:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  %-15s %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Environment Setup
setup: ## Initial development environment setup
	@echo "🔧 Setting up XORB development environment..."
	@./scripts/launch/bootstrap.sh
	@echo "✅ Setup complete"

deps: ## Install/update dependencies
	@echo "📦 Installing dependencies..."
	@pip install -r requirements.txt
	@echo "✅ Dependencies installed"

dev: deps ## Complete dev setup and start services
	@echo "🚀 Starting development environment..."
	@docker-compose up -d
	@echo "✅ Development environment ready"

# Testing
test: ## Run all tests
	@echo "🧪 Running tests..."
	@pytest tests/ -v
	@echo "✅ Tests complete"

test-unit: ## Run unit tests only
	@echo "🧪 Running unit tests..."
	@pytest tests/unit/ -v

test-integration: ## Run integration tests only
	@echo "🧪 Running integration tests..."
	@pytest tests/integration/ -v

test-e2e: ## Run end-to-end tests
	@echo "🧪 Running e2e tests..."
	@pytest tests/e2e/ -v

# Code Quality
lint: ## Run code linting
	@echo "🔍 Linting code..."
	@flake8 xorb_core/ services/
	@mypy xorb_core/
	@echo "✅ Linting complete"

format: ## Format code
	@echo "🎨 Formatting code..."
	@black xorb_core/ services/
	@isort xorb_core/ services/
	@echo "✅ Formatting complete"

security-scan: ## Run security scanning
	@echo "🔒 Running security scan..."
	@bandit -r xorb_core/
	@echo "✅ Security scan complete"

quality: format lint test security-scan ## Run all quality checks

# Docker Operations
build: ## Build all Docker images
	@echo "🐳 Building Docker images..."
	@docker-compose build
	@echo "✅ Build complete"

up: ## Start all services
	@echo "🚀 Starting XORB ecosystem..."
	@docker-compose up -d
	@echo "✅ Services started"

down: ## Stop all services
	@echo "🛑 Stopping XORB ecosystem..."
	@docker-compose down
	@echo "✅ Services stopped"

restart: down up ## Restart all services

logs: ## Show service logs
	@docker-compose logs -f

shell: ## Open shell in API container
	@docker-compose exec api bash

# Environment Management
bootstrap: ## Bootstrap environment with auto-detection
	@./scripts/launch/bootstrap.sh

production-deploy: ## Deploy to production
	@echo "🚀 Deploying to production..."
	@XORB_ENV=production ./scripts/launch/bootstrap.sh

staging-deploy: ## Deploy to staging
	@echo "🚀 Deploying to staging..."
	@XORB_ENV=staging ./scripts/launch/bootstrap.sh

# Monitoring
monitor: ## Start monitoring stack
	@echo "📊 Starting monitoring..."
	@docker-compose -f docker-compose.monitoring.yml up -d

prometheus: ## Open Prometheus
	@echo "📈 Opening Prometheus at http://localhost:9090"
	@open http://localhost:9090 || xdg-open http://localhost:9090

grafana: ## Open Grafana
	@echo "📊 Opening Grafana at http://localhost:3000"
	@open http://localhost:3000 || xdg-open http://localhost:3000

# Maintenance
clean: ## Clean up containers and images
	@echo "🧹 Cleaning up..."
	@docker-compose down -v
	@docker system prune -f
	@echo "✅ Cleanup complete"

clean-all: ## Clean everything including images
	@echo "🧹 Deep cleaning..."
	@docker-compose down -v --rmi all
	@docker system prune -af
	@echo "✅ Deep cleanup complete"

# Documentation
docs: ## Generate documentation
	@echo "📚 Generating documentation..."
	@echo "✅ Documentation ready"

tree: ## Show organized repository structure
	@echo "📁 XORB Repository Structure:"
	@tree -I '__pycache__|*.pyc|.git|venv|node_modules|.pytest_cache' -L 3

# Agent Management
agent-discovery: ## Test agent discovery system
	@echo "🔍 Testing agent discovery..."
	@python -c "from xorb_core.agents.discovery import discover_agents; print(discover_agents())"

# Database Operations
db-migrate: ## Run database migrations
	@echo "💾 Running database migrations..."
	@alembic upgrade head

db-reset: ## Reset database
	@echo "⚠️  Resetting database..."
	@docker-compose exec postgres psql -U temporal -d temporal -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
	@make db-migrate